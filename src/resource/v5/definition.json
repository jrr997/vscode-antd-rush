{
  "zh": {
    "Affix": {
      "offsetBottom": {
        "property": "offsetBottom",
        "description": "距离窗口底部达到指定偏移量后触发",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "offsetTop": {
        "property": "offsetTop",
        "description": "距离窗口顶部达到指定偏移量后触发",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "设置 `Affix` 需要监听其滚动事件的元素，值为一个返回对应 DOM 元素的函数",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "固定状态改变时触发的回调函数",
        "type": "(affixed?: boolean) => void",
        "default": "-",
        "version": ""
      }
    },
    "Anchor": {
      "affix": {
        "property": "affix",
        "description": "固定模式",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "bounds": {
        "property": "bounds",
        "description": "锚点区域边界",
        "type": "number",
        "default": "5",
        "version": ""
      },
      "getContainer": {
        "property": "getContainer",
        "description": "指定滚动的容器",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": ""
      },
      "getCurrentAnchor": {
        "property": "getCurrentAnchor",
        "description": "自定义高亮的锚点",
        "type": "(activeLink: string) => string",
        "default": "-",
        "version": ""
      },
      "offsetTop": {
        "property": "offsetTop",
        "description": "距离窗口顶部达到指定偏移量后触发",
        "type": "number",
        "default": "",
        "version": ""
      },
      "showInkInFixed": {
        "property": "showInkInFixed",
        "description": "`affix={false}` 时是否显示小方块",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "targetOffset": {
        "property": "targetOffset",
        "description": "锚点滚动偏移量，默认与 offsetTop 相同，[例子](#components-anchor-demo-targetoffset)",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "监听锚点链接改变",
        "type": "(currentActiveLink: string) => void",
        "default": "-",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "`click` 事件的 handler",
        "type": "(e: MouseEvent, link: object) => void",
        "default": "-",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "数据化配置选项内容，支持通过 children 嵌套",
        "type": "{ key, href, title, target, children }\\[] [具体见](#anchoritem)",
        "default": "-",
        "version": "5.1.0"
      },
      "direction": {
        "property": "direction",
        "description": "设置导航方向",
        "type": "`vertical` \\| `horizontal`",
        "default": "`vertical`",
        "version": "5.2.0"
      }
    },
    "Alert": {
      "action": {
        "property": "action",
        "description": "自定义操作项",
        "type": "ReactNode",
        "default": "-",
        "version": "4.9.0"
      },
      "afterClose": {
        "property": "afterClose",
        "description": "关闭动画结束后触发的回调函数",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "banner": {
        "property": "banner",
        "description": "是否用作顶部公告",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "默认不显示关闭按钮",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "closeText": {
        "property": "closeText",
        "description": "自定义关闭按钮",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "自定义关闭 Icon",
        "type": "ReactNode",
        "default": "`<CloseOutlined />`",
        "version": "4.18.0"
      },
      "description": {
        "property": "description",
        "description": "警告提示的辅助性文字介绍",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "自定义图标，`showIcon` 为 true 时有效",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "message": {
        "property": "message",
        "description": "警告提示内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "showIcon": {
        "property": "showIcon",
        "description": "是否显示辅助图标",
        "type": "boolean",
        "default": "false，`banner` 模式下默认值为 true",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "指定警告提示的样式，有四种选择 `success`、`info`、`warning`、`error`",
        "type": "string",
        "default": "`info`，`banner` 模式下默认值为 `warning`",
        "version": ""
      },
      "onClose": {
        "property": "onClose",
        "description": "关闭时触发的回调函数",
        "type": "(e: MouseEvent) => void",
        "default": "-",
        "version": ""
      }
    },
    "Alert.ErrorBoundary": {
      "description": {
        "property": "description",
        "description": "自定义错误内容，如果未指定会展示报错堆栈",
        "type": "ReactNode",
        "default": "{{ error stack }}",
        "version": ""
      },
      "message": {
        "property": "message",
        "description": "自定义错误标题，如果未指定会展示原生报错信息",
        "type": "ReactNode",
        "default": "{{ error }}",
        "version": ""
      }
    },
    "AutoComplete": {
      "allowClear": {
        "property": "allowClear",
        "description": "支持清除",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "backfill": {
        "property": "backfill",
        "description": "使用键盘选择选项的时候把选中项回填到输入框中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "children (自动完成的数据源)": {
        "property": "children (自动完成的数据源)",
        "description": "自动完成的数据源",
        "type": "React.ReactElement&lt;OptionProps> \\| Array&lt;React.ReactElement&lt;OptionProps>>",
        "default": "-",
        "version": ""
      },
      "children (自定义输入框)": {
        "property": "children (自定义输入框)",
        "description": "自定义输入框",
        "type": "HTMLInputElement \\| HTMLTextAreaElement \\| React.ReactElement&lt;InputProps>",
        "default": "&lt;Input />",
        "version": ""
      },
      "defaultActiveFirstOption": {
        "property": "defaultActiveFirstOption",
        "description": "是否默认高亮第一个选项",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "是否默认展开下拉菜单",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "指定默认选中的条目",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "下拉菜单的 className 属性",
        "type": "string",
        "default": "-",
        "version": "4.23.0"
      },
      "dropdownMatchSelectWidth": {
        "property": "dropdownMatchSelectWidth",
        "description": "下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动",
        "type": "boolean \\| number",
        "default": "true",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false",
        "type": "boolean \\| function(inputValue, option)",
        "default": "true",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0)",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "当下拉列表为空时显示的内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "是否展开下拉菜单",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能",
        "type": "{ label, value }\\[]",
        "default": "-",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "输入框提示",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "value": {
        "property": "value",
        "description": "指定当前选中的条目",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时的回调",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选中 option，或 input 的 value 变化时，调用此函数",
        "type": "function(value)",
        "default": "-",
        "version": ""
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "展开下拉菜单的回调",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获得焦点时的回调",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "搜索补全项的时候调用",
        "type": "function(value)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "被选中时调用，参数为选中项的 value 值",
        "type": "function(value, option)",
        "default": "-",
        "version": ""
      },
      "onClear": {
        "property": "onClear",
        "description": "清除内容时的回调",
        "type": "function",
        "default": "-",
        "version": "4.6.0"
      }
    },
    "Anchor.Link": {
      "href": {
        "property": "href",
        "description": "锚点链接",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "该属性指定在何处显示链接的资源",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "文字内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Badge": {
      "color": {
        "property": "color",
        "description": "自定义小圆点的颜色",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "count": {
        "property": "count",
        "description": "展示的数字，大于 overflowCount 时显示为 `${overflowCount}+`，为 0 时隐藏",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "dot": {
        "property": "dot",
        "description": "不展示数字，只有一个小红点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "offset": {
        "property": "offset",
        "description": "设置状态点的位置偏移",
        "type": "\\[number, number]",
        "default": "-",
        "version": ""
      },
      "overflowCount": {
        "property": "overflowCount",
        "description": "展示封顶的数字值",
        "type": "number",
        "default": "99",
        "version": ""
      },
      "showZero": {
        "property": "showZero",
        "description": "当数值为 0 时，是否展示 Badge",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "在设置了 `count` 的前提下有效，设置小圆点的大小",
        "type": "`default` \\| `small`",
        "default": "-",
        "version": "4.6.0"
      },
      "status": {
        "property": "status",
        "description": "设置 Badge 为状态点",
        "type": "`success` \\| `processing` \\| `default` \\| `error` \\| `warning`",
        "default": "-",
        "version": ""
      },
      "text": {
        "property": "text",
        "description": "在设置了 `status` 的前提下有效，设置状态点的文本",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "设置鼠标放在状态点上时显示的文字",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Breadcrumb": {
      "itemRender": {
        "property": "itemRender",
        "description": "自定义链接函数，和 react-router 配置使用",
        "type": "(route, params, routes, paths) => ReactNode",
        "default": "-",
        "version": ""
      },
      "params": {
        "property": "params",
        "description": "路由的参数",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "路由栈信息",
        "type": "[items\\[\\]](#ItemType)",
        "default": "-",
        "version": "5.3.0"
      },
      "separator": {
        "property": "separator",
        "description": "分隔符自定义",
        "type": "ReactNode",
        "default": "`/`",
        "version": ""
      }
    },
    "Badge.Ribbon": {
      "color": {
        "property": "color",
        "description": "自定义缎带的颜色",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "缎带的位置，`start` 和 `end` 随文字方向（RTL 或 LTR）变动",
        "type": "`start` \\| `end`",
        "default": "`end`",
        "version": ""
      },
      "text": {
        "property": "text",
        "description": "缎带中填入的内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Avatar": {
      "alt": {
        "property": "alt",
        "description": "图像无法显示时的替代文本",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "gap": {
        "property": "gap",
        "description": "字符类型距离左右两侧边界单位像素",
        "type": "number",
        "default": "4",
        "version": "4.3.0"
      },
      "icon": {
        "property": "icon",
        "description": "设置头像的自定义图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "shape": {
        "property": "shape",
        "description": "指定头像的形状",
        "type": "`circle` \\| `square`",
        "default": "`circle`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "设置头像的大小",
        "type": "number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...}",
        "default": "`default`",
        "version": "4.7.0"
      },
      "src": {
        "property": "src",
        "description": "图片类头像的资源地址或者图片元素",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "ReactNode: 4.8.0"
      },
      "srcSet": {
        "property": "srcSet",
        "description": "设置图片类头像响应式资源地址",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "draggable": {
        "property": "draggable",
        "description": "图片是否允许拖动",
        "type": "boolean \\| `'true'` \\| `'false'`",
        "default": "true",
        "version": ""
      },
      "crossOrigin": {
        "property": "crossOrigin",
        "description": "CORS 属性设置",
        "type": "`'anonymous'` \\| `'use-credentials'` \\| `''`",
        "default": "-",
        "version": "4.17.0"
      },
      "onError": {
        "property": "onError",
        "description": "图片加载失败的事件，返回 false 会关闭组件默认的 fallback 行为",
        "type": "() => boolean",
        "default": "-",
        "version": ""
      }
    },
    "Avatar.Group": {
      "maxCount": {
        "property": "maxCount",
        "description": "显示的最大头像个数",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "maxPopoverPlacement": {
        "property": "maxPopoverPlacement",
        "description": "多余头像气泡弹出位置",
        "type": "`top` \\| `bottom`",
        "default": "`top`",
        "version": ""
      },
      "maxPopoverTrigger": {
        "property": "maxPopoverTrigger",
        "description": "设置多余头像 Popover 的触发方式",
        "type": "`hover` \\| `focus` \\| `click`",
        "default": "`hover`",
        "version": "4.17.0"
      },
      "maxStyle": {
        "property": "maxStyle",
        "description": "多余头像样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "设置头像的大小",
        "type": "number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...}",
        "default": "`default`",
        "version": "4.8.0"
      }
    },
    "Button": {
      "block": {
        "property": "block",
        "description": "将按钮宽度调整为其父宽度的选项",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "classNames": {
        "property": "classNames",
        "description": "语义化结构 class",
        "type": "Record&lt;SemanticDOM, string>",
        "default": "-",
        "version": "5.4.0"
      },
      "danger": {
        "property": "danger",
        "description": "设置危险按钮",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "设置按钮失效状态",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "ghost": {
        "property": "ghost",
        "description": "幽灵属性，使按钮背景透明",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "href": {
        "property": "href",
        "description": "点击跳转的地址，指定此属性 button 的行为和 a 链接一致",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "htmlType": {
        "property": "htmlType",
        "description": "设置 `button` 原生的 `type` 值，可选值请参考 [HTML 标准](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)",
        "type": "string",
        "default": "`button`",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "设置按钮的图标组件",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "设置按钮载入状态",
        "type": "boolean \\| { delay: number }",
        "default": "false",
        "version": ""
      },
      "shape": {
        "property": "shape",
        "description": "设置按钮形状",
        "type": "`default` \\| `circle` \\| `round`",
        "default": "`default`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "设置按钮大小",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`middle`",
        "version": ""
      },
      "styles": {
        "property": "styles",
        "description": "语义化结构 style",
        "type": "Record&lt;SemanticDOM, CSSProperties>",
        "default": "-",
        "version": "5.4.0"
      },
      "target": {
        "property": "target",
        "description": "相当于 a 链接的 target 属性，href 存在时生效",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "设置按钮类型",
        "type": "`primary` \\| `ghost` \\| `dashed` \\| `link` \\| `text` \\| `default`",
        "default": "`default`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击按钮时的回调",
        "type": "(event: MouseEvent) => void",
        "default": "-",
        "version": ""
      }
    },
    "Card": {
      "actions": {
        "property": "actions",
        "description": "卡片操作组，位置在卡片底部",
        "type": "Array&lt;ReactNode>",
        "default": "-",
        "version": ""
      },
      "activeTabKey": {
        "property": "activeTabKey",
        "description": "当前激活页签的 key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "内容区域自定义样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "cover": {
        "property": "cover",
        "description": "卡片封面",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "defaultActiveTabKey": {
        "property": "defaultActiveTabKey",
        "description": "初始化选中页签的 key，如果没有设置 activeTabKey",
        "type": "string",
        "default": "`第一个页签`",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "卡片右上角的操作区域",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "headStyle": {
        "property": "headStyle",
        "description": "自定义标题区域样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "hoverable": {
        "property": "hoverable",
        "description": "鼠标移过时可浮起",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "当卡片内容还在加载中时，可以用 loading 展示一个占位",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "card 的尺寸",
        "type": "`default` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "tabBarExtraContent": {
        "property": "tabBarExtraContent",
        "description": "tab bar 上额外的元素",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "tabList": {
        "property": "tabList",
        "description": "页签标题列表",
        "type": "[TabItemType](/components/tabs#tabitemtype)\\[]",
        "default": "-",
        "version": ""
      },
      "tabProps": {
        "property": "tabProps",
        "description": "[Tabs](/components/tabs-cn#tabs)",
        "type": "-",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "卡片标题",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "卡片类型，可设置为 `inner` 或 不设置",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onTabChange": {
        "property": "onTabChange",
        "description": "页签切换的回调",
        "type": "(key) => void",
        "default": "-",
        "version": ""
      }
    },
    "Card.Grid": {
      "className": {
        "property": "className",
        "description": "网格容器类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hoverable": {
        "property": "hoverable",
        "description": "鼠标移过时可浮起",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "定义网格容器类名的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Carousel": {
      "autoplay": {
        "property": "autoplay",
        "description": "是否自动切换",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dotPosition": {
        "property": "dotPosition",
        "description": "面板指示点位置，可选 `top` `bottom` `left` `right`",
        "type": "string",
        "default": "`bottom`",
        "version": ""
      },
      "dots": {
        "property": "dots",
        "description": "是否显示面板指示点，如果为 `object` 则同时可以指定 `dotsClass` 或者",
        "type": "boolean \\| { className?: string }",
        "default": "true",
        "version": ""
      },
      "waitForAnimate": {
        "property": "waitForAnimate",
        "description": "是否等待切换动画",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "easing": {
        "property": "easing",
        "description": "动画效果",
        "type": "string",
        "default": "`linear`",
        "version": ""
      },
      "effect": {
        "property": "effect",
        "description": "动画效果函数",
        "type": "`scrollx` \\| `fade`",
        "default": "`scrollx`",
        "version": ""
      },
      "afterChange": {
        "property": "afterChange",
        "description": "切换面板的回调",
        "type": "(current: number) => void",
        "default": "-",
        "version": ""
      },
      "beforeChange": {
        "property": "beforeChange",
        "description": "切换面板的回调",
        "type": "(current: number, next: number) => void",
        "default": "-",
        "version": ""
      }
    },
    "Calendar": {
      "dateCellRender": {
        "property": "dateCellRender",
        "description": "自定义渲染日期单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender`",
        "type": "function(date: Dayjs): ReactNode",
        "default": "-",
        "version": "&lt; 5.4.0"
      },
      "cellRender": {
        "property": "cellRender",
        "description": "自定义单元格的内容",
        "type": "function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode",
        "default": "-",
        "version": "5.4.0"
      },
      "dateFullCellRender": {
        "property": "dateFullCellRender",
        "description": "自定义渲染日期单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender`",
        "type": "function(date: Dayjs): ReactNode",
        "default": "-",
        "version": "&lt; 5.4.0"
      },
      "fullCellRender": {
        "property": "fullCellRender",
        "description": "自定义单元格的内容",
        "type": "function(current: dayjs, today: dayjs, info: { originNode: React.ReactElement,today: DateType, range?: 'start' \\| 'end', type: PanelMode, locale?: Locale, subType?: 'hour' \\| 'minute' \\| 'second' \\| 'meridiem' }) => React.ReactNode",
        "default": "-",
        "version": "5.4.0"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认展示的日期",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "disabledDate": {
        "property": "disabledDate",
        "description": "不可选择的日期，参数为当前 `value`，注意使用时[不要直接修改](https://github.com/ant-design/ant-design/issues/30987)",
        "type": "(currentDate: Dayjs) => boolean",
        "default": "-",
        "version": ""
      },
      "fullscreen": {
        "property": "fullscreen",
        "description": "是否全屏显示",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "headerRender": {
        "property": "headerRender",
        "description": "自定义头部内容",
        "type": "function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()})",
        "default": "-",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "国际化配置",
        "type": "object",
        "default": "[(默认配置)](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "初始模式",
        "type": "`month` \\| `year`",
        "default": "`month`",
        "version": ""
      },
      "monthCellRender": {
        "property": "monthCellRender",
        "description": "自定义渲染月单元格，返回内容会被追加到单元格，>= 5.4.0 请用 `cellRender`",
        "type": "function(date: Dayjs): ReactNode",
        "default": "-",
        "version": "&lt; 5.4.0"
      },
      "monthFullCellRender": {
        "property": "monthFullCellRender",
        "description": "自定义渲染月单元格，返回内容覆盖单元格，>= 5.4.0 请用 `fullCellRender`",
        "type": "function(date: Dayjs): ReactNode",
        "default": "-",
        "version": "&lt; 5.4.0"
      },
      "validRange": {
        "property": "validRange",
        "description": "设置可以显示的日期",
        "type": "\\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)]",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "展示日期",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "日期变化回调",
        "type": "function(date: Dayjs)",
        "default": "-",
        "version": ""
      },
      "onPanelChange": {
        "property": "onPanelChange",
        "description": "日期面板变化回调",
        "type": "function(date: Dayjs, mode: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "选择日期回调，包含来源信息",
        "type": "function(date: Dayjs, info: { source: 'year' \\| 'month' \\| 'date' \\| 'customize' })",
        "default": "-",
        "version": "`info`: 5.6.0"
      }
    },
    "Cascader": {
      "allowClear": {
        "property": "allowClear",
        "description": "是否支持清除",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "自定义的选择框清空图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "changeOnSelect": {
        "property": "changeOnSelect",
        "description": "（单选时生效）当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "自定义类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认的选中项",
        "type": "string\\[] \\| number\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "displayRender": {
        "property": "displayRender",
        "description": "选择后展示的渲染函数",
        "type": "(label, selectedOptions) => ReactNode",
        "default": "label => label.join(`/`)",
        "version": "`multiple`: 4.18.0"
      },
      "tagRender": {
        "property": "tagRender",
        "description": "自定义 tag 内容 render，仅在多选时生效",
        "type": "({ label: string, onClose: function, value: string }) => ReactNode",
        "default": "-",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "自定义浮层类名",
        "type": "string",
        "default": "-",
        "version": "4.23.0"
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "自定义下拉框内容",
        "type": "(menus: ReactNode) => ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "自定义次级菜单展开图标",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      "expandTrigger": {
        "property": "expandTrigger",
        "description": "次级菜单的展开方式，可选 'click' 和 'hover'",
        "type": "string",
        "default": "`click`",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "自定义 options 中 label value children 的字段",
        "type": "object",
        "default": "{ label: `label`, value: `value`, children: `children` }",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "用于动态加载选项，无法与 `showSearch` 一起使用",
        "type": "(selectedOptions) => void",
        "default": "-",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "最多显示多少个 tag，响应式模式会对性能产生损耗",
        "type": "number \\| `responsive`",
        "default": "-",
        "version": "4.17.0"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "隐藏 tag 时显示的内容",
        "type": "ReactNode \\| function(omittedValues)",
        "default": "-",
        "version": "4.17.0"
      },
      "maxTagTextLength": {
        "property": "maxTagTextLength",
        "description": "最大显示的 tag 文本长度",
        "type": "number",
        "default": "-",
        "version": "4.17.0"
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "当下拉列表为空时显示的内容",
        "type": "string",
        "default": "`Not Found`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "控制浮层显隐",
        "type": "boolean",
        "default": "-",
        "version": "4.17.0"
      },
      "options": {
        "property": "options",
        "description": "可选项数据源",
        "type": "[Option](#option)\\[]",
        "default": "-",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "输入框占位文本",
        "type": "string",
        "default": "`请选择`",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "浮层预设位置",
        "type": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "default": "`bottomLeft`",
        "version": "4.17.0"
      },
      "showSearch": {
        "property": "showSearch",
        "description": "在选择框中显示搜索框",
        "type": "boolean \\| [Object](#showsearch)",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "输入框大小",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "style": {
        "property": "style",
        "description": "自定义样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "自定义的选择框后缀图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "指定选中项",
        "type": "string\\[] \\| number\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选择完成后的回调",
        "type": "(value, selectedOptions) => void",
        "default": "-",
        "version": ""
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "显示/隐藏浮层的回调",
        "type": "(value) => void",
        "default": "-",
        "version": "4.17.0"
      },
      "multiple": {
        "property": "multiple",
        "description": "支持多选节点",
        "type": "boolean",
        "default": "-",
        "version": "4.17.0"
      },
      "showCheckedStrategy": {
        "property": "showCheckedStrategy",
        "description": "定义选中项回填的方式。`Cascader.SHOW_CHILD`: 只显示选中的子节点。`Cascader.SHOW_PARENT`: 只显示父节点（当父节点下所有子节点都选中时）。",
        "type": "`Cascader.SHOW_PARENT` \\| `Cascader.SHOW_CHILD`",
        "default": "`Cascader.SHOW_PARENT`",
        "version": "4.20.0"
      },
      "removeIcon": {
        "property": "removeIcon",
        "description": "自定义的多选框清除图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "searchValue": {
        "property": "searchValue",
        "description": "设置搜索的值，需要与 `showSearch` 配合使用",
        "type": "string",
        "default": "-",
        "version": "4.17.0"
      },
      "onSearch": {
        "property": "onSearch",
        "description": "监听搜索，返回输入的值",
        "type": "(search: string) => void",
        "default": "-",
        "version": "4.17.0"
      },
      "dropdownMenuColumnStyle": {
        "property": "dropdownMenuColumnStyle",
        "description": "下拉菜单列的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Card.Meta": {
      "avatar": {
        "property": "avatar",
        "description": "头像/图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "容器类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "描述内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "定义容器类名的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "标题内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Checkbox": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "指定当前是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "初始是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "失效状态",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "indeterminate": {
        "property": "indeterminate",
        "description": "设置 indeterminate 状态，只负责样式控制",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "变化时的回调函数",
        "type": "(e: CheckboxChangeEvent) => void",
        "default": "-",
        "version": ""
      }
    },
    "Collapse": {
      "accordion": {
        "property": "accordion",
        "description": "手风琴模式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "activeKey": {
        "property": "activeKey",
        "description": "当前激活 tab 面板的 key",
        "type": "string\\[] \\| string <br/> number\\[] \\| number",
        "default": "默认无，accordion 模式下默认第一个元素",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "带边框风格的折叠面板",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "collapsible": {
        "property": "collapsible",
        "description": "所有子面板是否可折叠或指定可折叠触发区域",
        "type": "`header` \\| `icon` \\| `disabled`",
        "default": "-",
        "version": "4.9.0"
      },
      "defaultActiveKey": {
        "property": "defaultActiveKey",
        "description": "初始化选中面板的 key",
        "type": "string\\[] \\| string<br/> number\\[] \\| number",
        "default": "-",
        "version": ""
      },
      "destroyInactivePanel": {
        "property": "destroyInactivePanel",
        "description": "销毁折叠隐藏的面板",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "自定义切换图标",
        "type": "(panelProps) => ReactNode",
        "default": "-",
        "version": ""
      },
      "expandIconPosition": {
        "property": "expandIconPosition",
        "description": "设置图标位置",
        "type": "`start` \\| `end`",
        "default": "-",
        "version": "4.21.0"
      },
      "ghost": {
        "property": "ghost",
        "description": "使折叠面板透明且无边框",
        "type": "boolean",
        "default": "false",
        "version": "4.4.0"
      },
      "size": {
        "property": "size",
        "description": "设置折叠面板大小",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`middle`",
        "version": "5.2.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "切换面板的回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "折叠项目内容",
        "type": "[ItemType](https://github.com/react-component/collapse/blob/27250ca5415faab16db412b9bff2c131bb4f32fc/src/interface.ts#L6)",
        "default": "-",
        "version": "5.6.0"
      }
    },
    "Checkbox.Group": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认选中的选项",
        "type": "(string \\| number)\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "整组失效",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "CheckboxGroup 下所有 `input[type=\"checkbox\"]` 的 `name` 属性",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "指定可选项",
        "type": "string\\[] \\| number\\[] \\| Option\\[]",
        "default": "\\[]",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "指定选中的选项",
        "type": "(string \\| number \\| boolean)\\[]",
        "default": "\\[]",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "变化时的回调函数",
        "type": "(checkedValue: CheckboxValueType\\[]) => void",
        "default": "-",
        "version": ""
      }
    },
    "DatePicker": {
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "默认面板日期",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认日期，如果开始时间或结束时间为 `null` 或者 `undefined`，日期范围将是一个开区间",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "disabledTime": {
        "property": "disabledTime",
        "description": "不可选择的时间",
        "type": "function(date)",
        "default": "-",
        "version": ""
      },
      "format": {
        "property": "format",
        "description": "展示的日期格式，配置参考 [dayjs#format](https://day.js.org/docs/zh-CN/display/format#%E6%94%AF%E6%8C%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%88%97%E8%A1%A8)。",
        "type": "[formatType](#formattype)",
        "default": "`YYYY-MM-DD`",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "在面板中添加额外的页脚",
        "type": "(mode) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "showNow": {
        "property": "showNow",
        "description": "当设定了 `showTime` 的时候，面板是否显示“此刻”按钮",
        "type": "boolean",
        "default": "-",
        "version": "4.4.0"
      },
      "showTime": {
        "property": "showTime",
        "description": "增加时间选择功能",
        "type": "Object \\| boolean",
        "default": "[TimePicker Options](/components/time-picker-cn#api)",
        "version": ""
      },
      "showTime.defaultValue": {
        "property": "showTime.defaultValue",
        "description": "设置用户选择日期时默认的时分秒，[例子](#components-date-picker-demo-disabled-date)",
        "type": "[dayjs](https://day.js.org/)",
        "default": "dayjs()",
        "version": ""
      },
      "showToday": {
        "property": "showToday",
        "description": "是否展示“今天”按钮",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "日期",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "时间发生变化的回调",
        "type": "function(date: dayjs, dateString: string)",
        "default": "-",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "点击确定按钮的回调",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onPanelChange": {
        "property": "onPanelChange",
        "description": "日期面板变化时的回调",
        "type": "function(value, mode)",
        "default": "-",
        "version": ""
      }
    },
    "Descriptions": {
      "bordered": {
        "property": "bordered",
        "description": "是否展示边框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "colon": {
        "property": "colon",
        "description": "配置 `Descriptions.Item` 的 `colon` 的默认值",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "column": {
        "property": "column",
        "description": "一行的 `DescriptionItems` 数量，可以写成像素值或支持响应式的对象写法 `{ xs: 8, sm: 16, md: 24}`",
        "type": "number",
        "default": "3",
        "version": ""
      },
      "contentStyle": {
        "property": "contentStyle",
        "description": "自定义内容样式",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.10.0"
      },
      "extra": {
        "property": "extra",
        "description": "描述列表的操作区域，显示在右上方",
        "type": "ReactNode",
        "default": "-",
        "version": "4.5.0"
      },
      "labelStyle": {
        "property": "labelStyle",
        "description": "自定义标签样式",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.10.0"
      },
      "layout": {
        "property": "layout",
        "description": "描述布局",
        "type": "`horizontal` \\| `vertical`",
        "default": "`horizontal`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "设置列表的大小。可以设置为 `middle` 、`small`, 或不填（只有设置 `bordered={true}` 生效）",
        "type": "`default` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "描述列表的标题，显示在最顶部",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Collapse.Panel": {
      "collapsible": {
        "property": "collapsible",
        "description": "是否可折叠或指定可折叠触发区域",
        "type": "`header` \\| `icon` \\| `disabled`",
        "default": "-",
        "version": "4.9.0 (icon: 4.24.0)"
      },
      "extra": {
        "property": "extra",
        "description": "自定义渲染每个面板右上角的内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "被隐藏时是否渲染 DOM 结构",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "header": {
        "property": "header",
        "description": "面板头内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "对应 activeKey",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "是否展示当前面板上的箭头（为 false 时，collapsible 不能置为 icon）",
        "type": "boolean",
        "default": "true",
        "version": ""
      }
    },
    "Drawer": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "抽屉展开后是否将焦点切换至其 Dom 节点",
        "type": "boolean",
        "default": "true",
        "version": "4.17.0"
      },
      "afterOpenChange": {
        "property": "afterOpenChange",
        "description": "切换抽屉时动画结束后的回调",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "可用于设置 Drawer 内容部分的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "Drawer 容器外层 className 设置，如果需要设置最外层，请使用 rootClassName",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "是否显示左上角的关闭按钮",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "自定义关闭图标",
        "type": "ReactNode",
        "default": "&lt;CloseOutlined />",
        "version": ""
      },
      "contentWrapperStyle": {
        "property": "contentWrapperStyle",
        "description": "可用于设置 Drawer 包裹内容部分的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "destroyOnClose": {
        "property": "destroyOnClose",
        "description": "关闭时销毁 Drawer 里的子元素",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "抽屉右上角的操作区域",
        "type": "ReactNode",
        "default": "-",
        "version": "4.17.0"
      },
      "footer": {
        "property": "footer",
        "description": "抽屉的页脚",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "footerStyle": {
        "property": "footerStyle",
        "description": "抽屉页脚部件的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "预渲染 Drawer 内元素",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getContainer": {
        "property": "getContainer",
        "description": "指定 Drawer 挂载的节点，**并在容器内展现**，`false` 为挂载在当前位置",
        "type": "HTMLElement \\| () => HTMLElement \\| Selectors \\| false",
        "default": "body",
        "version": ""
      },
      "headerStyle": {
        "property": "headerStyle",
        "description": "用于设置 Drawer 头部的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "height": {
        "property": "height",
        "description": "高度, 在 `placement` 为 `top` 或 `bottom` 时使用",
        "type": "string \\| number",
        "default": "378",
        "version": ""
      },
      "keyboard": {
        "property": "keyboard",
        "description": "是否支持键盘 esc 关闭",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "mask": {
        "property": "mask",
        "description": "是否展示遮罩",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskClosable": {
        "property": "maskClosable",
        "description": "点击蒙层是否允许关闭",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskStyle": {
        "property": "maskStyle",
        "description": "遮罩样式",
        "type": "CSSProperties",
        "default": "{}",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "抽屉的方向",
        "type": "`top` \\| `right` \\| `bottom` \\| `left`",
        "default": "`right`",
        "version": ""
      },
      "push": {
        "property": "push",
        "description": "用于设置多层 Drawer 的推动行为",
        "type": "boolean \\| { distance: string \\| number }",
        "default": "{ distance: 180 }",
        "version": "4.5.0+"
      },
      "rootClassName": {
        "property": "rootClassName",
        "description": "对话框外层容器的类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "rootStyle": {
        "property": "rootStyle",
        "description": "可用于设置 Drawer 最外层容器的样式，和 `style` 的区别是作用节点包括 `mask`",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "预设抽屉宽度（或高度），default `378px` 和 large `736px`",
        "type": "'default' \\| 'large'",
        "default": "'default'",
        "version": "4.17.0"
      },
      "style": {
        "property": "style",
        "description": "设计 Drawer 容器样式，如果你只需要设置内容部分请使用 `bodyStyle`",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "标题",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Drawer 是否可见",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "宽度",
        "type": "string \\| number",
        "default": "378",
        "version": ""
      },
      "zIndex": {
        "property": "zIndex",
        "description": "设置 Drawer 的 `z-index`",
        "type": "number",
        "default": "1000",
        "version": ""
      },
      "onClose": {
        "property": "onClose",
        "description": "点击遮罩层或左上角叉或取消按钮的回调",
        "type": "function(e)",
        "default": "-",
        "version": ""
      }
    },
    "Descriptions.Item": {
      "contentStyle": {
        "property": "contentStyle",
        "description": "自定义内容样式",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.9.0"
      },
      "label": {
        "property": "label",
        "description": "内容的描述",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "labelStyle": {
        "property": "labelStyle",
        "description": "自定义标签样式",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.9.0"
      },
      "span": {
        "property": "span",
        "description": "包含列的数量",
        "type": "number",
        "default": "1",
        "version": ""
      }
    },
    "Dropdown.Button": {
      "buttonsRender": {
        "property": "buttonsRender",
        "description": "自定义左右两个按钮",
        "type": "(buttons: ReactNode\\[]) => ReactNode\\[]",
        "default": "-",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "设置按钮载入状态",
        "type": "boolean \\| { delay: number }",
        "default": "false",
        "version": ""
      },
      "danger": {
        "property": "danger",
        "description": "设置危险按钮",
        "type": "boolean",
        "default": "-",
        "version": "4.23.0"
      },
      "icon": {
        "property": "icon",
        "description": "右侧的 icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "按钮大小，和 [Button](/components/button-cn#api) 一致",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "按钮类型，和 [Button](/components/button-cn#api) 一致",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击左侧按钮的回调，和 [Button](/components/button-cn#api) 一致",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      }
    },
    "Divider": {
      "children": {
        "property": "children",
        "description": "嵌套的标题",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "分割线样式类",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "dashed": {
        "property": "dashed",
        "description": "是否虚线",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "orientation": {
        "property": "orientation",
        "description": "分割线标题的位置",
        "type": "`left` \\| `right` \\| `center`",
        "default": "`center`",
        "version": ""
      },
      "orientationMargin": {
        "property": "orientationMargin",
        "description": "标题和最近 left/right 边框之间的距离，去除了分割线，同时 `orientation` 必须为 `left` 或 `right`。如果传入 `string` 类型的数字且不带单位，默认单位是 px",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "plain": {
        "property": "plain",
        "description": "文字是否显示为普通正文样式",
        "type": "boolean",
        "default": "false",
        "version": "4.2.0"
      },
      "style": {
        "property": "style",
        "description": "分割线样式对象",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "水平还是垂直类型",
        "type": "`horizontal` \\| `vertical`",
        "default": "`horizontal`",
        "version": ""
      }
    },
    "Dropdown": {
      "arrow": {
        "property": "arrow",
        "description": "下拉框箭头是否显示",
        "type": "boolean \\| { pointAtCenter: boolean }",
        "default": "false",
        "version": ""
      },
      "autoAdjustOverflow": {
        "property": "autoAdjustOverflow",
        "description": "下拉框被遮挡时自动调整位置",
        "type": "boolean",
        "default": "true",
        "version": "5.2.0"
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "打开后自动聚焦下拉框",
        "type": "boolean",
        "default": "false",
        "version": "4.21.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "菜单是否禁用",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "destroyPopupOnHide": {
        "property": "destroyPopupOnHide",
        "description": "关闭后是否销毁 Dropdown",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "自定义下拉框内容",
        "type": "(menus: ReactNode) => ReactNode",
        "default": "-",
        "version": "4.24.0"
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "(triggerNode: HTMLElement) => HTMLElement",
        "default": "() => document.body",
        "version": ""
      },
      "menu": {
        "property": "menu",
        "description": "菜单配置项",
        "type": "[MenuProps](/components/menu-cn#api)",
        "default": "-",
        "version": "4.24.0"
      },
      "overlayClassName": {
        "property": "overlayClassName",
        "description": "下拉根元素的类名称",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "overlayStyle": {
        "property": "overlayStyle",
        "description": "下拉根元素的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "菜单弹出位置：`bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight`",
        "type": "string",
        "default": "`bottomLeft`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "触发下拉的行为, 移动端不支持 hover",
        "type": "Array&lt;`click`\\|`hover`\\|`contextMenu`>",
        "default": "\\[`hover`]",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "菜单是否显示，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）",
        "type": "boolean",
        "default": "-",
        "version": "4.23.0"
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "菜单显示状态改变时调用，点击菜单按钮导致的消失不会触发。小于 4.23.0 使用 `onVisibleChange`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": "4.23.0"
      }
    },
    "Empty": {
      "description": {
        "property": "description",
        "description": "自定义描述内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "image": {
        "property": "image",
        "description": "设置显示图片，为 string 时表示自定义图片地址。",
        "type": "ReactNode",
        "default": "`Empty.PRESENTED_IMAGE_DEFAULT`",
        "version": ""
      },
      "imageStyle": {
        "property": "imageStyle",
        "description": "图片样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Form": {
      "colon": {
        "property": "colon",
        "description": "配置 Form.Item 的 `colon` 的默认值。表示是否显示 label 后面的冒号 (只有在属性 layout 为 horizontal 时有效)",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "设置表单组件禁用，仅对 antd 组件有效",
        "type": "boolean",
        "default": "false",
        "version": "4.21.0"
      },
      "component": {
        "property": "component",
        "description": "设置 Form 渲染元素，为 `false` 则不创建 DOM 节点",
        "type": "ComponentType \\| false",
        "default": "form",
        "version": ""
      },
      "fields": {
        "property": "fields",
        "description": "通过状态管理（如 redux）控制表单字段，如非强需求不推荐使用。查看[示例](#components-form-demo-global-state)",
        "type": "[FieldData](#fielddata)\\[]",
        "default": "-",
        "version": ""
      },
      "form": {
        "property": "form",
        "description": "经 `Form.useForm()` 创建的 form 控制实例，不提供时会自动创建",
        "type": "[FormInstance](#forminstance)",
        "default": "-",
        "version": ""
      },
      "initialValues": {
        "property": "initialValues",
        "description": "表单默认值，只有初始化以及重置时生效",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "labelAlign": {
        "property": "labelAlign",
        "description": "label 标签的文本对齐方式",
        "type": "`left` \\| `right`",
        "default": "`right`",
        "version": ""
      },
      "labelWrap": {
        "property": "labelWrap",
        "description": "label 标签的文本换行方式",
        "type": "boolean",
        "default": "false",
        "version": "4.18.0"
      },
      "labelCol": {
        "property": "labelCol",
        "description": "label 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`",
        "type": "[object](/components/grid-cn#col)",
        "default": "-",
        "version": ""
      },
      "layout": {
        "property": "layout",
        "description": "表单布局",
        "type": "`horizontal` \\| `vertical` \\| `inline`",
        "default": "`horizontal`",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "表单名称，会作为表单字段 `id` 前缀使用",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "preserve": {
        "property": "preserve",
        "description": "当字段被删除时保留字段值",
        "type": "boolean",
        "default": "true",
        "version": "4.4.0"
      },
      "requiredMark": {
        "property": "requiredMark",
        "description": "必选样式，可以切换为必选或者可选展示样式。此为 Form 配置，Form.Item 无法单独配置",
        "type": "boolean \\| `optional`",
        "default": "true",
        "version": "4.6.0"
      },
      "scrollToFirstError": {
        "property": "scrollToFirstError",
        "description": "提交失败自动滚动到第一个错误字段",
        "type": "boolean \\| [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "设置字段组件的尺寸（仅限 antd 组件）",
        "type": "`small` \\| `middle` \\| `large`",
        "default": "-",
        "version": ""
      },
      "validateMessages": {
        "property": "validateMessages",
        "description": "验证提示模板，说明[见下](#validatemessages)",
        "type": "[ValidateMessages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134)",
        "default": "-",
        "version": ""
      },
      "validateTrigger": {
        "property": "validateTrigger",
        "description": "统一设置字段触发验证的时机",
        "type": "string \\| string\\[]",
        "default": "`onChange`",
        "version": "4.3.0"
      },
      "wrapperCol": {
        "property": "wrapperCol",
        "description": "需要为输入控件设置布局样式时，使用该属性，用法同 labelCol",
        "type": "[object](/components/grid-cn#col)",
        "default": "-",
        "version": ""
      },
      "onFieldsChange": {
        "property": "onFieldsChange",
        "description": "字段更新时触发回调事件",
        "type": "function(changedFields, allFields)",
        "default": "-",
        "version": ""
      },
      "onFinish": {
        "property": "onFinish",
        "description": "提交表单且数据验证成功后回调事件",
        "type": "function(values)",
        "default": "-",
        "version": ""
      },
      "onFinishFailed": {
        "property": "onFinishFailed",
        "description": "提交表单且数据验证失败后回调事件",
        "type": "function({ values, errorFields, outOfDate })",
        "default": "-",
        "version": ""
      },
      "onValuesChange": {
        "property": "onValuesChange",
        "description": "字段值更新时触发回调事件",
        "type": "function(changedValues, allValues)",
        "default": "-",
        "version": ""
      }
    },
    "Form.List": {
      "children": {
        "property": "children",
        "description": "渲染函数",
        "type": "(fields: Field\\[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "initialValue": {
        "property": "initialValue",
        "description": "设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准",
        "type": "any\\[]",
        "default": "-",
        "version": "4.9.0"
      },
      "name": {
        "property": "name",
        "description": "字段名，支持数组",
        "type": "[NamePath](#namepath)",
        "default": "-",
        "version": ""
      },
      "rules": {
        "property": "rules",
        "description": "校验规则，仅支持自定义规则。需要配合 [ErrorList](#formerrorlist) 一同使用。",
        "type": "{ validator, message }\\[]",
        "default": "-",
        "version": "4.7.0"
      }
    },
    "Row": {
      "align": {
        "property": "align",
        "description": "垂直对齐方式",
        "type": "`top` \\| `middle` \\| `bottom` \\| `stretch` \\| `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'top' \\| 'middle' \\| 'bottom' \\| 'stretch'}`",
        "default": "`top`",
        "version": "object: 4.24.0"
      },
      "gutter": {
        "property": "gutter",
        "description": "栅格间隔，可以写成像素值或支持响应式的对象写法来设置水平间隔 { xs: 8, sm: 16, md: 24}。或者使用数组形式同时设置 `[水平间距, 垂直间距]`",
        "type": "number \\| object \\| array",
        "default": "0",
        "version": ""
      },
      "justify": {
        "property": "justify",
        "description": "水平排列方式",
        "type": "`start` \\| `end` \\| `center` \\| `space-around` \\| `space-between` \\| `space-evenly` \\| `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'start' \\| 'end' \\| 'center' \\| 'space-around' \\| 'space-between' \\| 'space-evenly'}`",
        "default": "`start`",
        "version": "object: 4.24.0"
      },
      "wrap": {
        "property": "wrap",
        "description": "是否自动换行",
        "type": "boolean",
        "default": "true",
        "version": "4.8.0"
      }
    },
    "Form.Item": {
      "colon": {
        "property": "colon",
        "description": "配合 `label` 属性使用，表示是否显示 `label` 后面的冒号",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "dependencies": {
        "property": "dependencies",
        "description": "设置依赖字段，说明[见下](#dependencies)",
        "type": "[NamePath](#namepath)\\[]",
        "default": "-",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "额外的提示信息，和 `help` 类似，当需要错误信息和提示文案同时出现时，可以使用这个。",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "getValueFromEvent": {
        "property": "getValueFromEvent",
        "description": "设置如何将 event 的值转换成字段值",
        "type": "(..args: any\\[]) => any",
        "default": "-",
        "version": ""
      },
      "getValueProps": {
        "property": "getValueProps",
        "description": "为子元素添加额外的属性",
        "type": "(value: any) => any",
        "default": "-",
        "version": "4.2.0"
      },
      "hasFeedback": {
        "property": "hasFeedback",
        "description": "配合 `validateStatus` 属性使用，展示校验状态图标，建议只配合 Input 组件使用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "help": {
        "property": "help",
        "description": "提示信息，如不设置，则会根据校验规则自动生成",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "hidden": {
        "property": "hidden",
        "description": "是否隐藏字段（依然会收集和校验字段）",
        "type": "boolean",
        "default": "false",
        "version": "4.4.0"
      },
      "htmlFor": {
        "property": "htmlFor",
        "description": "设置子元素 label `htmlFor` 属性",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "initialValue": {
        "property": "initialValue",
        "description": "设置子元素默认值，如果与 Form 的 `initialValues` 冲突则以 Form 为准",
        "type": "string",
        "default": "-",
        "version": "4.2.0"
      },
      "label": {
        "property": "label",
        "description": "`label` 标签的文本",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "labelAlign": {
        "property": "labelAlign",
        "description": "标签文本对齐方式",
        "type": "`left` \\| `right`",
        "default": "`right`",
        "version": ""
      },
      "labelCol": {
        "property": "labelCol",
        "description": "`label` 标签布局，同 `<Col>` 组件，设置 `span` `offset` 值，如 `{span: 3, offset: 12}` 或 `sm: {span: 3, offset: 12}`。你可以通过 Form 的 `labelCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准",
        "type": "[object](/components/grid-cn#col)",
        "default": "-",
        "version": ""
      },
      "messageVariables": {
        "property": "messageVariables",
        "description": "默认验证字段的信息",
        "type": "Record&lt;string, string>",
        "default": "-",
        "version": "4.7.0"
      },
      "name": {
        "property": "name",
        "description": "字段名，支持数组",
        "type": "[NamePath](#namepath)",
        "default": "-",
        "version": ""
      },
      "normalize": {
        "property": "normalize",
        "description": "组件获取值后进行转换，再放入 Form 中。不支持异步",
        "type": "(value, prevValue, prevValues) => any",
        "default": "-",
        "version": ""
      },
      "noStyle": {
        "property": "noStyle",
        "description": "为 `true` 时不带样式，作为纯字段控件使用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "preserve": {
        "property": "preserve",
        "description": "当字段被删除时保留字段值",
        "type": "boolean",
        "default": "true",
        "version": "4.4.0"
      },
      "required": {
        "property": "required",
        "description": "必填样式设置。如不设置，则会根据校验规则自动生成",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "rules": {
        "property": "rules",
        "description": "校验规则，设置字段的校验逻辑。点击[此处](#components-form-demo-basic)查看示例",
        "type": "[Rule](#rule)\\[]",
        "default": "-",
        "version": ""
      },
      "shouldUpdate": {
        "property": "shouldUpdate",
        "description": "自定义字段更新逻辑，说明[见下](#shouldupdate)",
        "type": "boolean \\| (prevValue, curValue) => boolean",
        "default": "false",
        "version": ""
      },
      "tooltip": {
        "property": "tooltip",
        "description": "配置提示信息",
        "type": "ReactNode \\| [TooltipProps & { icon: ReactNode }](/components/tooltip-cn#api)",
        "default": "-",
        "version": "4.7.0"
      },
      "trigger": {
        "property": "trigger",
        "description": "设置收集字段值变更的时机。点击[此处](#components-form-demo-customized-form-controls)查看示例",
        "type": "string",
        "default": "`onChange`",
        "version": ""
      },
      "validateFirst": {
        "property": "validateFirst",
        "description": "当某一规则校验不通过时，是否停止剩下的规则的校验。设置 `parallel` 时会并行校验",
        "type": "boolean \\| `parallel`",
        "default": "false",
        "version": "`parallel`: 4.5.0"
      },
      "validateStatus": {
        "property": "validateStatus",
        "description": "校验状态，如不设置，则会根据校验规则自动生成，可选：'success' 'warning' 'error' 'validating'",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "validateTrigger": {
        "property": "validateTrigger",
        "description": "设置字段校验的时机",
        "type": "string \\| string\\[]",
        "default": "`onChange`",
        "version": ""
      },
      "valuePropName": {
        "property": "valuePropName",
        "description": "子节点的值的属性，如 Switch 的是 'checked'。该属性为 `getValueProps` 的封装，自定义 `getValueProps` 后会失效",
        "type": "string",
        "default": "`value`",
        "version": ""
      },
      "wrapperCol": {
        "property": "wrapperCol",
        "description": "需要为输入控件设置布局样式时，使用该属性，用法同 `labelCol`。你可以通过 Form 的 `wrapperCol` 进行统一设置，不会作用于嵌套 Item。当和 Form 同时设置时，以 Item 为准",
        "type": "[object](/components/grid-cn#col)",
        "default": "-",
        "version": ""
      }
    },
    "Form.ErrorList": {
      "errors": {
        "property": "errors",
        "description": "错误列表",
        "type": "ReactNode\\[]",
        "default": "-",
        "version": ""
      }
    },
    "Form.Provider": {
      "onFormChange": {
        "property": "onFormChange",
        "description": "子表单字段更新时触发",
        "type": "function(formName: string, info: { changedFields, forms })",
        "default": "-",
        "version": ""
      },
      "onFormFinish": {
        "property": "onFormFinish",
        "description": "子表单提交时触发",
        "type": "function(formName: string, info: { values, forms })",
        "default": "-",
        "version": ""
      }
    },
    "Col": {
      "flex": {
        "property": "flex",
        "description": "flex 布局属性",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "offset": {
        "property": "offset",
        "description": "栅格左侧的间隔格数，间隔内不可以有栅格",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "order": {
        "property": "order",
        "description": "栅格顺序",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "pull": {
        "property": "pull",
        "description": "栅格向左移动格数",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "push": {
        "property": "push",
        "description": "栅格向右移动格数",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "span": {
        "property": "span",
        "description": "栅格占位格数，为 0 时相当于 `display: none`",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "xs": {
        "property": "xs",
        "description": "`屏幕 < 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "sm": {
        "property": "sm",
        "description": "`屏幕 ≥ 576px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "md": {
        "property": "md",
        "description": "`屏幕 ≥ 768px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "lg": {
        "property": "lg",
        "description": "`屏幕 ≥ 992px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "xl": {
        "property": "xl",
        "description": "`屏幕 ≥ 1200px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "xxl": {
        "property": "xxl",
        "description": "`屏幕 ≥ 1600px` 响应式栅格，可为栅格数或一个包含其他属性的对象",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      }
    },
    "Icon": {
      "className": {
        "property": "className",
        "description": "设置图标的样式名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "rotate": {
        "property": "rotate",
        "description": "图标旋转角度（IE9 无效）",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "spin": {
        "property": "spin",
        "description": "是否有旋转动画",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "设置图标的样式，例如 `fontSize` 和 `color`",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "twoToneColor": {
        "property": "twoToneColor",
        "description": "仅适用双色图标。设置双色图标的主要颜色",
        "type": "string (十六进制颜色)",
        "default": "-",
        "version": ""
      }
    },
    "Image": {
      "alt": {
        "property": "alt",
        "description": "图像描述",
        "type": "string",
        "default": "-",
        "version": "4.6.0"
      },
      "fallback": {
        "property": "fallback",
        "description": "加载失败容错地址",
        "type": "string",
        "default": "-",
        "version": "4.6.0"
      },
      "height": {
        "property": "height",
        "description": "图像高度",
        "type": "string \\| number",
        "default": "-",
        "version": "4.6.0"
      },
      "placeholder": {
        "property": "placeholder",
        "description": "加载占位, 为 `true` 时使用默认占位",
        "type": "ReactNode",
        "default": "-",
        "version": "4.6.0"
      },
      "preview": {
        "property": "preview",
        "description": "预览参数，为 `false` 时禁用",
        "type": "boolean \\| [previewType](#previewtype)",
        "default": "true",
        "version": "4.6.0 [previewType](#previewtype):4.7.0"
      },
      "src": {
        "property": "src",
        "description": "图片地址",
        "type": "string",
        "default": "-",
        "version": "4.6.0"
      },
      "width": {
        "property": "width",
        "description": "图像宽度",
        "type": "string \\| number",
        "default": "-",
        "version": "4.6.0"
      },
      "onError": {
        "property": "onError",
        "description": "加载错误回调",
        "type": "(event: Event) => void",
        "default": "-",
        "version": "4.12.0"
      },
      "rootClassName": {
        "property": "rootClassName",
        "description": "为展示图片根 DOM 和预览大图根 DOM 提供自定义 className",
        "type": "string",
        "default": "-",
        "version": "4.20.0"
      }
    },
    "Input": {
      "addonAfter": {
        "property": "addonAfter",
        "description": "带标签的 input，设置后置标签",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "addonBefore": {
        "property": "addonBefore",
        "description": "带标签的 input，设置前置标签",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "可以点击清除图标删除内容",
        "type": "boolean \\| { clearIcon: ReactNode }",
        "default": "-",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": "4.5.0"
      },
      "classNames": {
        "property": "classNames",
        "description": "语义化结构 class",
        "type": "Record&lt;[SemanticDOM](#input-1), string>",
        "default": "-",
        "version": "5.4.0"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "输入框默认内容",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用状态，默认为 false",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "id": {
        "property": "id",
        "description": "输入框的 id",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "maxLength": {
        "property": "maxLength",
        "description": "最大长度",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "showCount": {
        "property": "showCount",
        "description": "是否展示字数",
        "type": "boolean \\| { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode }",
        "default": "false",
        "version": "4.18.0 info.value: 4.23.0"
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "styles": {
        "property": "styles",
        "description": "语义化结构 style",
        "type": "Record&lt;[SemanticDOM](#input-1), CSSProperties>",
        "default": "-",
        "version": "5.4.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "带有前缀图标的 input",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "控件大小。注：标准表单内的输入框大小限制为 `middle`",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "suffix": {
        "property": "suffix",
        "description": "带有后缀图标的 input",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "声明 input 类型，同原生 input 标签的 type 属性，见：[MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#属性)(请直接使用 `Input.TextArea` 代替 `type=\"textarea\"`)",
        "type": "string",
        "default": "`text`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "输入框内容",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "输入框内容变化时的回调",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "按下回车的回调",
        "type": "function(e)",
        "default": "-",
        "version": ""
      }
    },
    "Input.TextArea": {
      "allowClear": {
        "property": "allowClear",
        "description": "可以点击清除图标删除内容",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoSize": {
        "property": "autoSize",
        "description": "自适应内容高度，可设置为 true \\| false 或对象：{ minRows: 2, maxRows: 6 }",
        "type": "boolean \\| object",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": "4.5.0"
      },
      "classNames": {
        "property": "classNames",
        "description": "语义化结构 class",
        "type": "Record&lt;[SemanticDOM](#inputtextarea-1), string>",
        "default": "-",
        "version": "5.4.0"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "输入框默认内容",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "maxLength": {
        "property": "maxLength",
        "description": "内容最大长度",
        "type": "number",
        "default": "-",
        "version": "4.7.0"
      },
      "showCount": {
        "property": "showCount",
        "description": "是否展示字数",
        "type": "boolean \\| { formatter: (info: { value: string, count: number, maxLength?: number }) => string }",
        "default": "false",
        "version": "4.7.0 formatter: 4.10.0 info.value: 4.23.0"
      },
      "styles": {
        "property": "styles",
        "description": "语义化结构 style",
        "type": "Record&lt;[SemanticDOM](#inputtextarea-1), CSSProperties>",
        "default": "-",
        "version": "5.4.0"
      },
      "value": {
        "property": "value",
        "description": "输入框内容",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "按下回车的回调",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onResize": {
        "property": "onResize",
        "description": "resize 回调",
        "type": "function({ width, height })",
        "default": "-",
        "version": ""
      }
    },
    "InputNumber": {
      "addonAfter": {
        "property": "addonAfter",
        "description": "带标签的 input，设置后置标签",
        "type": "ReactNode",
        "default": "-",
        "version": "4.17.0"
      },
      "addonBefore": {
        "property": "addonBefore",
        "description": "带标签的 input，设置前置标签",
        "type": "ReactNode",
        "default": "-",
        "version": "4.17.0"
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": "4.12.0"
      },
      "controls": {
        "property": "controls",
        "description": "是否显示增减按钮，也可设置自定义箭头图标",
        "type": "boolean \\| { upIcon?: React.ReactNode; downIcon?: React.ReactNode; }",
        "default": "-",
        "version": "4.19.0"
      },
      "decimalSeparator": {
        "property": "decimalSeparator",
        "description": "小数点",
        "type": "string",
        "default": "-",
        "version": "-"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "初始值",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      "formatter": {
        "property": "formatter",
        "description": "指定输入框展示值的格式",
        "type": "function(value: number \\| string, info: { userTyping: boolean, input: string }): string",
        "default": "-",
        "version": "info: 4.17.0"
      },
      "keyboard": {
        "property": "keyboard",
        "description": "是否启用键盘快捷行为",
        "type": "boolean",
        "default": "true",
        "version": "4.12.0"
      },
      "max": {
        "property": "max",
        "description": "最大值",
        "type": "number",
        "default": "[Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)",
        "version": "-"
      },
      "min": {
        "property": "min",
        "description": "最小值",
        "type": "number",
        "default": "[Number.MIN_SAFE_INTEGER](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER)",
        "version": "-"
      },
      "parser": {
        "property": "parser",
        "description": "指定从 `formatter` 里转换回数字的方式，和 `formatter` 搭配使用",
        "type": "function(string): number",
        "default": "-",
        "version": "-"
      },
      "precision": {
        "property": "precision",
        "description": "数值精度，配置 `formatter` 时会以 `formatter` 为准",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      "readOnly": {
        "property": "readOnly",
        "description": "只读",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "带有前缀图标的 input",
        "type": "ReactNode",
        "default": "-",
        "version": "4.17.0"
      },
      "size": {
        "property": "size",
        "description": "输入框大小",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": "-"
      },
      "step": {
        "property": "step",
        "description": "每次改变步数，可以为小数",
        "type": "number \\| string",
        "default": "1",
        "version": "-"
      },
      "stringMode": {
        "property": "stringMode",
        "description": "字符值模式，开启后支持高精度小数。同时 `onChange` 将返回 string 类型",
        "type": "boolean",
        "default": "false",
        "version": "4.13.0"
      },
      "value": {
        "property": "value",
        "description": "当前值",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      "onChange": {
        "property": "onChange",
        "description": "变化回调",
        "type": "function(value: number \\| string \\| null)",
        "default": "-",
        "version": "-"
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "按下回车的回调",
        "type": "function(e)",
        "default": "-",
        "version": "-"
      },
      "onStep": {
        "property": "onStep",
        "description": "点击上下箭头的回调",
        "type": "(value: number, info: { offset: number, type: 'up' \\| 'down' }) => void",
        "default": "-",
        "version": "4.7.0"
      }
    },
    "Input.Search": {
      "enterButton": {
        "property": "enterButton",
        "description": "是否有确认按钮，可设为按钮文字。该属性会与 `addonAfter` 冲突。",
        "type": "boolean \\| ReactNode",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "搜索 loading",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "点击搜索图标、清除图标，或按下回车键时的回调",
        "type": "function(value, event)",
        "default": "-",
        "version": ""
      }
    },
    "Layout": {
      "className": {
        "property": "className",
        "description": "容器 className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hasSider": {
        "property": "hasSider",
        "description": "表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "指定样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Input.Password": {
      "iconRender": {
        "property": "iconRender",
        "description": "自定义切换按钮",
        "type": "(visible) => ReactNode",
        "default": "(visible) => (visible ? &lt;EyeOutlined /> : &lt;EyeInvisibleOutlined />)",
        "version": "4.3.0"
      },
      "visibilityToggle": {
        "property": "visibilityToggle",
        "description": "是否显示切换按钮或者控制密码显隐",
        "type": "boolean \\| [VisibilityToggle](#visibilitytoggle)",
        "default": "true",
        "version": ""
      }
    },
    "Layout.Sider": {
      "breakpoint": {
        "property": "breakpoint",
        "description": "触发响应式布局的[断点](/components/grid-cn#col)",
        "type": "`xs` \\| `sm` \\| `md` \\| `lg` \\| `xl` \\| `xxl`",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "容器 className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "collapsed": {
        "property": "collapsed",
        "description": "当前收起状态",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "collapsedWidth": {
        "property": "collapsedWidth",
        "description": "收缩宽度，设置为 0 会出现特殊 trigger",
        "type": "number",
        "default": "80",
        "version": ""
      },
      "collapsible": {
        "property": "collapsible",
        "description": "是否可收起",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultCollapsed": {
        "property": "defaultCollapsed",
        "description": "是否默认收起",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "reverseArrow": {
        "property": "reverseArrow",
        "description": "翻转折叠提示箭头的方向，当 Sider 在右边时可以使用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "指定样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "主题颜色",
        "type": "`light` \\| `dark`",
        "default": "`dark`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "自定义 trigger，设置为 null 时隐藏 trigger",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "宽度",
        "type": "number \\| string",
        "default": "200",
        "version": ""
      },
      "zeroWidthTriggerStyle": {
        "property": "zeroWidthTriggerStyle",
        "description": "指定当 `collapsedWidth` 为 0 时出现的特殊 trigger 的样式",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "onBreakpoint": {
        "property": "onBreakpoint",
        "description": "触发响应式布局[断点](/components/grid-cn#api)时的回调",
        "type": "(broken) => {}",
        "default": "-",
        "version": ""
      },
      "onCollapse": {
        "property": "onCollapse",
        "description": "展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发",
        "type": "(collapsed, type) => {}",
        "default": "-",
        "version": ""
      }
    },
    "Mentions": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获得焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoSize": {
        "property": "autoSize",
        "description": "自适应内容高度，可设置为 true \\| false 或对象：{ minRows: 2, maxRows: 6 }",
        "type": "boolean \\| object",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认值",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "自定义过滤逻辑",
        "type": "false \\| (input: string, option: OptionProps) => boolean",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "指定建议框挂载的 HTML 节点",
        "type": "() => HTMLElement",
        "default": "-",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "当下拉列表为空时显示的内容",
        "type": "ReactNode",
        "default": "`Not Found`",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "弹出层展示位置",
        "type": "`top` \\| `bottom`",
        "default": "`bottom`",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "设置触发关键字",
        "type": "string \\| string\\[]",
        "default": "`@`",
        "version": ""
      },
      "split": {
        "property": "split",
        "description": "设置选中项前后分隔符",
        "type": "string",
        "default": "` `",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "validateSearch": {
        "property": "validateSearch",
        "description": "自定义触发验证逻辑",
        "type": "(text: string, props: MentionsProps) => void",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "设置值",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时触发",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "值改变时触发",
        "type": "(text: string) => void",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获得焦点时触发",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "onResize": {
        "property": "onResize",
        "description": "resize 回调",
        "type": "function({ width, height })",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "搜索时触发",
        "type": "(text: string, prefix: string) => void",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "选择选项时触发",
        "type": "(option: OptionProps, prefix: string) => void",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "选项配置",
        "type": "[Options](#option)",
        "default": "\\[]",
        "version": "5.1.0"
      }
    },
    "List": {
      "bordered": {
        "property": "bordered",
        "description": "是否展示边框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "列表数据源",
        "type": "any\\[]",
        "default": "-",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "列表底部",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "grid": {
        "property": "grid",
        "description": "列表栅格配置",
        "type": "[object](#list-grid-props)",
        "default": "-",
        "version": ""
      },
      "header": {
        "property": "header",
        "description": "列表头部",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "itemLayout": {
        "property": "itemLayout",
        "description": "设置 `List.Item` 布局, 设置成 `vertical` 则竖直样式显示, 默认横排",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "当卡片内容还在加载中时，可以用 `loading` 展示一个占位",
        "type": "boolean \\| [object](/components/spin-cn#api) ([更多](https://github.com/ant-design/ant-design/issues/8659))",
        "default": "false",
        "version": ""
      },
      "loadMore": {
        "property": "loadMore",
        "description": "加载更多",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "默认文案设置，目前包括空数据文案",
        "type": "object",
        "default": "{emptyText: `暂无数据`}",
        "version": ""
      },
      "pagination": {
        "property": "pagination",
        "description": "对应的 `pagination` 配置, 设置 false 不显示",
        "type": "boolean \\| object",
        "default": "false",
        "version": ""
      },
      "renderItem": {
        "property": "renderItem",
        "description": "当使用 dataSource 时，可以用 `renderItem` 自定义渲染列表项",
        "type": "(item) => ReactNode",
        "default": "-",
        "version": ""
      },
      "rowKey": {
        "property": "rowKey",
        "description": "当 `renderItem` 自定义渲染列表项有效时，自定义每一行的 `key` 的获取方式",
        "type": "`keyof` T \\| (item: T) => `React.Key`",
        "default": "`\"key\"`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "list 的尺寸",
        "type": "`default` \\| `large` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "split": {
        "property": "split",
        "description": "是否展示分割线",
        "type": "boolean",
        "default": "true",
        "version": ""
      }
    },
    "Mentins.Option": {
      "value": {
        "property": "value",
        "description": "选择时填充的值",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "label": {
        "property": "label",
        "description": "选项的标题",
        "type": "React.ReactNode",
        "default": "-",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "选项的 key 值",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否可选",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "css 类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "选项样式",
        "type": "React.CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "List.Item.Meta": {
      "avatar": {
        "property": "avatar",
        "description": "列表元素的图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "列表元素的描述内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "列表元素的标题",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Menu": {
      "defaultOpenKeys": {
        "property": "defaultOpenKeys",
        "description": "初始展开的 SubMenu 菜单项 key 数组",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "defaultSelectedKeys": {
        "property": "defaultSelectedKeys",
        "description": "初始选中的菜单项 key 数组",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "自定义展开图标",
        "type": "ReactNode \\| `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode`",
        "default": "-",
        "version": "4.9.0"
      },
      "forceSubMenuRender": {
        "property": "forceSubMenuRender",
        "description": "在子菜单展示之前就渲染进 DOM",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "inlineCollapsed": {
        "property": "inlineCollapsed",
        "description": "inline 时菜单是否收起状态",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "inlineIndent": {
        "property": "inlineIndent",
        "description": "inline 模式的菜单缩进宽度",
        "type": "number",
        "default": "24",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "菜单内容",
        "type": "[ItemType\\[\\]](#itemtype)",
        "default": "-",
        "version": "4.20.0"
      },
      "mode": {
        "property": "mode",
        "description": "菜单类型，现在支持垂直、水平、和内嵌模式三种",
        "type": "`vertical` \\| `horizontal` \\| `inline`",
        "default": "`vertical`",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "是否允许多选",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "openKeys": {
        "property": "openKeys",
        "description": "当前展开的 SubMenu 菜单项 key 数组",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "overflowedIndicator": {
        "property": "overflowedIndicator",
        "description": "用于自定义 Menu 水平空间不足时的省略收缩的图标",
        "type": "ReactNode",
        "default": "`<EllipsisOutlined />`",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "是否允许选中",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "当前选中的菜单项 key 数组",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "根节点样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "subMenuCloseDelay": {
        "property": "subMenuCloseDelay",
        "description": "用户鼠标离开子菜单后关闭延时，单位：秒",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "subMenuOpenDelay": {
        "property": "subMenuOpenDelay",
        "description": "用户鼠标进入子菜单后开启延时，单位：秒",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "主题颜色",
        "type": "`light` \\| `dark`",
        "default": "`light`",
        "version": ""
      },
      "triggerSubMenuAction": {
        "property": "triggerSubMenuAction",
        "description": "SubMenu 展开/关闭的触发行为",
        "type": "`hover` \\| `click`",
        "default": "`hover`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击 MenuItem 调用此函数",
        "type": "function({ item, key, keyPath, domEvent })",
        "default": "-",
        "version": ""
      },
      "onDeselect": {
        "property": "onDeselect",
        "description": "取消选中时调用，仅在 multiple 生效",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "SubMenu 展开/关闭的回调",
        "type": "function(openKeys: string\\[])",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "被选中时调用",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default": "-  ",
        "version": ""
      }
    },
    "List.Item": {
      "actions": {
        "property": "actions",
        "description": "列表操作组，根据 `itemLayout` 的不同, 位置在卡片底部或者最右侧",
        "type": "Array&lt;ReactNode>",
        "default": "-",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "额外内容, 通常用在 `itemLayout` 为 `vertical` 的情况下, 展示右侧内容; `horizontal` 展示在列表元素最右侧",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Modal": {
      "afterClose": {
        "property": "afterClose",
        "description": "Modal 完全关闭后的回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "Modal body 样式",
        "type": "CSSProperties",
        "default": "",
        "version": ""
      },
      "cancelButtonProps": {
        "property": "cancelButtonProps",
        "description": "cancel 按钮 props",
        "type": "[ButtonProps](/components/button-cn#api)",
        "default": "-",
        "version": ""
      },
      "cancelText": {
        "property": "cancelText",
        "description": "取消按钮文字",
        "type": "ReactNode",
        "default": "`取消`",
        "version": ""
      },
      "centered": {
        "property": "centered",
        "description": "垂直居中展示 Modal",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "是否显示右上角的关闭按钮",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "自定义关闭图标",
        "type": "ReactNode",
        "default": "&lt;CloseOutlined />",
        "version": ""
      },
      "confirmLoading": {
        "property": "confirmLoading",
        "description": "确定按钮 loading",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "destroyOnClose": {
        "property": "destroyOnClose",
        "description": "关闭时销毁 Modal 里的子元素",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "focusTriggerAfterClose": {
        "property": "focusTriggerAfterClose",
        "description": "对话框关闭后是否需要聚焦触发元素",
        "type": "boolean",
        "default": "true",
        "version": "4.9.0"
      },
      "footer": {
        "property": "footer",
        "description": "底部内容，当不需要默认底部按钮时，可以设为 `footer={null}`",
        "type": "ReactNode",
        "default": "(确定取消按钮)",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "强制渲染 Modal",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getContainer": {
        "property": "getContainer",
        "description": "指定 Modal 挂载的节点，但依旧为全屏展示，`false` 为挂载在当前位置",
        "type": "HTMLElement \\| () => HTMLElement \\| Selectors \\| false",
        "default": "document.body",
        "version": ""
      },
      "keyboard": {
        "property": "keyboard",
        "description": "是否支持键盘 esc 关闭",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "mask": {
        "property": "mask",
        "description": "是否展示遮罩",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskClosable": {
        "property": "maskClosable",
        "description": "点击蒙层是否允许关闭",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskStyle": {
        "property": "maskStyle",
        "description": "遮罩样式",
        "type": "CSSProperties",
        "default": "",
        "version": ""
      },
      "modalRender": {
        "property": "modalRender",
        "description": "自定义渲染对话框",
        "type": "(node: ReactNode) => ReactNode",
        "default": "-",
        "version": "4.7.0"
      },
      "okButtonProps": {
        "property": "okButtonProps",
        "description": "ok 按钮 props",
        "type": "[ButtonProps](/components/button-cn#api)",
        "default": "-",
        "version": ""
      },
      "okText": {
        "property": "okText",
        "description": "确认按钮文字",
        "type": "ReactNode",
        "default": "`确定`",
        "version": ""
      },
      "okType": {
        "property": "okType",
        "description": "确认按钮类型",
        "type": "string",
        "default": "`primary`",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "可用于设置浮层的样式，调整浮层位置等",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "标题",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "对话框是否可见",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "宽度",
        "type": "string \\| number",
        "default": "520",
        "version": ""
      },
      "wrapClassName": {
        "property": "wrapClassName",
        "description": "对话框外层容器的类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "zIndex": {
        "property": "zIndex",
        "description": "设置 Modal 的 `z-index`",
        "type": "number",
        "default": "1000",
        "version": ""
      },
      "onCancel": {
        "property": "onCancel",
        "description": "点击遮罩层或右上角叉或取消按钮的回调",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "点击确定回调",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "afterOpenChange": {
        "property": "afterOpenChange",
        "description": "打开和关闭 Modal 时动画结束后的回调",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": "5.4.0"
      }
    },
    "Pagination": {
      "current": {
        "property": "current",
        "description": "当前页数",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "defaultCurrent": {
        "property": "defaultCurrent",
        "description": "默认的当前页数",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "defaultPageSize": {
        "property": "defaultPageSize",
        "description": "默认的每页条数",
        "type": "number",
        "default": "10",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用分页",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "hideOnSinglePage": {
        "property": "hideOnSinglePage",
        "description": "只有一页时是否隐藏分页器",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "itemRender": {
        "property": "itemRender",
        "description": "用于自定义页码的结构，可用于优化 SEO",
        "type": "(page, type: 'page' \\| 'prev' \\| 'next', originalElement) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "pageSize": {
        "property": "pageSize",
        "description": "每页条数",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "pageSizeOptions": {
        "property": "pageSizeOptions",
        "description": "指定每页可以显示多少条",
        "type": "string\\[] \\| number\\[]",
        "default": "\\[`10`, `20`, `50`, `100`]",
        "version": ""
      },
      "responsive": {
        "property": "responsive",
        "description": "当 size 未指定时，根据屏幕宽度自动调整尺寸",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "showLessItems": {
        "property": "showLessItems",
        "description": "是否显示较少页面内容",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showQuickJumper": {
        "property": "showQuickJumper",
        "description": "是否可以快速跳转至某页",
        "type": "boolean \\| { goButton: ReactNode }",
        "default": "false",
        "version": ""
      },
      "showSizeChanger": {
        "property": "showSizeChanger",
        "description": "是否展示 `pageSize` 切换器，当 `total` 大于 50 时默认为 true",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "showTitle": {
        "property": "showTitle",
        "description": "是否显示原生 tooltip 页码提示",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "showTotal": {
        "property": "showTotal",
        "description": "用于显示数据总量和当前数据顺序",
        "type": "function(total, range)",
        "default": "-",
        "version": ""
      },
      "simple": {
        "property": "simple",
        "description": "当添加该属性时，显示为简单分页",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "当为 `small` 时，是小尺寸分页",
        "type": "`default` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "total": {
        "property": "total",
        "description": "数据总数",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "页码或 `pageSize` 改变的回调，参数是改变后的页码及每页条数",
        "type": "function(page, pageSize)",
        "default": "-",
        "version": ""
      },
      "onShowSizeChange": {
        "property": "onShowSizeChange",
        "description": "pageSize 变化的回调",
        "type": "function(current, size)",
        "default": "-",
        "version": ""
      }
    },
    "Popconfirm": {
      "cancelButtonProps": {
        "property": "cancelButtonProps",
        "description": "cancel 按钮 props",
        "type": "[ButtonProps](/components/button-cn#api)",
        "default": "-",
        "version": ""
      },
      "cancelText": {
        "property": "cancelText",
        "description": "取消按钮文字",
        "type": "string",
        "default": "`取消`",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "阻止点击 Popconfirm 子元素时弹出确认框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "自定义弹出气泡 Icon 图标",
        "type": "ReactNode",
        "default": "&lt;ExclamationCircle />",
        "version": ""
      },
      "okButtonProps": {
        "property": "okButtonProps",
        "description": "ok 按钮 props",
        "type": "[ButtonProps](/components/button-cn#api)",
        "default": "-",
        "version": ""
      },
      "okText": {
        "property": "okText",
        "description": "确认按钮文字",
        "type": "string",
        "default": "`确定`",
        "version": ""
      },
      "okType": {
        "property": "okType",
        "description": "确认按钮类型",
        "type": "string",
        "default": "`primary`",
        "version": ""
      },
      "showCancel": {
        "property": "showCancel",
        "description": "是否显示取消按钮",
        "type": "boolean",
        "default": "true",
        "version": "4.18.0"
      },
      "title": {
        "property": "title",
        "description": "确认框标题",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "确认内容的详细描述",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": "5.1.0"
      },
      "onCancel": {
        "property": "onCancel",
        "description": "点击取消的回调",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onConfirm": {
        "property": "onConfirm",
        "description": "点击确认的回调",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onPopupClick": {
        "property": "onPopupClick",
        "description": "弹出气泡点击事件",
        "type": "function(e)",
        "default": "-",
        "version": "5.5.0"
      }
    },
    "Popover": {
      "content": {
        "property": "content",
        "description": "卡片内容",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "卡片标题",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Rate": {
      "allowClear": {
        "property": "allowClear",
        "description": "是否允许再次点击后清除",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "allowHalf": {
        "property": "allowHalf",
        "description": "是否允许半选",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "character": {
        "property": "character",
        "description": "自定义字符",
        "type": "ReactNode \\| (RateProps) => ReactNode",
        "default": "&lt;StarFilled />",
        "version": "function(): 4.4.0"
      },
      "className": {
        "property": "className",
        "description": "自定义样式类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "count": {
        "property": "count",
        "description": "star 总数",
        "type": "number",
        "default": "5",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认值",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "只读，无法进行交互",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "自定义样式对象",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "tooltips": {
        "property": "tooltips",
        "description": "自定义每项的提示信息",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "当前数，受控值",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时的回调",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选择时的回调",
        "type": "function(value: number)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获取焦点时的回调",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onHoverChange": {
        "property": "onHoverChange",
        "description": "鼠标经过时数值变化的回调",
        "type": "function(value: number)",
        "default": "-",
        "version": ""
      },
      "onKeyDown": {
        "property": "onKeyDown",
        "description": "按键回调",
        "type": "function(event)",
        "default": "-",
        "version": ""
      }
    },
    "Radio": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "指定当前是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "初始是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用 Radio",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "根据 value 进行比较，判断是否选中",
        "type": "any",
        "default": "-",
        "version": ""
      }
    },
    "Progress": {
      "format": {
        "property": "format",
        "description": "内容的模板函数",
        "type": "function(percent, successPercent)",
        "default": "(percent) => percent + `%`",
        "version": "-"
      },
      "percent": {
        "property": "percent",
        "description": "百分比",
        "type": "number",
        "default": "0",
        "version": "-"
      },
      "showInfo": {
        "property": "showInfo",
        "description": "是否显示进度数值或状态图标",
        "type": "boolean",
        "default": "true",
        "version": "-"
      },
      "status": {
        "property": "status",
        "description": "状态，可选：`success` `exception` `normal` `active`(仅限 line)",
        "type": "string",
        "default": "-",
        "version": "-"
      },
      "strokeColor": {
        "property": "strokeColor",
        "description": "进度条的色彩",
        "type": "string",
        "default": "-",
        "version": "-"
      },
      "strokeLinecap": {
        "property": "strokeLinecap",
        "description": "进度条的样式",
        "type": "`round` \\| `butt` \\| `square`，区别详见 [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap)",
        "default": "`round`",
        "version": "-"
      },
      "success": {
        "property": "success",
        "description": "成功进度条相关配置",
        "type": "{ percent: number, strokeColor: string }",
        "default": "-",
        "version": "-"
      },
      "trailColor": {
        "property": "trailColor",
        "description": "未完成的分段的颜色",
        "type": "string",
        "default": "-",
        "version": "-"
      },
      "type": {
        "property": "type",
        "description": "类型，可选 `line` `circle` `dashboard`",
        "type": "string",
        "default": "`line`",
        "version": "-"
      },
      "size": {
        "property": "size",
        "description": "进度条的尺寸",
        "type": "number \\| \\[number, number] \\| \"small\" \\| \"default\"",
        "default": "\"default\"",
        "version": "v5.3.0"
      }
    },
    "Result": {
      "extra": {
        "property": "extra",
        "description": "操作区",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "自定义 icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "结果的状态，决定图标和颜色",
        "type": "`success` \\| `error` \\| `info` \\| `warning` \\| `404` \\| `403` \\| `500`",
        "default": "`info`",
        "version": ""
      },
      "subTitle": {
        "property": "subTitle",
        "description": "subTitle 文字",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "title 文字",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Select": {
      "allowClear": {
        "property": "allowClear",
        "description": "支持清除",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoClearSearchValue": {
        "property": "autoClearSearchValue",
        "description": "是否在选中项后清空搜索框，只在 `mode` 为 `multiple` 或 `tags` 时有效",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "默认获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "自定义的多选框清空图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "defaultActiveFirstOption": {
        "property": "defaultActiveFirstOption",
        "description": "是否默认高亮第一个选项",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "是否默认展开下拉菜单",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "指定默认选中的条目",
        "type": "string \\| string\\[] \\|<br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "下拉菜单的 className 属性",
        "type": "string",
        "default": "-",
        "version": "4.23.0"
      },
      "popupMatchSelectWidth": {
        "property": "popupMatchSelectWidth",
        "description": "下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动",
        "type": "boolean \\| number",
        "default": "true",
        "version": "5.5.0"
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "自定义下拉框内容",
        "type": "(originNode: ReactNode) => ReactNode",
        "default": "-",
        "version": ""
      },
      "dropdownStyle": {
        "property": "dropdownStyle",
        "description": "下拉菜单的 style 属性",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "自定义节点 label、value、options、groupLabel 的字段",
        "type": "object",
        "default": "{ label: `label`, value: `value`, options: `options`, groupLabel: `label` }",
        "version": "4.17.0（`groupLabel` 在 5.6.0 新增）"
      },
      "filterOption": {
        "property": "filterOption",
        "description": "是否根据输入项进行筛选。当其为一个函数时，会接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false",
        "type": "boolean \\| function(inputValue, option)",
        "default": "true",
        "version": ""
      },
      "filterSort": {
        "property": "filterSort",
        "description": "搜索时对筛选结果项的排序函数, 类似[Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)里的 compareFunction",
        "type": "(optionA: Option, optionB: Option) => number",
        "default": "-",
        "version": "4.9.0"
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codesandbox.io/s/4j168r7jw0)",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "labelInValue": {
        "property": "labelInValue",
        "description": "是否把每个选项的 label 包装到 value 中，会把 Select 的 value 类型从 `string` 变为 { value: string, label: ReactNode } 的格式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "listHeight": {
        "property": "listHeight",
        "description": "设置弹窗滚动高度",
        "type": "number",
        "default": "256",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "加载中状态",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "最多显示多少个 tag，响应式模式会对性能产生损耗",
        "type": "number \\| `responsive`",
        "default": "-",
        "version": "responsive: 4.10"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "隐藏 tag 时显示的内容",
        "type": "ReactNode \\| function(omittedValues)",
        "default": "-",
        "version": ""
      },
      "maxTagTextLength": {
        "property": "maxTagTextLength",
        "description": "最大显示的 tag 文本长度",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "menuItemSelectedIcon": {
        "property": "menuItemSelectedIcon",
        "description": "自定义多选时当前选中的条目图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "设置 Select 的模式为多选或标签",
        "type": "`multiple` \\| `tags`",
        "default": "-",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "当下拉列表为空时显示的内容",
        "type": "ReactNode",
        "default": "`Not Found`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "是否展开下拉菜单",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "optionFilterProp": {
        "property": "optionFilterProp",
        "description": "搜索时过滤对应的 `option` 属性，如设置为 `children` 表示对内嵌内容进行搜索。若通过 `options` 属性配置选项内容，建议设置 `optionFilterProp=\"label\"` 来对内容进行搜索。",
        "type": "string",
        "default": "`value`",
        "version": ""
      },
      "optionLabelProp": {
        "property": "optionLabelProp",
        "description": "回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 `value`。[示例](https://codesandbox.io/s/antd-reproduction-template-tk678)",
        "type": "string",
        "default": "`children`",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "数据化配置选项内容，相比 jsx 定义会获得更好的渲染性能",
        "type": "{ label, value }\\[]",
        "default": "-",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "选择框默认文本",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "选择框弹出的位置",
        "type": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "default": "bottomLeft",
        "version": ""
      },
      "removeIcon": {
        "property": "removeIcon",
        "description": "自定义的多选框清除图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "searchValue": {
        "property": "searchValue",
        "description": "控制搜索文本",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "是否显示下拉小箭头",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "配置是否可搜索",
        "type": "boolean",
        "default": "单选为 false，多选为 true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "选择框大小",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`middle`",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "自定义的选择框后缀图标。以防止图标被用于其他交互，替换的图标默认不会响应展开、收缩事件，可以通过添加 `pointer-events: none` 样式透传。",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "tagRender": {
        "property": "tagRender",
        "description": "自定义 tag 内容 render，仅在 `mode` 为 `multiple` 或 `tags` 时生效",
        "type": "(props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "tokenSeparators": {
        "property": "tokenSeparators",
        "description": "自动分词的分隔符，仅在 `mode=\"tags\"` 时生效",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "指定当前选中的条目，多选时为一个数组。（value 数组引用未变化时，Select 不会更新）",
        "type": "string \\| string\\[] \\| <br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[]",
        "default": "-",
        "version": ""
      },
      "virtual": {
        "property": "virtual",
        "description": "设置 false 时关闭虚拟滚动",
        "type": "boolean",
        "default": "true",
        "version": "4.1.0"
      },
      "onBlur": {
        "property": "onBlur",
        "description": "失去焦点时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选中 option，或 input 的 value 变化时，调用此函数",
        "type": "function(value, option:Option \\| Array&lt;Option>)",
        "default": "-",
        "version": ""
      },
      "onClear": {
        "property": "onClear",
        "description": "清除内容时回调",
        "type": "function",
        "default": "-",
        "version": "4.6.0"
      },
      "onDeselect": {
        "property": "onDeselect",
        "description": "取消选中时调用，参数为选中项的 value (或 key) 值，仅在 `multiple` 或 `tags` 模式下生效",
        "type": "function(value: string \\| number \\| LabeledValue)",
        "default": "-",
        "version": ""
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "展开下拉菜单的回调",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "获得焦点时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onInputKeyDown": {
        "property": "onInputKeyDown",
        "description": "按键按下时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onMouseEnter": {
        "property": "onMouseEnter",
        "description": "鼠标移入时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onMouseLeave": {
        "property": "onMouseLeave",
        "description": "鼠标移出时回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onPopupScroll": {
        "property": "onPopupScroll",
        "description": "下拉列表滚动时的回调",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "文本框值变化时回调",
        "type": "function(value: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "被选中时调用，参数为选中项的 value (或 key) 值",
        "type": "function(value: string \\| number \\| LabeledValue, option: Option)",
        "default": "-",
        "version": ""
      }
    },
    "Select.Option": {
      "className": {
        "property": "className",
        "description": "Option 器类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "选项上的原生 title 提示",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "默认根据此属性值进行筛选",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      }
    },
    "Skeleton": {
      "active": {
        "property": "active",
        "description": "是否展示动画效果",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "avatar": {
        "property": "avatar",
        "description": "是否显示头像占位图",
        "type": "boolean \\| [SkeletonAvatarProps](#skeletonavatarprops)",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "为 true 时，显示占位图。反之则直接展示子组件",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "paragraph": {
        "property": "paragraph",
        "description": "是否显示段落占位图",
        "type": "boolean \\| [SkeletonParagraphProps](#skeletonparagraphprops)",
        "default": "true",
        "version": ""
      },
      "round": {
        "property": "round",
        "description": "为 true 时，段落和标题显示圆角",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "是否显示标题占位图",
        "type": "boolean \\| [SkeletonTitleProps](#skeletontitleprops)",
        "default": "true",
        "version": ""
      }
    },
    "Slider": {
      "allowClear": {
        "property": "allowClear",
        "description": "支持清除, 单选模式有效",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "设置初始取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number]",
        "type": "number \\| \\[number, number]",
        "default": "0 \\| \\[0, 0]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "值为 true 时，滑块为禁用状态",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "keyboard": {
        "property": "keyboard",
        "description": "支持使用键盘操作 handler",
        "type": "boolean",
        "default": "true",
        "version": "5.2.0+"
      },
      "dots": {
        "property": "dots",
        "description": "是否只能拖拽到刻度上",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "included": {
        "property": "included",
        "description": "`marks` 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "marks": {
        "property": "marks",
        "description": "刻度标记，key 的类型必须为 `number` 且取值在闭区间 \\[min, max] 内，每个标签可以单独设置样式",
        "type": "object",
        "default": "{ number: ReactNode } or { number: { style: CSSProperties, label: ReactNode } }",
        "version": ""
      },
      "max": {
        "property": "max",
        "description": "最大值",
        "type": "number",
        "default": "100",
        "version": ""
      },
      "min": {
        "property": "min",
        "description": "最小值",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "range": {
        "property": "range",
        "description": "双滑块模式",
        "type": "boolean \\| [range](#range)",
        "default": "false",
        "version": ""
      },
      "reverse": {
        "property": "reverse",
        "description": "反向坐标轴",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "step": {
        "property": "step",
        "description": "步长，取值必须大于 0，并且可被 (max - min) 整除。当 `marks` 不为空对象时，可以设置 `step` 为 null，此时 Slider 的可选值仅有 marks 标出来的部分",
        "type": "number \\| null",
        "default": "1",
        "version": ""
      },
      "tooltip": {
        "property": "tooltip",
        "description": "设置 Tooltip 相关属性",
        "type": "[tooltip](#tooltip)",
        "default": "-",
        "version": "4.23.0"
      },
      "value": {
        "property": "value",
        "description": "设置当前取值。当 `range` 为 false 时，使用 number，否则用 \\[number, number]",
        "type": "number \\| \\[number, number]",
        "default": "-",
        "version": ""
      },
      "vertical": {
        "property": "vertical",
        "description": "值为 true 时，Slider 为垂直方向",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onAfterChange": {
        "property": "onAfterChange",
        "description": "与 `onmouseup` 触发时机一致，把当前值作为参数传入",
        "type": "(value) => void",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入",
        "type": "(value) => void",
        "default": "-",
        "version": ""
      }
    },
    "Select.OptGroup": {
      "key": {
        "property": "key",
        "description": "Key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "label": {
        "property": "label",
        "description": "组名",
        "type": "string \\| React.Element",
        "default": "-",
        "version": ""
      }
    },
    "Space": {
      "align": {
        "property": "align",
        "description": "对齐方式",
        "type": "`start` \\| `end` \\|`center` \\|`baseline`",
        "default": "-",
        "version": "4.2.0"
      },
      "direction": {
        "property": "direction",
        "description": "间距方向",
        "type": "`vertical` \\| `horizontal`",
        "default": "`horizontal`",
        "version": "4.1.0"
      },
      "size": {
        "property": "size",
        "description": "间距大小",
        "type": "[Size](#size) \\| [Size\\[\\]](#size)",
        "default": "`small`",
        "version": "4.1.0 \\| Array: 4.9.0"
      },
      "split": {
        "property": "split",
        "description": "设置拆分",
        "type": "ReactNode",
        "default": "-",
        "version": "4.7.0"
      },
      "wrap": {
        "property": "wrap",
        "description": "是否自动换行，仅在 `horizontal` 时有效",
        "type": "boolean",
        "default": "false",
        "version": "4.9.0"
      }
    },
    "Statistic": {
      "decimalSeparator": {
        "property": "decimalSeparator",
        "description": "设置小数点",
        "type": "string",
        "default": "`.`",
        "version": ""
      },
      "formatter": {
        "property": "formatter",
        "description": "自定义数值展示",
        "type": "(value) => ReactNode",
        "default": "-",
        "version": ""
      },
      "groupSeparator": {
        "property": "groupSeparator",
        "description": "设置千分位标识符",
        "type": "string",
        "default": "`,`",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "数值是否加载中",
        "type": "boolean",
        "default": "false",
        "version": "4.8.0"
      },
      "precision": {
        "property": "precision",
        "description": "数值精度",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "设置数值的前缀",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "suffix": {
        "property": "suffix",
        "description": "设置数值的后缀",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "数值的标题",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "数值内容",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "valueStyle": {
        "property": "valueStyle",
        "description": "设置数值区域的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Spin": {
      "delay": {
        "property": "delay",
        "description": "延迟显示加载效果的时间（防止闪烁）",
        "type": "number (毫秒)",
        "default": "-",
        "version": ""
      },
      "indicator": {
        "property": "indicator",
        "description": "加载指示符",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "组件大小，可选值为 `small` `default` `large`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "spinning": {
        "property": "spinning",
        "description": "是否为加载中状态",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "tip": {
        "property": "tip",
        "description": "当作为包裹元素时，可以自定义描述文案",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "wrapperClassName": {
        "property": "wrapperClassName",
        "description": "包装器的类属性",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Statistic.Countdown": {
      "format": {
        "property": "format",
        "description": "格式化倒计时展示，参考 [dayjs](https://day.js.org/)",
        "type": "string",
        "default": "`HH:mm:ss`",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "设置数值的前缀",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "suffix": {
        "property": "suffix",
        "description": "设置数值的后缀",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "数值的标题",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "数值内容",
        "type": "number \\| dayjs",
        "default": "-",
        "version": ""
      },
      "valueStyle": {
        "property": "valueStyle",
        "description": "设置数值区域的样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "onFinish": {
        "property": "onFinish",
        "description": "倒计时完成时触发",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "倒计时时间变化时触发",
        "type": "(value: number) => void",
        "default": "-",
        "version": "4.16.0"
      }
    },
    "Steps": {
      "className": {
        "property": "className",
        "description": "步骤条类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "current": {
        "property": "current",
        "description": "指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 `status` 属性覆盖状态",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "direction": {
        "property": "direction",
        "description": "指定步骤条方向。目前支持水平（`horizontal`）和竖直（`vertical`）两种方向",
        "type": "string",
        "default": "`horizontal`",
        "version": ""
      },
      "initial": {
        "property": "initial",
        "description": "起始序号，从 0 开始记数",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "labelPlacement": {
        "property": "labelPlacement",
        "description": "指定标签放置位置，默认水平放图标右侧，可选 `vertical` 放图标下方",
        "type": "string",
        "default": "`horizontal`",
        "version": ""
      },
      "percent": {
        "property": "percent",
        "description": "当前 `process` 步骤显示的进度条进度（只对基本类型的 Steps 生效）",
        "type": "number",
        "default": "-",
        "version": "4.5.0"
      },
      "progressDot": {
        "property": "progressDot",
        "description": "点状步骤条，可以设置为一个 function，labelPlacement 将强制为 `vertical`",
        "type": "boolean \\| (iconDot, {index, status, title, description}) => ReactNode",
        "default": "false",
        "version": ""
      },
      "responsive": {
        "property": "responsive",
        "description": "当屏幕宽度小于 `532px` 时自动变为垂直模式",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "指定大小，目前支持普通（`default`）和迷你（`small`）",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "指定当前步骤的状态，可选 `wait` `process` `finish` `error`",
        "type": "string",
        "default": "`process`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "步骤条类型，可选 `default` `navigation` `inline`",
        "type": "string",
        "default": "`default`",
        "version": "inline: 5.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "点击切换步骤时触发",
        "type": "(current) => void",
        "default": "-",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "配置选项卡内容",
        "type": "[StepItem](#stepitem)",
        "default": "\\[]",
        "version": "4.24.0"
      }
    },
    "Switch": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "组件自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "指定当前是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkedChildren": {
        "property": "checkedChildren",
        "description": "选中时的内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "Switch 器类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "初始是否选中",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "加载中的开关",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "开关大小，可选值：`default` `small`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "unCheckedChildren": {
        "property": "unCheckedChildren",
        "description": "非选中时的内容",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "变化时的回调函数",
        "type": "function(checked: boolean, event: Event)",
        "default": "-",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击时的回调函数",
        "type": "function(checked: boolean, event: Event)",
        "default": "-",
        "version": ""
      }
    },
    "Tabs": {
      "activeKey": {
        "property": "activeKey",
        "description": "当前激活 tab 面板的 key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "addIcon": {
        "property": "addIcon",
        "description": "自定义添加按钮",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      "animated": {
        "property": "animated",
        "description": "是否使用动画切换 Tabs, 仅生效于 `tabPosition=\"top\"`",
        "type": "boolean\\| { inkBar: boolean, tabPane: boolean }",
        "default": "{ inkBar: true, tabPane: false }",
        "version": ""
      },
      "centered": {
        "property": "centered",
        "description": "标签居中展示",
        "type": "boolean",
        "default": "false",
        "version": "4.4.0"
      },
      "defaultActiveKey": {
        "property": "defaultActiveKey",
        "description": "初始化选中面板的 key，如果没有设置 activeKey",
        "type": "string",
        "default": "`第一个面板`",
        "version": ""
      },
      "hideAdd": {
        "property": "hideAdd",
        "description": "是否隐藏加号图标，在 `type=\"editable-card\"` 时有效",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "配置选项卡内容",
        "type": "[TabItemType](#tabitemtype)",
        "default": "\\[]",
        "version": "4.23.0"
      },
      "moreIcon": {
        "property": "moreIcon",
        "description": "自定义折叠 icon",
        "type": "ReactNode",
        "default": "&lt;EllipsisOutlined />",
        "version": "4.14.0"
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "更多菜单的 `className`",
        "type": "string",
        "default": "-",
        "version": "4.21.0"
      },
      "renderTabBar": {
        "property": "renderTabBar",
        "description": "替换 TabBar，用于二次封装标签头",
        "type": "(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "大小，提供 `large` `middle` 和 `small` 三种大小",
        "type": "string",
        "default": "`middle`",
        "version": ""
      },
      "tabBarExtraContent": {
        "property": "tabBarExtraContent",
        "description": "tab bar 上额外的元素",
        "type": "ReactNode \\| {left?: ReactNode, right?: ReactNode}",
        "default": "-",
        "version": "object: 4.6.0"
      },
      "tabBarGutter": {
        "property": "tabBarGutter",
        "description": "tabs 之间的间隙",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "tabBarStyle": {
        "property": "tabBarStyle",
        "description": "tab bar 的样式对象",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "tabPosition": {
        "property": "tabPosition",
        "description": "页签位置，可选值有 `top` `right` `bottom` `left`",
        "type": "string",
        "default": "`top`",
        "version": ""
      },
      "destroyInactiveTabPane": {
        "property": "destroyInactiveTabPane",
        "description": "被隐藏时是否销毁 DOM 结构",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "页签的基本样式，可选 `line`、`card` `editable-card` 类型",
        "type": "string",
        "default": "`line`",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "切换面板的回调",
        "type": "function(activeKey) {}",
        "default": "-",
        "version": ""
      },
      "onEdit": {
        "property": "onEdit",
        "description": "新增和删除页签的回调，在 `type=\"editable-card\"` 时有效",
        "type": "(action === 'add' ? event : targetKey, action): void",
        "default": "-",
        "version": ""
      },
      "onTabClick": {
        "property": "onTabClick",
        "description": "tab 被点击的回调",
        "type": "function(key: string, event: MouseEvent)",
        "default": "-",
        "version": ""
      },
      "onTabScroll": {
        "property": "onTabScroll",
        "description": "tab 滚动时触发",
        "type": "function({ direction: `left` \\| `right` \\| `top` \\| `bottom` })",
        "default": "-",
        "version": "4.3.0"
      }
    },
    "Table": {
      "bordered": {
        "property": "bordered",
        "description": "是否展示外边框和列边框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "columns": {
        "property": "columns",
        "description": "表格列的配置描述，具体项见下表",
        "type": "[ColumnsType](#column)\\[]",
        "default": "-",
        "version": ""
      },
      "components": {
        "property": "components",
        "description": "覆盖默认的 table 元素",
        "type": "[TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129)",
        "default": "-",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "数据数组",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "expandable": {
        "property": "expandable",
        "description": "配置展开属性",
        "type": "[expandable](#expandable)",
        "default": "-",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "表格尾部",
        "type": "function(currentPageData)",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "设置表格内各类浮层的渲染节点，如筛选菜单",
        "type": "(triggerNode) => HTMLElement",
        "default": "() => TableHtmlElement",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "页面是否加载中",
        "type": "boolean \\| [Spin Props](/components/spin-cn#api)",
        "default": "false",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "默认文案设置，目前包括排序、过滤、空数据文案",
        "type": "object",
        "default": "[默认值](https://github.com/ant-design/ant-design/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/zh_CN.tsx#L20-L37)",
        "version": ""
      },
      "pagination": {
        "property": "pagination",
        "description": "分页器，参考[配置项](#pagination)或 [pagination](/components/pagination-cn) 文档，设为 false 时不展示和进行分页",
        "type": "object \\| `false`",
        "default": "-",
        "version": ""
      },
      "rowClassName": {
        "property": "rowClassName",
        "description": "表格行的类名",
        "type": "function(record, index): string",
        "default": "-",
        "version": ""
      },
      "rowKey": {
        "property": "rowKey",
        "description": "表格行 key 的取值，可以是字符串或一个函数",
        "type": "string \\| function(record): string",
        "default": "`key`",
        "version": ""
      },
      "rowSelection": {
        "property": "rowSelection",
        "description": "表格行是否可选择，[配置项](#rowselection)",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "scroll": {
        "property": "scroll",
        "description": "表格是否可滚动，也可以指定滚动区域的宽、高，[配置项](#scroll)",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "showHeader": {
        "property": "showHeader",
        "description": "是否显示表头",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "showSorterTooltip": {
        "property": "showSorterTooltip",
        "description": "表头是否显示下一次排序的 tooltip 提示。当参数类型为对象时，将被设置为 Tooltip 的属性",
        "type": "boolean \\| [Tooltip props](/components/tooltip-cn)",
        "default": "true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "表格大小",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`large`",
        "version": ""
      },
      "sortDirections": {
        "property": "sortDirections",
        "description": "支持的排序方式，取值为 `ascend` `descend`",
        "type": "Array",
        "default": "\\[`ascend`, `descend`]",
        "version": ""
      },
      "sticky": {
        "property": "sticky",
        "description": "设置粘性头部和滚动条",
        "type": "boolean \\| `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}`",
        "default": "-",
        "version": "4.6.0 (getContainer: 4.7.0)"
      },
      "summary": {
        "property": "summary",
        "description": "总结栏",
        "type": "(currentData) => ReactNode",
        "default": "-",
        "version": ""
      },
      "tableLayout": {
        "property": "tableLayout",
        "description": "表格元素的 [table-layout](https://developer.mozilla.org/zh-CN/docs/Web/CSS/table-layout) 属性，设为 `fixed` 表示内容不会影响列的布局",
        "type": "- \\| `auto` \\| `fixed`",
        "default": "无<hr />固定表头/列或使用了 `column.ellipsis` 时，默认值为 `fixed`",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "表格标题",
        "type": "function(currentPageData)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "分页、排序、筛选变化时触发",
        "type": "function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` \\| `sort` \\| `filter` })",
        "default": "-",
        "version": ""
      },
      "onHeaderRow": {
        "property": "onHeaderRow",
        "description": "设置头部行属性",
        "type": "function(columns, index)",
        "default": "-",
        "version": ""
      },
      "onRow": {
        "property": "onRow",
        "description": "设置行属性",
        "type": "function(record, index)",
        "default": "-",
        "version": ""
      }
    },
    "Table.ColumnGroup": {
      "title": {
        "property": "title",
        "description": "列头显示文字",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Table.Column": {
      "align": {
        "property": "align",
        "description": "设置列的对齐方式",
        "type": "`left` \\| `right` \\| `center`",
        "default": "`left`",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "列样式类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "colSpan": {
        "property": "colSpan",
        "description": "表头列合并,设置为 0 时，不渲染",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "dataIndex": {
        "property": "dataIndex",
        "description": "列数据在数据项中对应的路径，支持通过数组查询嵌套路径",
        "type": "string \\| string\\[]",
        "default": "-",
        "version": ""
      },
      "defaultFilteredValue": {
        "property": "defaultFilteredValue",
        "description": "默认筛选值",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "filterResetToDefaultFilteredValue": {
        "property": "filterResetToDefaultFilteredValue",
        "description": "点击重置按钮的时候，是否恢复默认筛选值",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultSortOrder": {
        "property": "defaultSortOrder",
        "description": "默认排序顺序",
        "type": "`ascend` \\| `descend`",
        "default": "-",
        "version": ""
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "超过宽度将自动省略，暂不支持和排序筛选一起使用。<br />设置为 `true` 或 `{ showTitle?: boolean }` 时，表格布局将变成 `tableLayout=\"fixed\"`。",
        "type": "boolean \\| { showTitle?: boolean }",
        "default": "false",
        "version": "showTitle: 4.3.0"
      },
      "filterDropdown": {
        "property": "filterDropdown",
        "description": "可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互",
        "type": "ReactNode \\| (props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode",
        "default": "-",
        "version": ""
      },
      "filterDropdownOpen": {
        "property": "filterDropdownOpen",
        "description": "用于控制自定义筛选菜单是否可见",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "filtered": {
        "property": "filtered",
        "description": "标识数据是否经过过滤，筛选图标会高亮",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "filteredValue": {
        "property": "filteredValue",
        "description": "筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "filterIcon": {
        "property": "filterIcon",
        "description": "自定义 filter 图标。",
        "type": "ReactNode \\| (filtered: boolean) => ReactNode",
        "default": "false",
        "version": ""
      },
      "filterMultiple": {
        "property": "filterMultiple",
        "description": "是否多选",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "filterMode": {
        "property": "filterMode",
        "description": "指定筛选菜单的用户界面",
        "type": "'menu' \\| 'tree'",
        "default": "'menu'",
        "version": "4.17.0"
      },
      "filterSearch": {
        "property": "filterSearch",
        "description": "筛选菜单项是否可搜索",
        "type": "boolean \\| function(input, record):boolean",
        "default": "false",
        "version": "boolean:4.17.0 function:4.19.0"
      },
      "filters": {
        "property": "filters",
        "description": "表头的筛选菜单项",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "fixed": {
        "property": "fixed",
        "description": "（IE 下无效）列是否固定，可选 true (等效于 left) `left` `right`",
        "type": "boolean \\| string",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "React 需要的 key，如果已经设置了唯一的 `dataIndex`，可以忽略这个属性",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "render": {
        "property": "render",
        "description": "生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引",
        "type": "function(text, record, index) {}",
        "default": "-",
        "version": ""
      },
      "responsive": {
        "property": "responsive",
        "description": "响应式 breakpoint 配置列表。未设置则始终可见。",
        "type": "[Breakpoint](https://github.com/ant-design/ant-design/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[]",
        "default": "-",
        "version": "4.2.0"
      },
      "rowScope": {
        "property": "rowScope",
        "description": "设置列范围",
        "type": "`row` \\| `rowgroup`",
        "default": "-",
        "version": "5.1.0"
      },
      "shouldCellUpdate": {
        "property": "shouldCellUpdate",
        "description": "自定义单元格渲染时机",
        "type": "(record, prevRecord) => boolean",
        "default": "-",
        "version": "4.3.0"
      },
      "showSorterTooltip": {
        "property": "showSorterTooltip",
        "description": "表头显示下一次排序的 tooltip 提示, 覆盖 table 中 `showSorterTooltip`",
        "type": "boolean \\| [Tooltip props](/components/tooltip-cn/#api)",
        "default": "true",
        "version": ""
      },
      "sortDirections": {
        "property": "sortDirections",
        "description": "支持的排序方式，覆盖 `Table` 中 `sortDirections`， 取值为 `ascend` `descend`",
        "type": "Array",
        "default": "\\[`ascend`, `descend`]",
        "version": ""
      },
      "sorter": {
        "property": "sorter",
        "description": "排序函数，本地排序使用一个函数(参考 [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 的 compareFunction)，需要服务端排序可设为 true",
        "type": "function \\| boolean",
        "default": "-",
        "version": ""
      },
      "sortOrder": {
        "property": "sortOrder",
        "description": "排序的受控属性，外界可用此控制列的排序，可设置为 `ascend` `descend` `null`",
        "type": "`ascend` \\| `descend` \\| null",
        "default": "-",
        "version": ""
      },
      "sortIcon": {
        "property": "sortIcon",
        "description": "自定义 sort 图标",
        "type": "(props: { sortOrder }) => ReactNode",
        "default": "-",
        "version": "5.6.0"
      },
      "title": {
        "property": "title",
        "description": "列头显示文字（函数用法 `3.10.0` 后支持）",
        "type": "ReactNode \\| ({ sortOrder, sortColumn, filters }) => ReactNode",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "列宽度（[指定了也不生效？](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241)）",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "onCell": {
        "property": "onCell",
        "description": "设置单元格属性",
        "type": "function(record, rowIndex)",
        "default": "-",
        "version": ""
      },
      "onFilter": {
        "property": "onFilter",
        "description": "本地模式下，确定筛选的运行函数",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onFilterDropdownOpenChange": {
        "property": "onFilterDropdownOpenChange",
        "description": "自定义筛选菜单可见变化时调用",
        "type": "function(visible) {}",
        "default": "-",
        "version": ""
      },
      "onHeaderCell": {
        "property": "onHeaderCell",
        "description": "设置头部单元格属性",
        "type": "function(column)",
        "default": "-",
        "version": ""
      }
    },
    "Tag": {
      "closable": {
        "property": "closable",
        "description": "标签是否可以关闭（点击默认关闭）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "自定义关闭按钮",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      "color": {
        "property": "color",
        "description": "标签色",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "设置图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": "5.4.0"
      },
      "onClose": {
        "property": "onClose",
        "description": "关闭时的回调（可通过 `e.preventDefault()` 来阻止默认行为）",
        "type": "(e) => void",
        "default": "-",
        "version": ""
      }
    },
    "Tag.CheckableTag": {
      "checked": {
        "property": "checked",
        "description": "设置标签的选中状态",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "点击标签时触发的回调",
        "type": "(checked) => void",
        "default": "-",
        "version": ""
      }
    },
    "TimePicker": {
      "allowClear": {
        "property": "allowClear",
        "description": "是否展示清除按钮",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "自动获取焦点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否有边框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "changeOnBlur": {
        "property": "changeOnBlur",
        "description": "失去焦点时触发 `change` 事件，例如 datetime 下不再需要点击确认按钮",
        "type": "boolean",
        "default": "false",
        "version": "5.5.0"
      },
      "className": {
        "property": "className",
        "description": "选择器类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "自定义的清除图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "clearText": {
        "property": "clearText",
        "description": "清除按钮的提示文案",
        "type": "string",
        "default": "clear",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "默认时间",
        "type": "[dayjs](http://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用全部操作",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabledTime": {
        "property": "disabledTime",
        "description": "不可选择的时间",
        "type": "[DisabledTime](#disabledtime)",
        "default": "-",
        "version": "4.19.0"
      },
      "format": {
        "property": "format",
        "description": "展示的时间格式",
        "type": "string",
        "default": "`HH:mm:ss`",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "定义浮层的容器，默认为 body 上新建 div",
        "type": "function(trigger)",
        "default": "-",
        "version": ""
      },
      "hideDisabledOptions": {
        "property": "hideDisabledOptions",
        "description": "隐藏禁止选择的选项",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "hourStep": {
        "property": "hourStep",
        "description": "小时选项间隔",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "inputReadOnly": {
        "property": "inputReadOnly",
        "description": "设置输入框为只读（避免在移动设备上打开虚拟键盘）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "minuteStep": {
        "property": "minuteStep",
        "description": "分钟选项间隔",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "面板是否打开",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "没有值的时候显示的内容",
        "type": "string \\| \\[string, string]",
        "default": "`请选择时间`",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "选择框弹出的位置",
        "type": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "default": "bottomLeft",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "弹出层类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "popupStyle": {
        "property": "popupStyle",
        "description": "弹出层样式对象",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "选择框底部显示自定义的内容",
        "type": "() => ReactNode",
        "default": "-",
        "version": ""
      },
      "secondStep": {
        "property": "secondStep",
        "description": "秒选项间隔",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "showNow": {
        "property": "showNow",
        "description": "面板是否显示“此刻”按钮",
        "type": "boolean",
        "default": "-",
        "version": "4.4.0"
      },
      "size": {
        "property": "size",
        "description": "输入框大小，`large` 高度为 40px，`small` 为 24px，默认是 32px",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "自定义的选择框后缀图标",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "use12Hours": {
        "property": "use12Hours",
        "description": "使用 12 小时制，为 true 时 `format` 默认为 `h:mm:ss a`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "当前时间",
        "type": "[dayjs](http://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "时间发生变化的回调",
        "type": "function(time: dayjs, timeString: string): void",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "面板打开/关闭时的回调",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": ""
      }
    },
    "Tooltip": {
      "title": {
        "property": "title",
        "description": "提示文字",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": ""
      },
      "align": {
        "property": "align",
        "description": "该值将合并到 placement 的配置中，设置参考 [rc-tooltip](https://github.com/react-component/tooltip)",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "arrow": {
        "property": "arrow",
        "description": "修改箭头的显示状态以及修改箭头是否指向目标元素中心",
        "type": "boolean \\| { pointAtCenter: boolean }",
        "default": "true",
        "version": "5.2.0"
      },
      "autoAdjustOverflow": {
        "property": "autoAdjustOverflow",
        "description": "气泡被遮挡时自动调整位置",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "color": {
        "property": "color",
        "description": "背景颜色",
        "type": "string",
        "default": "-",
        "version": "4.3.0"
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "默认是否显隐",
        "type": "boolean",
        "default": "false",
        "version": "4.23.0"
      },
      "destroyTooltipOnHide": {
        "property": "destroyTooltipOnHide",
        "description": "关闭后是否销毁 Tooltip",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "浮层渲染父节点，默认渲染到 body 上",
        "type": "(triggerNode: HTMLElement) => HTMLElement",
        "default": "() => document.body",
        "version": ""
      },
      "mouseEnterDelay": {
        "property": "mouseEnterDelay",
        "description": "鼠标移入后延时多少才显示 Tooltip，单位：秒",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "mouseLeaveDelay": {
        "property": "mouseLeaveDelay",
        "description": "鼠标移出后延时多少才隐藏 Tooltip，单位：秒",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "overlayClassName": {
        "property": "overlayClassName",
        "description": "卡片类名",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "overlayStyle": {
        "property": "overlayStyle",
        "description": "卡片样式",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "overlayInnerStyle": {
        "property": "overlayInnerStyle",
        "description": "卡片内容区域的样式对象",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "气泡框位置，可选 `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom`",
        "type": "string",
        "default": "`top`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "触发行为，可选 `hover` \\| `focus` \\| `click` \\| `contextMenu`，可使用数组设置多个触发行为",
        "type": "string \\| string\\[]",
        "default": "`hover`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "用于手动控制浮层显隐，小于 4.23.0 使用 `visible`（[为什么?](/docs/react/faq#弹层类组件为什么要统一至-open-属性)）",
        "type": "boolean",
        "default": "false",
        "version": "4.23.0"
      },
      "zIndex": {
        "property": "zIndex",
        "description": "设置 Tooltip 的 `z-index`",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "显示隐藏的回调",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": "4.23.0"
      }
    },
    "Timeline": {
      "mode": {
        "property": "mode",
        "description": "通过设置 `mode` 可以改变时间轴和内容的相对位置",
        "type": "`left` \\| `alternate` \\| `right`",
        "default": "-",
        "version": ""
      },
      "pending": {
        "property": "pending",
        "description": "指定最后一个幽灵节点是否存在或内容",
        "type": "boolean \\| ReactNode",
        "default": "false",
        "version": ""
      },
      "pendingDot": {
        "property": "pendingDot",
        "description": "当最后一个幽灵节点存在時，指定其时间图点",
        "type": "ReactNode",
        "default": "&lt;LoadingOutlined />",
        "version": ""
      },
      "reverse": {
        "property": "reverse",
        "description": "节点排序",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "选项配置",
        "type": "[Items](#Items)\\[]",
        "default": "5.2.0",
        "version": ""
      }
    },
    "Transfer": {
      "dataSource": {
        "property": "dataSource",
        "description": "数据源，其中的数据将会被渲染到左边一栏中，`targetKeys` 中指定的除外",
        "type": "[RecordType extends TransferItem = TransferItem](https://github.com/ant-design/ant-design/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "根据搜索内容进行筛选，接收 `inputValue` `option` 两个参数，当 `option` 符合筛选条件时，应返回 true，反之则返回 false",
        "type": "(inputValue, option): boolean",
        "default": "-",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "底部渲染函数",
        "type": "(props, { direction }) => ReactNode",
        "default": "-",
        "version": "direction: 4.17.0"
      },
      "listStyle": {
        "property": "listStyle",
        "description": "两个穿梭框的自定义样式",
        "type": "object\\|({direction: `left` \\| `right`}) => object",
        "default": "-",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "各种语言",
        "type": "{ itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode \\| ReactNode\\[]; }",
        "default": "{ itemUnit: `项`, itemsUnit: `项`, searchPlaceholder: `请输入搜索内容` }",
        "version": ""
      },
      "oneWay": {
        "property": "oneWay",
        "description": "展示为单向样式",
        "type": "boolean",
        "default": "false",
        "version": "4.3.0"
      },
      "operations": {
        "property": "operations",
        "description": "操作文案集合，顺序从上至下",
        "type": "string\\[]",
        "default": "\\[`>`, `<`]",
        "version": ""
      },
      "operationStyle": {
        "property": "operationStyle",
        "description": "操作栏的自定义样式",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "pagination": {
        "property": "pagination",
        "description": "使用分页样式，自定义渲染列表下无效",
        "type": "boolean \\| { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean }",
        "default": "false",
        "version": "4.3.0"
      },
      "render": {
        "property": "render",
        "description": "每行数据渲染函数，该函数的入参为 `dataSource` 中的项，返回值为 ReactElement。或者返回一个普通对象，其中 `label` 字段为 ReactElement，`value` 字段为 title",
        "type": "(record) => ReactNode",
        "default": "-",
        "version": ""
      },
      "selectAllLabels": {
        "property": "selectAllLabels",
        "description": "自定义顶部多选框标题的集合",
        "type": "(ReactNode \\| (info: { selectedCount: number, totalCount: number }) => ReactNode)\\[]",
        "default": "-",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "设置哪些项应该被选中",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "是否显示搜索框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showSelectAll": {
        "property": "showSelectAll",
        "description": "是否展示全选勾选框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "targetKeys": {
        "property": "targetKeys",
        "description": "显示在右侧框数据的 key 集合",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "titles": {
        "property": "titles",
        "description": "标题集合，顺序从左至右",
        "type": "ReactNode\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "选项在两栏之间转移时的回调函数",
        "type": "(targetKeys, direction, moveKeys): void",
        "default": "-",
        "version": ""
      },
      "onScroll": {
        "property": "onScroll",
        "description": "选项列表滚动时的回调函数",
        "type": "(direction, event): void",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "搜索框内容时改变时的回调函数",
        "type": "(direction: `left` \\| `right`, value: string): void",
        "default": "-",
        "version": ""
      },
      "onSelectChange": {
        "property": "onSelectChange",
        "description": "选中项发生改变时的回调函数",
        "type": "(sourceSelectedKeys, targetSelectedKeys): void",
        "default": "-",
        "version": ""
      }
    },
    "Tree": {
      "allowDrop": {
        "property": "allowDrop",
        "description": "是否允许拖拽时放置在该节点",
        "type": "({ dropNode, dropPosition }) => boolean",
        "default": "-",
        "version": ""
      },
      "autoExpandParent": {
        "property": "autoExpandParent",
        "description": "是否自动展开父节点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "blockNode": {
        "property": "blockNode",
        "description": "是否节点占据一行",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkable": {
        "property": "checkable",
        "description": "节点前添加 Checkbox 复选框",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkedKeys": {
        "property": "checkedKeys",
        "description": "（受控）选中复选框的树节点（注意：父子节点有关联，如果传入父节点 key，则子节点自动选中；相应当子节点 key 都传入，父节点也自动选中。当设置 `checkable` 和 `checkStrictly`，它是一个有`checked`和`halfChecked`属性的对象，并且父子节点的选中与否不再关联",
        "type": "string\\[] \\| {checked: string\\[], halfChecked: string\\[]}",
        "default": "\\[]",
        "version": ""
      },
      "checkStrictly": {
        "property": "checkStrictly",
        "description": "checkable 状态下节点选择完全受控（父子节点选中状态不再关联）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultCheckedKeys": {
        "property": "defaultCheckedKeys",
        "description": "默认选中复选框的树节点",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "defaultExpandAll": {
        "property": "defaultExpandAll",
        "description": "默认展开所有树节点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultExpandedKeys": {
        "property": "defaultExpandedKeys",
        "description": "默认展开指定的树节点",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "defaultExpandParent": {
        "property": "defaultExpandParent",
        "description": "默认展开父节点",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultSelectedKeys": {
        "property": "defaultSelectedKeys",
        "description": "默认选中的树节点",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "将树禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "draggable": {
        "property": "draggable",
        "description": "设置节点可拖拽，可以通过 `icon: false` 关闭拖拽提示图标",
        "type": "boolean \\| ((node: DataNode) => boolean) \\| { icon?: React.ReactNode \\| false, nodeDraggable?: (node: DataNode) => boolean }",
        "default": "false",
        "version": "`config`: 4.17.0"
      },
      "expandedKeys": {
        "property": "expandedKeys",
        "description": "（受控）展开指定的树节点",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "自定义节点 title、key、children 的字段",
        "type": "object",
        "default": "{ title: `title`, key: `key`, children: `children` }",
        "version": "4.17.0"
      },
      "filterTreeNode": {
        "property": "filterTreeNode",
        "description": "按需筛选树节点（高亮），返回 true",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "height": {
        "property": "height",
        "description": "设置虚拟滚动容器高度，设置后内部节点不再支持横向滚动",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "自定义树节点图标。",
        "type": "ReactNode \\| (props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "异步加载数据",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "loadedKeys": {
        "property": "loadedKeys",
        "description": "（受控）已经加载的节点，需要配合 `loadData` 使用",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "支持点选多个节点（节点本身）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "rootClassName": {
        "property": "rootClassName",
        "description": "添加在 Tree 最外层的 className",
        "type": "string",
        "default": "-",
        "version": "4.20.0"
      },
      "rootStyle": {
        "property": "rootStyle",
        "description": "添加在 Tree 最外层的 style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.20.0"
      },
      "selectable": {
        "property": "selectable",
        "description": "是否可选中",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "（受控）设置选中的树节点",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "showIcon": {
        "property": "showIcon",
        "description": "是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showLine": {
        "property": "showLine",
        "description": "是否展示连接线",
        "type": "boolean \\| {showLeafIcon: boolean \\| ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)}",
        "default": "false",
        "version": ""
      },
      "switcherIcon": {
        "property": "switcherIcon",
        "description": "自定义树节点的展开/折叠图标",
        "type": "ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)",
        "default": "-",
        "version": "renderProps: 4.20.0"
      },
      "titleRender": {
        "property": "titleRender",
        "description": "自定义渲染节点",
        "type": "(nodeData) => ReactNode",
        "default": "-",
        "version": "4.5.0"
      },
      "treeData": {
        "property": "treeData",
        "description": "treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（key 在整个树范围内唯一）",
        "type": "array&lt;{key, title, children, \\[disabled, selectable]}>",
        "default": "-",
        "version": ""
      },
      "virtual": {
        "property": "virtual",
        "description": "设置 false 时关闭虚拟滚动",
        "type": "boolean",
        "default": "true",
        "version": "4.1.0"
      },
      "onCheck": {
        "property": "onCheck",
        "description": "点击复选框触发",
        "type": "function(checkedKeys, e:{checked: bool, checkedNodes, node, event, halfCheckedKeys})",
        "default": "-",
        "version": ""
      },
      "onDragEnd": {
        "property": "onDragEnd",
        "description": "dragend 触发时调用",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragEnter": {
        "property": "onDragEnter",
        "description": "dragenter 触发时调用",
        "type": "function({event, node, expandedKeys})",
        "default": "-",
        "version": ""
      },
      "onDragLeave": {
        "property": "onDragLeave",
        "description": "dragleave 触发时调用",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragOver": {
        "property": "onDragOver",
        "description": "dragover 触发时调用",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragStart": {
        "property": "onDragStart",
        "description": "开始拖拽时调用",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDrop": {
        "property": "onDrop",
        "description": "drop 触发时调用",
        "type": "function({event, node, dragNode, dragNodesKeys})",
        "default": "-",
        "version": ""
      },
      "onExpand": {
        "property": "onExpand",
        "description": "展开/收起节点时触发",
        "type": "function(expandedKeys, {expanded: bool, node})",
        "default": "-",
        "version": ""
      },
      "onLoad": {
        "property": "onLoad",
        "description": "节点加载完毕时触发",
        "type": "function(loadedKeys, {event, node})",
        "default": "-",
        "version": ""
      },
      "onRightClick": {
        "property": "onRightClick",
        "description": "响应右键点击",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "点击树节点触发",
        "type": "function(selectedKeys, e:{selected: bool, selectedNodes, node, event})",
        "default": "-",
        "version": ""
      }
    },
    "TreeSelect": {
      "allowClear": {
        "property": "allowClear",
        "description": "显示清除按钮",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoClearSearchValue": {
        "property": "autoClearSearchValue",
        "description": "当多选模式下值被选择，自动清空搜索框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "是否显示边框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "指定默认选中的条目",
        "type": "string \\| string\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "下拉菜单的 className 属性",
        "type": "string",
        "default": "-",
        "version": "4.23.0"
      },
      "popupMatchSelectWidth": {
        "property": "popupMatchSelectWidth",
        "description": "下拉菜单和选择器同宽。默认将设置 `min-width`，当值小于选择框宽度时会被忽略。false 时会关闭虚拟滚动",
        "type": "boolean \\| number",
        "default": "true",
        "version": "5.5.0"
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "自定义下拉框内容",
        "type": "(originNode: ReactNode, props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "dropdownStyle": {
        "property": "dropdownStyle",
        "description": "下拉菜单的样式",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "自定义节点 label、value、children 的字段",
        "type": "object",
        "default": "{ label: `label`, value: `value`, children: `children` }",
        "version": "4.17.0"
      },
      "filterTreeNode": {
        "property": "filterTreeNode",
        "description": "是否根据输入项进行筛选，默认用 treeNodeFilterProp 的值作为要筛选的 TreeNode 的属性值",
        "type": "boolean \\| function(inputValue: string, treeNode: TreeNode) (函数需要返回 bool 值)",
        "default": "function",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。[示例](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "labelInValue": {
        "property": "labelInValue",
        "description": "是否把每个选项的 label 包装到 value 中，会把 value 类型从 `string` 变为 {value: string, label: ReactNode, halfChecked(treeCheckStrictly 时有效): string\\[] } 的格式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "listHeight": {
        "property": "listHeight",
        "description": "设置弹窗滚动高度",
        "type": "number",
        "default": "256",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "异步加载数据。在过滤时不会调用以防止网络堵塞，可参考 FAQ 获得更多内容",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "最多显示多少个 tag，响应式模式会对性能产生损耗",
        "type": "number \\| `responsive`",
        "default": "-",
        "version": "responsive: 4.10"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "隐藏 tag 时显示的内容",
        "type": "ReactNode \\| function(omittedValues)",
        "default": "-",
        "version": ""
      },
      "maxTagTextLength": {
        "property": "maxTagTextLength",
        "description": "最大显示的 tag 文本长度",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "支持多选（当设置 treeCheckable 时自动变为 true）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "当下拉列表为空时显示的内容",
        "type": "ReactNode",
        "default": "`Not Found`",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "选择框默认文字",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "选择框弹出的位置",
        "type": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "default": "bottomLeft",
        "version": ""
      },
      "searchValue": {
        "property": "searchValue",
        "description": "搜索框的值，可以通过 `onSearch` 获取用户输入",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "是否显示 `suffixIcon`",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "showCheckedStrategy": {
        "property": "showCheckedStrategy",
        "description": "配置 `treeCheckable` 时，定义选中项回填的方式。`TreeSelect.SHOW_ALL`: 显示所有选中节点(包括父节点)。`TreeSelect.SHOW_PARENT`: 只显示父节点(当父节点下所有子节点都选中时)。 默认只显示子节点",
        "type": "`TreeSelect.SHOW_ALL` \\| `TreeSelect.SHOW_PARENT` \\| `TreeSelect.SHOW_CHILD`",
        "default": "`TreeSelect.SHOW_CHILD`",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "是否支持搜索框",
        "type": "boolean",
        "default": "单选：false \\| 多选：true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "选择框大小",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "设置校验状态",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "自定义的选择框后缀图标, 多选模式下必须同时设置 `showArrow` 为 true",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "switcherIcon": {
        "property": "switcherIcon",
        "description": "自定义树节点的展开/折叠图标",
        "type": "ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)",
        "default": "-",
        "version": "renderProps: 4.20.0"
      },
      "tagRender": {
        "property": "tagRender",
        "description": "自定义 tag 内容，多选时生效",
        "type": "(props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "treeCheckable": {
        "property": "treeCheckable",
        "description": "显示 Checkbox",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeCheckStrictly": {
        "property": "treeCheckStrictly",
        "description": "`checkable` 状态下节点选择完全受控（父子节点选中状态不再关联），会使得 `labelInValue` 强制为 true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeData": {
        "property": "treeData",
        "description": "treeNodes 数据，如果设置则不需要手动构造 TreeNode 节点（value 在整个树范围内唯一）",
        "type": "array&lt;{value, title, children, \\[disabled, disableCheckbox, selectable, checkable]}>",
        "default": "\\[]",
        "version": ""
      },
      "treeDataSimpleMode": {
        "property": "treeDataSimpleMode",
        "description": "使用简单格式的 treeData，具体设置参考可设置的类型 (此时 treeData 应变为这样的数据结构: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...]， `pId` 是父节点的 id)",
        "type": "boolean \\| object&lt;{ id: string, pId: string, rootPId: string }>",
        "default": "false",
        "version": ""
      },
      "treeDefaultExpandAll": {
        "property": "treeDefaultExpandAll",
        "description": "默认展开所有树节点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeDefaultExpandedKeys": {
        "property": "treeDefaultExpandedKeys",
        "description": "默认展开的树节点",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "treeExpandAction": {
        "property": "treeExpandAction",
        "description": "点击节点 title 时的展开逻辑，可选：false \\| `click` \\| `doubleClick`",
        "type": "string \\| boolean",
        "default": "false",
        "version": "4.21.0"
      },
      "treeExpandedKeys": {
        "property": "treeExpandedKeys",
        "description": "设置展开的树节点",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "treeIcon": {
        "property": "treeIcon",
        "description": "是否展示 TreeNode title 前的图标，没有默认样式，如设置为 true，需要自行定义图标相关样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeLine": {
        "property": "treeLine",
        "description": "是否展示线条样式，请参考 [Tree - showLine](/components/tree-cn#components-tree-demo-line)",
        "type": "boolean \\| object",
        "default": "false",
        "version": "4.17.0"
      },
      "treeLoadedKeys": {
        "property": "treeLoadedKeys",
        "description": "（受控）已经加载的节点，需要配合 `loadData` 使用",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "treeNodeFilterProp": {
        "property": "treeNodeFilterProp",
        "description": "输入项过滤对应的 treeNode 属性",
        "type": "string",
        "default": "`value`",
        "version": ""
      },
      "treeNodeLabelProp": {
        "property": "treeNodeLabelProp",
        "description": "作为显示的 prop 设置",
        "type": "string",
        "default": "`title`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "指定当前选中的条目",
        "type": "string \\| string\\[]",
        "default": "-",
        "version": ""
      },
      "virtual": {
        "property": "virtual",
        "description": "设置 false 时关闭虚拟滚动",
        "type": "boolean",
        "default": "true",
        "version": "4.1.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "选中树节点时调用此函数",
        "type": "function(value, label, extra)",
        "default": "-",
        "version": ""
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "展开下拉菜单的回调",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "文本框值变化时的回调",
        "type": "function(value: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "被选中时调用",
        "type": "function(value, node, extra)",
        "default": "-",
        "version": ""
      },
      "onTreeExpand": {
        "property": "onTreeExpand",
        "description": "展示节点时调用",
        "type": "function(expandedKeys)",
        "default": "-",
        "version": ""
      }
    },
    "TreeSelect.TreeNode": {
      "checkable": {
        "property": "checkable",
        "description": "当树为 Checkbox 时，设置独立节点是否展示 Checkbox",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "disableCheckbox": {
        "property": "disableCheckbox",
        "description": "禁掉 Checkbox",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "isLeaf": {
        "property": "isLeaf",
        "description": "是否是叶子节点",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "此项必须设置（其值在整个树范围内唯一）",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "是否可选",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "树节点显示的内容",
        "type": "ReactNode",
        "default": "`---`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "默认根据此属性值进行筛选（其值在整个树范围内唯一）",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Tree.TreeNode": {
      "checkable": {
        "property": "checkable",
        "description": "当树为 checkable 时，设置独立节点是否展示 Checkbox",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "disableCheckbox": {
        "property": "disableCheckbox",
        "description": "禁掉 checkbox",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁掉响应",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "自定义图标。可接收组件，props 为当前节点 props",
        "type": "ReactNode \\| (props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "isLeaf": {
        "property": "isLeaf",
        "description": "设置为叶子节点 (设置了 `loadData` 时有效)。为 `false` 时会强制将其作为父节点",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！",
        "type": "string",
        "default": "(内部计算出的节点位置)",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "设置节点是否可被选中",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "标题",
        "type": "ReactNode",
        "default": "`---`",
        "version": ""
      }
    },
    "Tree.DirectoryTree": {
      "expandAction": {
        "property": "expandAction",
        "description": "目录展开逻辑，可选：false \\| `click` \\| `doubleClick`",
        "type": "string \\| boolean",
        "default": "`click`",
        "version": ""
      }
    },
    "Typography.Text": {
      "code": {
        "property": "code",
        "description": "添加代码样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "copyable": {
        "property": "copyable",
        "description": "是否可拷贝，为对象时可进行各种自定义",
        "type": "boolean \\| [copyable](#copyable)",
        "default": "false",
        "version": "[copyable](#copyable)"
      },
      "delete": {
        "property": "delete",
        "description": "添加删除线样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用文本",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "editable": {
        "property": "editable",
        "description": "是否可编辑，为对象时可对编辑进行控制",
        "type": "boolean \\| [editable](#editable)",
        "default": "false",
        "version": "[editable](#editable)"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "自动溢出省略，为对象时不能设置省略行数、是否可展开、onExpand 展开事件。不同于 Typography.Paragraph，Text 组件自身不带 100% 宽度样式，因而默认情况下初次缩略后宽度便不再变化。如果需要自适应宽度，请手工配置宽度样式",
        "type": "boolean \\| [Omit&lt;ellipsis, 'expandable' \\| 'rows' \\| 'onExpand'>](#ellipsis)",
        "default": "false",
        "version": "[ellipsis](#ellipsis)"
      },
      "keyboard": {
        "property": "keyboard",
        "description": "添加键盘样式",
        "type": "boolean",
        "default": "false",
        "version": "4.3.0"
      },
      "mark": {
        "property": "mark",
        "description": "添加标记样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击 Text 时的回调",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      "strong": {
        "property": "strong",
        "description": "是否加粗",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "italic": {
        "property": "italic",
        "description": "是否斜体",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      "type": {
        "property": "type",
        "description": "文本类型",
        "type": "`secondary` \\| `success` \\| `warning` \\| `danger`",
        "default": "-",
        "version": "success: 4.6.0"
      },
      "underline": {
        "property": "underline",
        "description": "添加下划线样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    },
    "Upload": {
      "accept": {
        "property": "accept",
        "description": "接受上传的文件类型, 详见 [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "action": {
        "property": "action",
        "description": "上传的地址",
        "type": "string \\| (file) => Promise&lt;string>",
        "default": "-",
        "version": ""
      },
      "beforeUpload": {
        "property": "beforeUpload",
        "description": "上传文件之前的钩子，参数为上传的文件，若返回 `false` 则停止上传。支持返回一个 Promise 对象，Promise 对象 reject 时则停止上传，resolve 时开始上传（ resolve 传入 `File` 或 `Blob` 对象则上传 resolve 传入对象）；也可以返回 `Upload.LIST_IGNORE`，此时列表中将不展示此文件。 **注意：IE9 不支持该方法**",
        "type": "(file, fileList) => boolean \\| Promise&lt;File> \\| `Upload.LIST_IGNORE`",
        "default": "-",
        "version": ""
      },
      "customRequest": {
        "property": "customRequest",
        "description": "通过覆盖默认的上传行为，可以自定义自己的上传实现",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "data": {
        "property": "data",
        "description": "上传所需额外参数或返回上传额外参数的方法",
        "type": "object\\|(file) => object \\| Promise&lt;object>",
        "default": "-",
        "version": ""
      },
      "defaultFileList": {
        "property": "defaultFileList",
        "description": "默认已经上传的文件列表",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "directory": {
        "property": "directory",
        "description": "支持上传文件夹（[caniuse](https://caniuse.com/#feat=input-file-directory)）",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "是否禁用",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "fileList": {
        "property": "fileList",
        "description": "已经上传的文件列表（受控），使用此参数时，如果遇到 `onChange` 只调用一次的问题，请参考 [#2423](https://github.com/ant-design/ant-design/issues/2423)",
        "type": "[UploadFile](#uploadfile)\\[]",
        "default": "-",
        "version": ""
      },
      "headers": {
        "property": "headers",
        "description": "设置上传的请求头部，IE10 以上有效",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "iconRender": {
        "property": "iconRender",
        "description": "自定义显示 icon",
        "type": "(file: UploadFile, listType?: UploadListType) => ReactNode",
        "default": "-",
        "version": ""
      },
      "isImageUrl": {
        "property": "isImageUrl",
        "description": "自定义缩略图是否使用 &lt;img /> 标签进行显示",
        "type": "(file: UploadFile) => boolean",
        "default": "[(内部实现)](https://github.com/ant-design/ant-design/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68)",
        "version": ""
      },
      "itemRender": {
        "property": "itemRender",
        "description": "自定义上传列表项",
        "type": "(originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode",
        "default": "-",
        "version": "4.16.0"
      },
      "listType": {
        "property": "listType",
        "description": "上传列表的内建样式，支持四种基本样式 `text`, `picture`, `picture-card` 和 `picture-circle`",
        "type": "string",
        "default": "`text`",
        "version": "`picture-circle`(5.2.0+)"
      },
      "maxCount": {
        "property": "maxCount",
        "description": "限制上传数量。当为 1 时，始终用最新上传的文件代替当前文件",
        "type": "number",
        "default": "-",
        "version": "4.10.0"
      },
      "method": {
        "property": "method",
        "description": "上传请求的 http method",
        "type": "string",
        "default": "`post`",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "是否支持多选文件，`ie10+` 支持。开启后按住 ctrl 可选择多个文件",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "发到后台的文件参数名",
        "type": "string",
        "default": "`file`",
        "version": ""
      },
      "openFileDialogOnClick": {
        "property": "openFileDialogOnClick",
        "description": "点击打开文件对话框",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "previewFile": {
        "property": "previewFile",
        "description": "自定义文件预览逻辑",
        "type": "(file: File \\| Blob) => Promise&lt;dataURL: string>",
        "default": "-",
        "version": ""
      },
      "progress": {
        "property": "progress",
        "description": "自定义进度条样式",
        "type": "[ProgressProps](/components/progress-cn#api)（仅支持 `type=\"line\"`）",
        "default": "{ strokeWidth: 2, showInfo: false }",
        "version": "4.3.0"
      },
      "showUploadList": {
        "property": "showUploadList",
        "description": "是否展示文件列表, 可设为一个对象，用于单独设定 `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` 和 `downloadIcon`",
        "type": "boolean \\| { showPreviewIcon?: boolean, showRemoveIcon?: boolean, showDownloadIcon?: boolean, previewIcon?: ReactNode \\| (file: UploadFile) => ReactNode, removeIcon?: ReactNode \\| (file: UploadFile) => ReactNode, downloadIcon?: ReactNode \\| (file: UploadFile) => ReactNode }",
        "default": "true",
        "version": "function: 4.7.0"
      },
      "withCredentials": {
        "property": "withCredentials",
        "description": "上传请求时是否携带 cookie",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "上传文件改变时的回调，详见 [onChange](#onchange)",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onDrop": {
        "property": "onDrop",
        "description": "当文件被拖入上传区域时执行的回调功能",
        "type": "(event: React.DragEvent) => void",
        "default": "-",
        "version": "4.16.0"
      },
      "onDownload": {
        "property": "onDownload",
        "description": "点击下载文件时的回调，如果没有指定，则默认跳转到文件 url 对应的标签页",
        "type": "function(file): void",
        "default": "(跳转新标签页)",
        "version": ""
      },
      "onPreview": {
        "property": "onPreview",
        "description": "点击文件链接或预览图标时的回调",
        "type": "function(file)",
        "default": "-",
        "version": ""
      },
      "onRemove  ": {
        "property": "onRemove  ",
        "description": "点击移除文件时的回调，返回值为 false 时不移除。支持返回一个 Promise 对象，Promise 对象 resolve(false) 或 reject 时不移除              ",
        "type": "function(file): boolean \\| Promise",
        "default": "-  ",
        "version": ""
      }
    },
    "Typography.Title": {
      "code": {
        "property": "code",
        "description": "添加代码样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "copyable": {
        "property": "copyable",
        "description": "是否可拷贝，为对象时可进行各种自定义",
        "type": "boolean \\| [copyable](#copyable)",
        "default": "false",
        "version": "[copyable](#copyable)"
      },
      "delete": {
        "property": "delete",
        "description": "添加删除线样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用文本",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "editable": {
        "property": "editable",
        "description": "是否可编辑，为对象时可对编辑进行控制",
        "type": "boolean \\| [editable](#editable)",
        "default": "false",
        "version": "[editable](#editable)"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等",
        "type": "boolean \\| [ellipsis](#ellipsis)",
        "default": "false",
        "version": "[ellipsis](#ellipsis)"
      },
      "level": {
        "property": "level",
        "description": "重要程度，相当于 `h1`、`h2`、`h3`、`h4`、`h5`",
        "type": "number: 1, 2, 3, 4, 5",
        "default": "1",
        "version": "5: 4.6.0"
      },
      "mark": {
        "property": "mark",
        "description": "添加标记样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击 Title 时的回调",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      "italic": {
        "property": "italic",
        "description": "是否斜体",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      "type": {
        "property": "type",
        "description": "文本类型",
        "type": "`secondary` \\| `success` \\| `warning` \\| `danger`",
        "default": "-",
        "version": "success: 4.6.0"
      },
      "underline": {
        "property": "underline",
        "description": "添加下划线样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    },
    "ColorPicker": {
      "format": {
        "property": "format",
        "description": "颜色格式",
        "type": "`rgb` \\| `hex` \\| `hsb`",
        "default": "`hex`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "颜色的值",
        "type": "string \\| `Color`",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "颜色默认的值",
        "type": "string \\| `Color`",
        "default": "-",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "允许清除选择的颜色",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "presets": {
        "property": "presets",
        "description": "预设的颜色",
        "type": "`{ label: ReactNode, colors: Array<string \\| Color> }[]`",
        "default": "-",
        "version": ""
      },
      "children": {
        "property": "children",
        "description": "颜色选择器的触发器",
        "type": "React.ReactNode",
        "default": "-",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "颜色选择器的触发模式",
        "type": "`hover` \\| `click`",
        "default": "`click`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "是否显示弹出窗口",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用颜色选择器",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "弹出窗口的位置",
        "type": "`top` \\| `topLeft` \\| `topRight` \\| `bottom` \\| `bottomLeft` \\| `bottomRight`",
        "default": "`bottomLeft`",
        "version": ""
      },
      "arrow": {
        "property": "arrow",
        "description": "配置弹出的箭头",
        "type": "`boolean \\| { pointAtCenter: boolean }`",
        "default": "`true`",
        "version": "-"
      },
      "onChange": {
        "property": "onChange",
        "description": "颜色变化的回调",
        "type": "`(value: Color, hex: string) => void`",
        "default": "-",
        "version": ""
      },
      "onFormatChange": {
        "property": "onFormatChange",
        "description": "颜色格式变化的回调",
        "type": "`(format: 'hex' \\| 'rgb' \\| 'hsb') => void`",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "当 `open` 被改变时的回调",
        "type": "`(open: boolean) => void`",
        "default": "-",
        "version": ""
      },
      "onClear": {
        "property": "onClear",
        "description": "清除的回调",
        "type": "`() => void`",
        "default": "-",
        "version": ""
      }
    },
    "Typography.Paragraph": {
      "code": {
        "property": "code",
        "description": "添加代码样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "copyable": {
        "property": "copyable",
        "description": "是否可拷贝，为对象时可进行各种自定义",
        "type": "boolean \\| [copyable](#copyable)",
        "default": "false",
        "version": "[copyable](#copyable)"
      },
      "delete": {
        "property": "delete",
        "description": "添加删除线样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "禁用文本",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "editable": {
        "property": "editable",
        "description": "是否可编辑，为对象时可对编辑进行控制",
        "type": "boolean \\| [editable](#editable)",
        "default": "false",
        "version": "[editable](#editable)"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "自动溢出省略，为对象时可设置省略行数、是否可展开、添加后缀等",
        "type": "boolean \\| [ellipsis](#ellipsis)",
        "default": "false",
        "version": "[ellipsis](#ellipsis)"
      },
      "mark": {
        "property": "mark",
        "description": "添加标记样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "点击 Paragraph 时的回调",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      "strong": {
        "property": "strong",
        "description": "是否加粗",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "italic": {
        "property": "italic",
        "description": "是否斜体",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      "type": {
        "property": "type",
        "description": "文本类型",
        "type": "`secondary` \\| `success` \\| `warning` \\| `danger`",
        "default": "-",
        "version": "success: 4.6.0"
      },
      "underline": {
        "property": "underline",
        "description": "添加下划线样式",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    }
  },
  "en": {
    "Affix": {
      "offsetBottom": {
        "property": "offsetBottom",
        "description": "Offset from the bottom of the viewport (in pixels)",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "offsetTop": {
        "property": "offsetTop",
        "description": "Offset from the top of the viewport (in pixels)",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "Specifies the scrollable area DOM node",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback for when Affix state is changed",
        "type": "(affixed?: boolean) => void",
        "default": "-",
        "version": ""
      }
    },
    "Alert": {
      "action": {
        "property": "action",
        "description": "The action of Alert",
        "type": "ReactNode",
        "default": "-",
        "version": "4.9.0"
      },
      "afterClose": {
        "property": "afterClose",
        "description": "Called when close animation is finished",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "banner": {
        "property": "banner",
        "description": "Whether to show as banner",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "Whether Alert can be closed",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "closeText": {
        "property": "closeText",
        "description": "Close text to show",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "Custom close icon",
        "type": "ReactNode",
        "default": "`<CloseOutlined />`",
        "version": "4.18.0"
      },
      "description": {
        "property": "description",
        "description": "Additional content of Alert",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Custom icon, effective when `showIcon` is true",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "message": {
        "property": "message",
        "description": "Content of Alert",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "showIcon": {
        "property": "showIcon",
        "description": "Whether to show icon",
        "type": "boolean",
        "default": "false, in `banner` mode default is true",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Type of Alert styles, options: `success`, `info`, `warning`, `error`",
        "type": "string",
        "default": "`info`, in `banner` mode default is `warning`",
        "version": ""
      },
      "onClose": {
        "property": "onClose",
        "description": "Callback when Alert is closed",
        "type": "(e: MouseEvent) => void",
        "default": "-",
        "version": ""
      }
    },
    "Alert.ErrorBoundary": {
      "description": {
        "property": "description",
        "description": "Custom error description to show",
        "type": "ReactNode",
        "default": "{{ error stack }}",
        "version": ""
      },
      "message": {
        "property": "message",
        "description": "Custom error message to show",
        "type": "ReactNode",
        "default": "{{ error }}",
        "version": ""
      }
    },
    "AutoComplete": {
      "allowClear": {
        "property": "allowClear",
        "description": "Show clear button",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "backfill": {
        "property": "backfill",
        "description": "If backfill selected item the input when using keyboard",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "children (for customize input element)": {
        "property": "children (for customize input element)",
        "description": "Customize input element",
        "type": "HTMLInputElement \\| HTMLTextAreaElement \\| React.ReactElement&lt;InputProps>",
        "default": "&lt;Input />",
        "version": ""
      },
      "children (for dataSource)": {
        "property": "children (for dataSource)",
        "description": "Data source to auto complete",
        "type": "React.ReactElement&lt;OptionProps> \\| Array&lt;React.ReactElement&lt;OptionProps>>",
        "default": "-",
        "version": ""
      },
      "defaultActiveFirstOption": {
        "property": "defaultActiveFirstOption",
        "description": "Whether active first option by default",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "Initial open state of dropdown",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "Initial selected option",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether disabled select",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "The className of dropdown menu",
        "type": "string",
        "default": "-",
        "version": "4.23.0"
      },
      "dropdownMatchSelectWidth": {
        "property": "dropdownMatchSelectWidth",
        "description": "Determine whether the dropdown menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll",
        "type": "boolean \\| number",
        "default": "true",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded",
        "type": "boolean \\| function(inputValue, option)",
        "default": "true",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "Specify content to show when no result matches",
        "type": "string",
        "default": "`Not Found`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Controlled open state of dropdown",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "Select options. Will get better perf than jsx definition",
        "type": "{ label, value }\\[]",
        "default": "-",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "The placeholder of input",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "value": {
        "property": "value",
        "description": "Selected option",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "Called when leaving the component",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Called when selecting an option or changing an input value",
        "type": "function(value)",
        "default": "-",
        "version": ""
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "Call when dropdown open",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "Called when entering the component",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "Called when searching items",
        "type": "function(value)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Called when a option is selected. param is option's value and option instance",
        "type": "function(value, option)",
        "default": "-",
        "version": ""
      },
      "onClear": {
        "property": "onClear",
        "description": "Called when clear",
        "type": "function",
        "default": "-",
        "version": "4.6.0"
      }
    },
    "Avatar": {
      "alt": {
        "property": "alt",
        "description": "This attribute defines the alternative text describing the image",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "gap": {
        "property": "gap",
        "description": "Letter type unit distance between left and right sides",
        "type": "number",
        "default": "4",
        "version": "4.3.0"
      },
      "icon": {
        "property": "icon",
        "description": "Custom icon type for an icon avatar",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "shape": {
        "property": "shape",
        "description": "The shape of avatar",
        "type": "`circle` \\| `square`",
        "default": "`circle`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "The size of the avatar",
        "type": "number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...}",
        "default": "`default`",
        "version": "4.7.0"
      },
      "src": {
        "property": "src",
        "description": "The address of the image for an image avatar or image element",
        "type": "string \\| ReactNode",
        "default": "-",
        "version": "ReactNode: 4.8.0"
      },
      "srcSet": {
        "property": "srcSet",
        "description": "A list of sources to use for different screen resolutions",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "draggable": {
        "property": "draggable",
        "description": "Whether the picture is allowed to be dragged",
        "type": "boolean \\| `'true'` \\| `'false'`",
        "default": "true",
        "version": ""
      },
      "crossOrigin": {
        "property": "crossOrigin",
        "description": "CORS settings attributes",
        "type": "`'anonymous'` \\| `'use-credentials'` \\| `''`",
        "default": "-",
        "version": "4.17.0"
      },
      "onError": {
        "property": "onError",
        "description": "Handler when img load error, return false to prevent default fallback behavior",
        "type": "() => boolean",
        "default": "-",
        "version": ""
      }
    },
    "Anchor.Link": {
      "href": {
        "property": "href",
        "description": "The target of hyperlink",
        "type": "string",
        "default": "",
        "version": ""
      },
      "target": {
        "property": "target",
        "description": "Specifies where to display the linked URL",
        "type": "string",
        "default": "",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "The content of hyperlink",
        "type": "ReactNode",
        "default": "",
        "version": ""
      }
    },
    "Anchor": {
      "affix": {
        "property": "affix",
        "description": "Fixed mode of Anchor",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "bounds": {
        "property": "bounds",
        "description": "Bounding distance of anchor area",
        "type": "number",
        "default": "5",
        "version": ""
      },
      "getContainer": {
        "property": "getContainer",
        "description": "Scrolling container",
        "type": "() => HTMLElement",
        "default": "() => window",
        "version": ""
      },
      "getCurrentAnchor": {
        "property": "getCurrentAnchor",
        "description": "Customize the anchor highlight",
        "type": "(activeLink: string) => string",
        "default": "-",
        "version": ""
      },
      "offsetTop": {
        "property": "offsetTop",
        "description": "Pixels to offset from top when calculating position of scroll",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "showInkInFixed": {
        "property": "showInkInFixed",
        "description": "Whether show ink-square when `affix={false}`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "targetOffset": {
        "property": "targetOffset",
        "description": "Anchor scroll offset, default as `offsetTop`, [example](#components-anchor-demo-targetoffset)",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Listening for anchor link change",
        "type": "(currentActiveLink: string) => void",
        "default": "",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "Set the handler to handle `click` event",
        "type": "(e: MouseEvent, link: object) => void",
        "default": "-",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "Data configuration option content, support nesting through children",
        "type": "{ key, href, title, target, children }\\[] [see](#anchoritem)",
        "default": "-",
        "version": "5.1.0"
      },
      "direction": {
        "property": "direction",
        "description": "Set Anchor direction",
        "type": "`vertical` \\| `horizontal`",
        "default": "`vertical`",
        "version": "5.2.0"
      }
    },
    "Avatar.Group": {
      "maxCount": {
        "property": "maxCount",
        "description": "Max avatars to show",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "maxPopoverPlacement": {
        "property": "maxPopoverPlacement",
        "description": "The placement of excess avatar Popover",
        "type": "`top` \\| `bottom`",
        "default": "`top`",
        "version": ""
      },
      "maxPopoverTrigger": {
        "property": "maxPopoverTrigger",
        "description": "Set the trigger of excess avatar Popover",
        "type": "`hover` \\| `focus` \\| `click`",
        "default": "`hover`",
        "version": "4.17.0"
      },
      "maxStyle": {
        "property": "maxStyle",
        "description": "The style of excess avatar style",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "The size of the avatar",
        "type": "number \\| `large` \\| `small` \\| `default` \\| { xs: number, sm: number, ...}",
        "default": "`default`",
        "version": "4.8.0"
      }
    },
    "Badge": {
      "color": {
        "property": "color",
        "description": "Customize Badge dot color",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "count": {
        "property": "count",
        "description": "Number to show in badge",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "dot": {
        "property": "dot",
        "description": "Whether to display a red dot instead of `count`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "offset": {
        "property": "offset",
        "description": "Set offset of the badge dot",
        "type": "\\[number, number]",
        "default": "-",
        "version": ""
      },
      "overflowCount": {
        "property": "overflowCount",
        "description": "Max count to show",
        "type": "number",
        "default": "99",
        "version": ""
      },
      "showZero": {
        "property": "showZero",
        "description": "Whether to show badge when `count` is zero",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "If `count` is set, `size` sets the size of badge",
        "type": "`default` \\| `small`",
        "default": "-",
        "version": "4.6.0"
      },
      "status": {
        "property": "status",
        "description": "Set Badge as a status dot",
        "type": "`success` \\| `processing` \\| `default` \\| `error` \\| `warning`",
        "default": "-",
        "version": ""
      },
      "text": {
        "property": "text",
        "description": "If `status` is set, `text` sets the display text of the status `dot`",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Text to show when hovering over the badge",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Breadcrumb": {
      "itemRender": {
        "property": "itemRender",
        "description": "Custom item renderer",
        "type": "(route, params, routes, paths) => ReactNode",
        "default": "-",
        "version": ""
      },
      "params": {
        "property": "params",
        "description": "Routing parameters",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "The routing stack information of router",
        "type": "[items\\[\\]](#ItemType)",
        "default": "-",
        "version": "5.3.0"
      },
      "separator": {
        "property": "separator",
        "description": "Custom separator",
        "type": "ReactNode",
        "default": "`/`",
        "version": ""
      }
    },
    "Badge.Ribbon": {
      "color": {
        "property": "color",
        "description": "Customize Ribbon color",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "The placement of the Ribbon, `start` and `end` follow text direction (RTL or LTR)",
        "type": "`start` \\| `end`",
        "default": "`end`",
        "version": ""
      },
      "text": {
        "property": "text",
        "description": "Content inside the Ribbon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Calendar": {
      "dateCellRender": {
        "property": "dateCellRender",
        "description": "Customize the display of the date cell, the returned content will be appended to the cell",
        "type": "function(date: Dayjs): ReactNode",
        "default": "-",
        "version": ""
      },
      "dateFullCellRender": {
        "property": "dateFullCellRender",
        "description": "Customize the display of the date cell, the returned content will override the cell",
        "type": "function(date: Dayjs): ReactNode",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The date selected by default",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "disabledDate": {
        "property": "disabledDate",
        "description": "Function that specifies the dates that cannot be selected, `currentDate` is same dayjs object as `value` prop which you shouldn't mutate it](<https://github.com/ant-design/ant-design/issues/30987>)",
        "type": "(currentDate: Dayjs) => boolean",
        "default": "-",
        "version": ""
      },
      "fullscreen": {
        "property": "fullscreen",
        "description": "Whether to display in full-screen",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "headerRender": {
        "property": "headerRender",
        "description": "Render custom header in panel",
        "type": "function(object:{value: Dayjs, type: string, onChange: f(), onTypeChange: f()})",
        "default": "-",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "The calendar's locale",
        "type": "object",
        "default": "[(default)](https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json)",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "The display mode of the calendar",
        "type": "`month` \\| `year`",
        "default": "`month`",
        "version": ""
      },
      "monthCellRender": {
        "property": "monthCellRender",
        "description": "Customize the display of the month cell, the returned content will be appended to the cell",
        "type": "function(date: Dayjs): ReactNode",
        "default": "-",
        "version": ""
      },
      "monthFullCellRender": {
        "property": "monthFullCellRender",
        "description": "Customize the display of the month cell, the returned content will override the cell",
        "type": "function(date: Dayjs): ReactNode",
        "default": "-",
        "version": ""
      },
      "validRange": {
        "property": "validRange",
        "description": "To set valid range",
        "type": "\\[[dayjs](https://day.js.org/), [dayjs](https://day.js.org/)]",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "The current selected date",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback for when date changes",
        "type": "function(date: Dayjs)",
        "default": "-",
        "version": ""
      },
      "onPanelChange": {
        "property": "onPanelChange",
        "description": "Callback for when panel changes",
        "type": "function(date: Dayjs, mode: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Callback for when a date is selected, include source info",
        "type": "function(date: Dayjs, info: { source: 'year' \\| 'month' \\| 'date' \\| 'customize' })",
        "default": "-",
        "version": "`info`: 5.6.0"
      }
    },
    "Button": {
      "block": {
        "property": "block",
        "description": "Option to fit button width to its parent width",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "classNames": {
        "property": "classNames",
        "description": "Semantic DOM class",
        "type": "Record&lt;SemanticDOM, string>",
        "default": "-",
        "version": "5.4.0"
      },
      "danger": {
        "property": "danger",
        "description": "Set the danger status of button",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled state of button",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "ghost": {
        "property": "ghost",
        "description": "Make background transparent and invert text and border colors",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "href": {
        "property": "href",
        "description": "Redirect url of link button",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "htmlType": {
        "property": "htmlType",
        "description": "Set the original html `type` of `button`, see: [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type)",
        "type": "string",
        "default": "`button`",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Set the icon component of button",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Set the loading status of button",
        "type": "boolean \\| { delay: number }",
        "default": "false",
        "version": ""
      },
      "shape": {
        "property": "shape",
        "description": "Can be set button shape",
        "type": "`default` \\| `circle` \\| `round`",
        "default": "`default`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Set the size of button",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`middle`",
        "version": ""
      },
      "styles": {
        "property": "styles",
        "description": "Semantic DOM style",
        "type": "Record&lt;SemanticDOM, CSSProperties>",
        "default": "-",
        "version": "5.4.0"
      },
      "target": {
        "property": "target",
        "description": "Same as target attribute of a, works when href is specified",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Can be set to `primary` `ghost` `dashed` `link` `text` `default`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "Set the handler to handle `click` event",
        "type": "(event: MouseEvent) => void",
        "default": "-",
        "version": ""
      }
    },
    "Carousel": {
      "autoplay": {
        "property": "autoplay",
        "description": "Whether to scroll automatically",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dotPosition": {
        "property": "dotPosition",
        "description": "The position of the dots, which can be one of `top` `bottom` `left` `right`",
        "type": "string",
        "default": "`bottom`",
        "version": ""
      },
      "dots": {
        "property": "dots",
        "description": "Whether to show the dots at the bottom of the gallery, `object` for `dotsClass` and any others",
        "type": "boolean \\| { className?: string }",
        "default": "true",
        "version": ""
      },
      "waitForAnimate": {
        "property": "waitForAnimate",
        "description": "Whether to wait for the animation when switching",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "easing": {
        "property": "easing",
        "description": "Transition interpolation function name",
        "type": "string",
        "default": "`linear`",
        "version": ""
      },
      "effect": {
        "property": "effect",
        "description": "Transition effect",
        "type": "`scrollx` \\| `fade`",
        "default": "`scrollx`",
        "version": ""
      },
      "afterChange": {
        "property": "afterChange",
        "description": "Callback function called after the current index changes",
        "type": "(current: number) => void",
        "default": "-",
        "version": ""
      },
      "beforeChange": {
        "property": "beforeChange",
        "description": "Callback function called before the current index changes",
        "type": "(current: number, next: number) => void",
        "default": "-",
        "version": ""
      }
    },
    "Card": {
      "actions": {
        "property": "actions",
        "description": "The action list, shows at the bottom of the Card",
        "type": "Array&lt;ReactNode>",
        "default": "-",
        "version": ""
      },
      "activeTabKey": {
        "property": "activeTabKey",
        "description": "Current TabPane's key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "Inline style to apply to the card content",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Toggles rendering of the border around the card",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "cover": {
        "property": "cover",
        "description": "Card cover",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "defaultActiveTabKey": {
        "property": "defaultActiveTabKey",
        "description": "Initial active TabPane's key, if `activeTabKey` is not set",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "Content to render in the top-right corner of the card",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "headStyle": {
        "property": "headStyle",
        "description": "Inline style to apply to the card head",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "hoverable": {
        "property": "hoverable",
        "description": "Lift up when hovering card",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Shows a loading indicator while the contents of the card are being fetched",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Size of card",
        "type": "`default` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "tabBarExtraContent": {
        "property": "tabBarExtraContent",
        "description": "Extra content in tab bar",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "tabList": {
        "property": "tabList",
        "description": "List of TabPane's head",
        "type": "[TabItemType](/components/tabs#tabitemtype)\\[]",
        "default": "-",
        "version": ""
      },
      "tabProps": {
        "property": "tabProps",
        "description": "[Tabs](/components/tabs/#tabs)",
        "type": "-",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Card title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Card style type, can be set to `inner` or not set",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onTabChange": {
        "property": "onTabChange",
        "description": "Callback when tab is switched",
        "type": "(key) => void",
        "default": "-",
        "version": ""
      }
    },
    "Card.Grid": {
      "className": {
        "property": "className",
        "description": "The className of container",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hoverable": {
        "property": "hoverable",
        "description": "Lift up when hovering card grid",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "The style object of container",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Card.Meta": {
      "avatar": {
        "property": "avatar",
        "description": "Avatar or icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "The className of container",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "Description content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "The style object of container",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Title content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Cascader": {
      "allowClear": {
        "property": "allowClear",
        "description": "Whether allow clear",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "The custom clear icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "changeOnSelect": {
        "property": "changeOnSelect",
        "description": "(Work on single select) Change value on each selection if set to true, see above demo for details",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "The additional css class",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "Initial selected value",
        "type": "string\\[] \\| number\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether disabled select",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "displayRender": {
        "property": "displayRender",
        "description": "The render function of displaying selected options",
        "type": "(label, selectedOptions) => ReactNode",
        "default": "label => label.join(`/`)",
        "version": "`multiple`: 4.18.0"
      },
      "tagRender": {
        "property": "tagRender",
        "description": "Custom render function for tags in `multiple` mode",
        "type": "(label: string, onClose: function, value: string) => ReactNode",
        "default": "-",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "The additional className of popup overlay",
        "type": "string",
        "default": "-",
        "version": "4.23.0"
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "Customize dropdown content",
        "type": "(menus: ReactNode) => ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "Customize the current item expand icon",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      "expandTrigger": {
        "property": "expandTrigger",
        "description": "expand current item when click or hover, one of `click` `hover`",
        "type": "string",
        "default": "`click`",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "Custom field name for label and value and children",
        "type": "object",
        "default": "{ label: `label`, value: `value`, children: `children` }",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "To load option lazily, and it cannot work with `showSearch`",
        "type": "(selectedOptions) => void",
        "default": "-",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "Max tag count to show. `responsive` will cost render performance",
        "type": "number \\| `responsive`",
        "default": "-",
        "version": "4.17.0"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "Placeholder for not showing tags",
        "type": "ReactNode \\| function(omittedValues)",
        "default": "-",
        "version": "4.17.0"
      },
      "maxTagTextLength": {
        "property": "maxTagTextLength",
        "description": "Max tag text length to show",
        "type": "number",
        "default": "-",
        "version": "4.17.0"
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "Specify content to show when no result matches",
        "type": "string",
        "default": "`Not Found`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Set visible of cascader popup",
        "type": "boolean",
        "default": "-",
        "version": "4.17.0"
      },
      "options": {
        "property": "options",
        "description": "The data options of cascade",
        "type": "[Option](#option)\\[]",
        "default": "-",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "The input placeholder",
        "type": "string",
        "default": "`Please select`",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "Use preset popup align config from builtinPlacements",
        "type": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "default": "`bottomLeft`",
        "version": "4.17.0"
      },
      "showSearch": {
        "property": "showSearch",
        "description": "Whether show search input in single mode",
        "type": "boolean \\| [Object](#showsearch)",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "The input size",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "style": {
        "property": "style",
        "description": "The additional style",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "The selected value",
        "type": "string\\[] \\| number\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback when finishing cascader select",
        "type": "(value, selectedOptions) => void",
        "default": "-",
        "version": ""
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "Callback when popup shown or hidden",
        "type": "(value) => void",
        "default": "-",
        "version": "4.17.0"
      },
      "multiple": {
        "property": "multiple",
        "description": "Support multiple or not",
        "type": "boolean",
        "default": "-",
        "version": "4.17.0"
      },
      "removeIcon": {
        "property": "removeIcon",
        "description": "The custom remove icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "showCheckedStrategy": {
        "property": "showCheckedStrategy",
        "description": "The way show selected item in box. ** `SHOW_CHILD`: ** just show child treeNode. **`Cascader.SHOW_PARENT`:** just show parent treeNode (when all child treeNode under the parent treeNode are checked)",
        "type": "`Cascader.SHOW_PARENT` \\| `Cascader.SHOW_CHILD`",
        "default": "`Cascader.SHOW_PARENT`",
        "version": "4.20.0"
      },
      "searchValue": {
        "property": "searchValue",
        "description": "Set search value，Need work with `showSearch`",
        "type": "string",
        "default": "-",
        "version": "4.17.0"
      },
      "onSearch": {
        "property": "onSearch",
        "description": "The callback function triggered when input changed",
        "type": "(search: string) => void",
        "default": "-",
        "version": "4.17.0"
      },
      "dropdownMenuColumnStyle": {
        "property": "dropdownMenuColumnStyle",
        "description": "The style of the drop-down menu column",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "loadingIcon": {
        "property": "loadingIcon",
        "description": "The appearance of lazy loading (now is useless)",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Checkbox": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "Specifies whether the checkbox is selected",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "Specifies the initial state: whether or not the checkbox is selected",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "If disable checkbox",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "indeterminate": {
        "property": "indeterminate",
        "description": "The indeterminate checked state of checkbox",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "The callback function that is triggered when the state changes",
        "type": "(e: CheckboxChangeEvent) => void",
        "default": "-",
        "version": ""
      }
    },
    "DatePicker": {
      "defaultPickerValue": {
        "property": "defaultPickerValue",
        "description": "To set default picker date",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "To set default date, if start time or end time is null or undefined, the date range will be an open interval",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "disabledTime": {
        "property": "disabledTime",
        "description": "To specify the time that cannot be selected",
        "type": "function(date)",
        "default": "-",
        "version": ""
      },
      "format": {
        "property": "format",
        "description": "To set the date format. refer to [dayjs#format](https://day.js.org/docs/en/display/format)",
        "type": "[formatType](#formattype)",
        "default": "`YYYY-MM-DD`",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "Render extra footer in panel",
        "type": "(mode) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "showNow": {
        "property": "showNow",
        "description": "Whether to show 'Now' button on panel when `showTime` is set",
        "type": "boolean",
        "default": "-",
        "version": "4.4.0"
      },
      "showTime": {
        "property": "showTime",
        "description": "To provide an additional time selection",
        "type": "object \\| boolean",
        "default": "[TimePicker Options](/components/time-picker/#api)",
        "version": ""
      },
      "showTime.defaultValue": {
        "property": "showTime.defaultValue",
        "description": "To set default time of selected date, [demo](#components-date-picker-demo-disabled-date)",
        "type": "[dayjs](https://day.js.org/)",
        "default": "dayjs()",
        "version": ""
      },
      "showToday": {
        "property": "showToday",
        "description": "Whether to show `Today` button",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "To set date",
        "type": "[dayjs](https://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback function, can be executed when the selected time is changing",
        "type": "function(date: dayjs, dateString: string)",
        "default": "-",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "Callback when click ok button",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onPanelChange": {
        "property": "onPanelChange",
        "description": "Callback function for panel changing",
        "type": "function(value, mode)",
        "default": "-",
        "version": ""
      }
    },
    "Checkbox.Group": {
      "defaultValue": {
        "property": "defaultValue",
        "description": "Default selected value",
        "type": "(string \\| number)\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "If disable all checkboxes",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "The `name` property of all `input[type=\"checkbox\"]` children",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "Specifies options",
        "type": "string\\[] \\| number\\[] \\| Option\\[]",
        "default": "\\[]",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Used for setting the currently selected value",
        "type": "(string \\| number \\| boolean)\\[]",
        "default": "\\[]",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "The callback function that is triggered when the state changes",
        "type": "(checkedValue: CheckboxValueType\\[]) => void",
        "default": "-",
        "version": ""
      }
    },
    "Collapse": {
      "accordion": {
        "property": "accordion",
        "description": "If true, Collapse renders as Accordion",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "activeKey": {
        "property": "activeKey",
        "description": "Key of the active panel",
        "type": "string\\[] \\| string <br/> number\\[] \\| number",
        "default": "No default value. In `accordion` mode, it's the key of the first panel",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Toggles rendering of the border around the collapse block",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "collapsible": {
        "property": "collapsible",
        "description": "Specify whether the panels of children be collapsible or the trigger area of collapsible",
        "type": "`header` \\| `icon` \\| `disabled`",
        "default": "-",
        "version": "4.9.0"
      },
      "defaultActiveKey": {
        "property": "defaultActiveKey",
        "description": "Key of the initial active panel",
        "type": "string\\[] \\| string <br/> number\\[] \\| number",
        "default": "-",
        "version": ""
      },
      "destroyInactivePanel": {
        "property": "destroyInactivePanel",
        "description": "Destroy Inactive Panel",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "Allow to customize collapse icon",
        "type": "(panelProps) => ReactNode",
        "default": "-",
        "version": ""
      },
      "expandIconPosition": {
        "property": "expandIconPosition",
        "description": "Set expand icon position",
        "type": "`start` \\| `end`",
        "default": "-",
        "version": "4.21.0"
      },
      "ghost": {
        "property": "ghost",
        "description": "Make the collapse borderless and its background transparent",
        "type": "boolean",
        "default": "false",
        "version": "4.4.0"
      },
      "size": {
        "property": "size",
        "description": "Set the size of collapse",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`middle`",
        "version": "5.2.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback function executed when active panel is changed",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "collapse items content",
        "type": "[ItemType](https://github.com/react-component/collapse/blob/27250ca5415faab16db412b9bff2c131bb4f32fc/src/interface.ts#L6)",
        "default": "-",
        "version": "5.6.0"
      }
    },
    "Collapse.Panel": {
      "collapsible": {
        "property": "collapsible",
        "description": "Specify whether the panel be collapsible or the trigger area of collapsible",
        "type": "`header` \\| `icon` \\| `disabled`",
        "default": "-",
        "version": "4.9.0 (icon: 4.24.0)"
      },
      "extra": {
        "property": "extra",
        "description": "The extra element in the corner",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "Forced render of content on panel, instead of lazy rendering after clicking on header",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "header": {
        "property": "header",
        "description": "Title of the panel",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Unique key identifying the panel from among its siblings",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "If false, panel will not show arrow icon. If false, collapsible can't be set as icon",
        "type": "boolean",
        "default": "true",
        "version": ""
      }
    },
    "Descriptions": {
      "bordered": {
        "property": "bordered",
        "description": "Whether to display the border",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "colon": {
        "property": "colon",
        "description": "Change default props `colon` value of Descriptions.Item",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "column": {
        "property": "column",
        "description": "The number of `DescriptionItems` in a row,could be a number or a object like `{ xs: 8, sm: 16, md: 24}`,(Only set `bordered={true}` to take effect)",
        "type": "number",
        "default": "3",
        "version": ""
      },
      "contentStyle": {
        "property": "contentStyle",
        "description": "Customize content style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.10.0"
      },
      "extra": {
        "property": "extra",
        "description": "The action area of the description list, placed at the top-right",
        "type": "ReactNode",
        "default": "-",
        "version": "4.5.0"
      },
      "labelStyle": {
        "property": "labelStyle",
        "description": "Customize label style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.10.0"
      },
      "layout": {
        "property": "layout",
        "description": "Define description layout",
        "type": "`horizontal` \\| `vertical`",
        "default": "`horizontal`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Set the size of the list. Can be set to `middle`,`small`, or not filled",
        "type": "`default` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "The title of the description list, placed at the top",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Divider": {
      "children": {
        "property": "children",
        "description": "The wrapped title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "The className of container",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "dashed": {
        "property": "dashed",
        "description": "Whether line is dashed",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "orientation": {
        "property": "orientation",
        "description": "The position of title inside divider",
        "type": "`left` \\| `right` \\| `center`",
        "default": "`center`",
        "version": ""
      },
      "orientationMargin": {
        "property": "orientationMargin",
        "description": "The margin-left/right between the title and its closest border, while the `orientation` must be `left` or `right`, If a numeric value of type `string` is provided without a unit, it is assumed to be in pixels (px) by default.",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "plain": {
        "property": "plain",
        "description": "Divider text show as plain style",
        "type": "boolean",
        "default": "true",
        "version": "4.2.0"
      },
      "style": {
        "property": "style",
        "description": "The style object of container",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "The direction type of divider",
        "type": "`horizontal` \\| `vertical`",
        "default": "`horizontal`",
        "version": ""
      }
    },
    "Descriptions.Item": {
      "contentStyle": {
        "property": "contentStyle",
        "description": "Customize content style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.9.0"
      },
      "label": {
        "property": "label",
        "description": "The description of the content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "labelStyle": {
        "property": "labelStyle",
        "description": "Customize label style",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.9.0"
      },
      "span": {
        "property": "span",
        "description": "The number of columns included",
        "type": "number",
        "default": "1",
        "version": ""
      }
    },
    "Dropdown": {
      "arrow": {
        "property": "arrow",
        "description": "Whether the dropdown arrow should be visible",
        "type": "boolean \\| { pointAtCenter: boolean }",
        "default": "false",
        "version": ""
      },
      "autoAdjustOverflow": {
        "property": "autoAdjustOverflow",
        "description": "Whether to adjust dropdown placement automatically when dropdown is off screen",
        "type": "boolean",
        "default": "true",
        "version": "5.2.0"
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "Focus element in `overlay` when opened",
        "type": "boolean",
        "default": "false",
        "version": "4.21.0"
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether the dropdown menu is disabled",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "destroyPopupOnHide": {
        "property": "destroyPopupOnHide",
        "description": "Whether destroy dropdown when hidden",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "Customize dropdown content",
        "type": "(menus: ReactNode) => ReactNode",
        "default": "-",
        "version": "4.24.0"
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "To set the container of the dropdown menu. The default is to create a div element in body, but you can reset it to the scrolling area and make a relative reposition. [Example on CodePen](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "(triggerNode: HTMLElement) => HTMLElement",
        "default": "() => document.body",
        "version": ""
      },
      "menu": {
        "property": "menu",
        "description": "The menu props",
        "type": "[MenuProps](/components/menu/#api)",
        "default": "-",
        "version": "4.24.0"
      },
      "overlayClassName": {
        "property": "overlayClassName",
        "description": "The class name of the dropdown root element",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "overlayStyle": {
        "property": "overlayStyle",
        "description": "The style of the dropdown root element",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "Placement of popup menu: `bottom` `bottomLeft` `bottomRight` `top` `topLeft` `topRight`",
        "type": "string",
        "default": "`bottomLeft`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "The trigger mode which executes the dropdown action. Note that hover can't be used on touchscreens",
        "type": "Array&lt;`click`\\|`hover`\\|`contextMenu`>",
        "default": "\\[`hover`]",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Whether the dropdown menu is currently open. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open))",
        "type": "boolean",
        "default": "-",
        "version": "4.23.0"
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "Called when the open state is changed. Not trigger when hidden by click item. Use `onVisibleChange` under 4.23.0 ([why?](/docs/react/faq#why-open))",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": "4.23.0"
      }
    },
    "Drawer": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "Whether Drawer should get focused after open",
        "type": "boolean",
        "default": "true",
        "version": "4.17.0"
      },
      "afterOpenChange": {
        "property": "afterOpenChange",
        "description": "Callback after the animation ends when switching drawers",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "Style of the drawer content part",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "Config Drawer Panel className. Use `rootClassName` if want to config top dom style",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "Whether a close (x) button is visible on top left of the Drawer dialog or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "Custom close icon",
        "type": "ReactNode",
        "default": "&lt;CloseOutlined />",
        "version": ""
      },
      "contentWrapperStyle": {
        "property": "contentWrapperStyle",
        "description": "Style of the drawer wrapper of content part",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "destroyOnClose": {
        "property": "destroyOnClose",
        "description": "Whether to unmount child components on closing drawer or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "Extra actions area at corner",
        "type": "ReactNode",
        "default": "-",
        "version": "4.17.0"
      },
      "footer": {
        "property": "footer",
        "description": "The footer for Drawer",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "footerStyle": {
        "property": "footerStyle",
        "description": "Style of the drawer footer part",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "Pre-render Drawer component forcibly",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getContainer": {
        "property": "getContainer",
        "description": "mounted node and display window for Drawer",
        "type": "HTMLElement \\| () => HTMLElement \\| Selectors \\| false",
        "default": "body",
        "version": ""
      },
      "headerStyle": {
        "property": "headerStyle",
        "description": "Style of the drawer header part",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "height": {
        "property": "height",
        "description": "Placement is `top` or `bottom`, height of the Drawer dialog",
        "type": "string \\| number",
        "default": "378",
        "version": ""
      },
      "keyboard": {
        "property": "keyboard",
        "description": "Whether support press esc to close",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "mask": {
        "property": "mask",
        "description": "Whether to show mask or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskClosable": {
        "property": "maskClosable",
        "description": "Clicking on the mask (area outside the Drawer) to close the Drawer or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskStyle": {
        "property": "maskStyle",
        "description": "Style for Drawer's mask element",
        "type": "CSSProperties",
        "default": "{}",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "The placement of the Drawer",
        "type": "`top` \\| `right` \\| `bottom` \\| `left`",
        "default": "`right`",
        "version": ""
      },
      "push": {
        "property": "push",
        "description": "Nested drawers push behavior",
        "type": "boolean \\| { distance: string \\| number }",
        "default": "{ distance: 180 }",
        "version": "4.5.0+"
      },
      "rootClassName": {
        "property": "rootClassName",
        "description": "The class name of the container of the Drawer dialog",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "rootStyle": {
        "property": "rootStyle",
        "description": "Style of wrapper element which **contains mask** compare to `style`",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "Style of Drawer panel. Use `bodyStyle` if want to config body only",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "preset size of drawer, default `378px` and large `736px`",
        "type": "'default' \\| 'large'",
        "default": "'default'",
        "version": "4.17.0"
      },
      "title": {
        "property": "title",
        "description": "The title for Drawer",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Whether the Drawer dialog is visible or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "Width of the Drawer dialog",
        "type": "string \\| number",
        "default": "378",
        "version": ""
      },
      "zIndex": {
        "property": "zIndex",
        "description": "The `z-index` of the Drawer",
        "type": "number",
        "default": "1000",
        "version": ""
      },
      "onClose": {
        "property": "onClose",
        "description": "Specify a callback that will be called when a user clicks mask, close button or Cancel button",
        "type": "function(e)",
        "default": "-",
        "version": ""
      }
    },
    "Form": {
      "colon": {
        "property": "colon",
        "description": "Configure the default value of `colon` for Form.Item. Indicates whether the colon after the label is displayed (only effective when prop layout is horizontal)",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Set form component disable, only available for antd components",
        "type": "boolean",
        "default": "false",
        "version": "4.21.0"
      },
      "component": {
        "property": "component",
        "description": "Set the Form rendering element. Do not create a DOM node for `false`",
        "type": "ComponentType \\| false",
        "default": "form",
        "version": ""
      },
      "fields": {
        "property": "fields",
        "description": "Control of form fields through state management (such as redux). Not recommended for non-strong demand. View [example](#components-form-demo-global-state)",
        "type": "[FieldData](#fielddata)\\[]",
        "default": "-",
        "version": ""
      },
      "form": {
        "property": "form",
        "description": "Form control instance created by `Form.useForm()`. Automatically created when not provided",
        "type": "[FormInstance](#forminstance)",
        "default": "-",
        "version": ""
      },
      "initialValues": {
        "property": "initialValues",
        "description": "Set value by Form initialization or reset",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "labelAlign": {
        "property": "labelAlign",
        "description": "The text align of label of all items",
        "type": "`left` \\| `right`",
        "default": "`right`",
        "version": ""
      },
      "labelWrap": {
        "property": "labelWrap",
        "description": "whether label can be wrap",
        "type": "boolean",
        "default": "false",
        "version": "4.18.0"
      },
      "labelCol": {
        "property": "labelCol",
        "description": "Label layout, like `<Col>` component. Set `span` `offset` value like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}`",
        "type": "[object](/components/grid/#col)",
        "default": "-",
        "version": ""
      },
      "layout": {
        "property": "layout",
        "description": "Form layout",
        "type": "`horizontal` \\| `vertical` \\| `inline`",
        "default": "`horizontal`",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "Form name. Will be the prefix of Field `id`",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "preserve": {
        "property": "preserve",
        "description": "Keep field value even when field removed",
        "type": "boolean",
        "default": "true",
        "version": "4.4.0"
      },
      "requiredMark": {
        "property": "requiredMark",
        "description": "Required mark style. Can use required mark or optional mark. You can not config to single Form.Item since this is a Form level config",
        "type": "boolean \\| `optional`",
        "default": "true",
        "version": "4.6.0"
      },
      "scrollToFirstError": {
        "property": "scrollToFirstError",
        "description": "Auto scroll to first failed field when submit",
        "type": "boolean \\| [Options](https://github.com/stipsan/scroll-into-view-if-needed/tree/ece40bd9143f48caf4b99503425ecb16b0ad8249#options)",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Set field component size (antd components only)",
        "type": "`small` \\| `middle` \\| `large`",
        "default": "-",
        "version": ""
      },
      "validateMessages": {
        "property": "validateMessages",
        "description": "Validation prompt template, description [see below](#validatemessages)",
        "type": "[ValidateMessages](https://github.com/ant-design/ant-design/blob/6234509d18bac1ac60fbb3f92a5b2c6a6361295a/components/locale/en_US.ts#L88-L134)",
        "default": "-",
        "version": ""
      },
      "validateTrigger": {
        "property": "validateTrigger",
        "description": "Config field validate trigger",
        "type": "string \\| string\\[]",
        "default": "`onChange`",
        "version": "4.3.0"
      },
      "wrapperCol": {
        "property": "wrapperCol",
        "description": "The layout for input controls, same as `labelCol`",
        "type": "[object](/components/grid/#col)",
        "default": "-",
        "version": ""
      },
      "onFieldsChange": {
        "property": "onFieldsChange",
        "description": "Trigger when field updated",
        "type": "function(changedFields, allFields)",
        "default": "-",
        "version": ""
      },
      "onFinish": {
        "property": "onFinish",
        "description": "Trigger after submitting the form and verifying data successfully",
        "type": "function(values)",
        "default": "-",
        "version": ""
      },
      "onFinishFailed": {
        "property": "onFinishFailed",
        "description": "Trigger after submitting the form and verifying data failed",
        "type": "function({ values, errorFields, outOfDate })",
        "default": "-",
        "version": ""
      },
      "onValuesChange": {
        "property": "onValuesChange",
        "description": "Trigger when value updated",
        "type": "function(changedValues, allValues)",
        "default": "-",
        "version": ""
      }
    },
    "Dropdown.Button": {
      "buttonsRender": {
        "property": "buttonsRender",
        "description": "Custom buttons inside Dropdown.Button",
        "type": "(buttons: ReactNode\\[]) => ReactNode\\[]",
        "default": "-",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Set the loading status of button",
        "type": "boolean \\| { delay: number }",
        "default": "false",
        "version": ""
      },
      "danger": {
        "property": "danger",
        "description": "Set the danger status of button",
        "type": "boolean",
        "default": "-",
        "version": "4.23.0"
      },
      "icon": {
        "property": "icon",
        "description": "Icon (appears on the right)",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Size of the button, the same as [Button](/components/button/#api)",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Type of the button, the same as [Button](/components/button/#api)",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "The same as [Button](/components/button/#api): called when you click the button on the left",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      }
    },
    "Empty": {
      "description": {
        "property": "description",
        "description": "Customize description",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "image": {
        "property": "image",
        "description": "Customize image. Will treat as image url when string provided",
        "type": "ReactNode",
        "default": "`Empty.PRESENTED_IMAGE_DEFAULT`",
        "version": ""
      },
      "imageStyle": {
        "property": "imageStyle",
        "description": "The style of image",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Form.Item": {
      "colon": {
        "property": "colon",
        "description": "Used with `label`, whether to display `:` after label text.",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "dependencies": {
        "property": "dependencies",
        "description": "Set the dependency field. See [below](#dependencies)",
        "type": "[NamePath](#namepath)\\[]",
        "default": "-",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "getValueFromEvent": {
        "property": "getValueFromEvent",
        "description": "Specify how to get value from event or other onChange arguments",
        "type": "(..args: any\\[]) => any",
        "default": "-",
        "version": ""
      },
      "getValueProps": {
        "property": "getValueProps",
        "description": "Additional props with sub component",
        "type": "(value: any) => any",
        "default": "-",
        "version": "4.2.0"
      },
      "hasFeedback": {
        "property": "hasFeedback",
        "description": "Used with `validateStatus`, this option specifies the validation status icon. Recommended to be used only with `Input`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "help": {
        "property": "help",
        "description": "The prompt message. If not provided, the prompt message will be generated by the validation rule.",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "hidden": {
        "property": "hidden",
        "description": "Whether to hide Form.Item (still collect and validate value)",
        "type": "boolean",
        "default": "false",
        "version": "4.4.0"
      },
      "htmlFor": {
        "property": "htmlFor",
        "description": "Set sub label `htmlFor`",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "initialValue": {
        "property": "initialValue",
        "description": "Config sub default value. Form `initialValues` get higher priority when conflict",
        "type": "string",
        "default": "-",
        "version": "4.2.0"
      },
      "label": {
        "property": "label",
        "description": "Label text",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "labelAlign": {
        "property": "labelAlign",
        "description": "The text align of label",
        "type": "`left` \\| `right`",
        "default": "`right`",
        "version": ""
      },
      "labelCol": {
        "property": "labelCol",
        "description": "The layout of label. You can set `span` `offset` to something like `{span: 3, offset: 12}` or `sm: {span: 3, offset: 12}` same as with `<Col>`. You can set `labelCol` on Form which will not affect nest Item. If both exists, use Item first",
        "type": "[object](/components/grid/#col)",
        "default": "-",
        "version": ""
      },
      "messageVariables": {
        "property": "messageVariables",
        "description": "The default validate field info",
        "type": "Record&lt;string, string>",
        "default": "-",
        "version": "4.7.0"
      },
      "name": {
        "property": "name",
        "description": "Field name, support array",
        "type": "[NamePath](#namepath)",
        "default": "-",
        "version": ""
      },
      "normalize": {
        "property": "normalize",
        "description": "Normalize value from component value before passing to Form instance. Do not support async",
        "type": "(value, prevValue, prevValues) => any",
        "default": "-",
        "version": ""
      },
      "noStyle": {
        "property": "noStyle",
        "description": "No style for `true`, used as a pure field control",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "preserve": {
        "property": "preserve",
        "description": "Keep field value even when field removed",
        "type": "boolean",
        "default": "true",
        "version": "4.4.0"
      },
      "required": {
        "property": "required",
        "description": "Display required style. It will be generated by the validation rule",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "rules": {
        "property": "rules",
        "description": "Rules for field validation. Click [here](#components-form-demo-basic) to see an example",
        "type": "[Rule](#rule)\\[]",
        "default": "-",
        "version": ""
      },
      "shouldUpdate": {
        "property": "shouldUpdate",
        "description": "Custom field update logic. See [below](#shouldupdate)",
        "type": "boolean \\| (prevValue, curValue) => boolean",
        "default": "false",
        "version": ""
      },
      "tooltip": {
        "property": "tooltip",
        "description": "Config tooltip info",
        "type": "ReactNode \\| [TooltipProps & { icon: ReactNode }](/components/tooltip#api)",
        "default": "-",
        "version": "4.7.0"
      },
      "trigger": {
        "property": "trigger",
        "description": "When to collect the value of children node. Click [here](#components-form-demo-customized-form-controls) to see an example",
        "type": "string",
        "default": "`onChange`",
        "version": ""
      },
      "validateFirst": {
        "property": "validateFirst",
        "description": "Whether stop validate on first rule of error for this field. Will parallel validate when `parallel` configured",
        "type": "boolean \\| `parallel`",
        "default": "false",
        "version": "`parallel`: 4.5.0"
      },
      "validateStatus": {
        "property": "validateStatus",
        "description": "The validation status. If not provided, it will be generated by validation rule. options: `success` `warning` `error` `validating`",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "validateTrigger": {
        "property": "validateTrigger",
        "description": "When to validate the value of children node",
        "type": "string \\| string\\[]",
        "default": "`onChange`",
        "version": ""
      },
      "valuePropName": {
        "property": "valuePropName",
        "description": "Props of children node, for example, the prop of Switch is 'checked'. This prop is an encapsulation of `getValueProps`, which will be invalid after customizing `getValueProps`",
        "type": "string",
        "default": "`value`",
        "version": ""
      },
      "wrapperCol": {
        "property": "wrapperCol",
        "description": "The layout for input controls, same as `labelCol`. You can set `wrapperCol` on Form which will not affect nest Item. If both exists, use Item first",
        "type": "[object](/components/grid/#col)",
        "default": "-",
        "version": ""
      }
    },
    "Form.List": {
      "children": {
        "property": "children",
        "description": "Render function",
        "type": "(fields: Field\\[], operation: { add, remove, move }, meta: { errors }) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "initialValue": {
        "property": "initialValue",
        "description": "Config sub default value. Form `initialValues` get higher priority when conflict",
        "type": "any\\[]",
        "default": "-",
        "version": "4.9.0"
      },
      "name": {
        "property": "name",
        "description": "Field name, support array",
        "type": "[NamePath](#namepath)",
        "default": "-",
        "version": ""
      },
      "rules": {
        "property": "rules",
        "description": "Validate rules, only support customize validator. Should work with [ErrorList](#formerrorlist)",
        "type": "{ validator, message }\\[]",
        "default": "-",
        "version": "4.7.0"
      }
    },
    "Row": {
      "align": {
        "property": "align",
        "description": "Vertical alignment",
        "type": "`top` \\| `middle` \\| `bottom` \\| `stretch` \\| `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'top' \\| 'middle' \\| 'bottom' \\| 'stretch'}`",
        "default": "`top`",
        "version": "object: 4.24.0"
      },
      "gutter": {
        "property": "gutter",
        "description": "Spacing between grids, could be a number or a object like { xs: 8, sm: 16, md: 24}. Or you can use array to make horizontal and vertical spacing work at the same time `[horizontal, vertical]`",
        "type": "number \\| object \\| array",
        "default": "0",
        "version": ""
      },
      "justify": {
        "property": "justify",
        "description": "Horizontal arrangement",
        "type": "`start` \\| `end` \\| `center` \\| `space-around` \\| `space-between` \\| `space-evenly` \\| `{[key in 'xs' \\| 'sm' \\| 'md' \\| 'lg' \\| 'xl' \\| 'xxl']: 'start' \\| 'end' \\| 'center' \\| 'space-around' \\| 'space-between' \\| 'space-evenly'}`",
        "default": "`start`",
        "version": "object: 4.24.0"
      },
      "wrap": {
        "property": "wrap",
        "description": "Auto wrap line",
        "type": "boolean",
        "default": "true",
        "version": "4.8.0"
      }
    },
    "Form.ErrorList": {
      "errors": {
        "property": "errors",
        "description": "Error list",
        "type": "ReactNode\\[]",
        "default": "-",
        "version": ""
      }
    },
    "Col": {
      "flex": {
        "property": "flex",
        "description": "Flex layout style",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "offset": {
        "property": "offset",
        "description": "The number of cells to offset Col from the left",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "order": {
        "property": "order",
        "description": "Raster order",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "pull": {
        "property": "pull",
        "description": "The number of cells that raster is moved to the left",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "push": {
        "property": "push",
        "description": "The number of cells that raster is moved to the right",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "span": {
        "property": "span",
        "description": "Raster number of cells to occupy, 0 corresponds to `display: none`",
        "type": "number",
        "default": "none",
        "version": ""
      },
      "xs": {
        "property": "xs",
        "description": "`screen < 576px` and also default setting, could be a `span` value or an object containing above props",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "sm": {
        "property": "sm",
        "description": "`screen ≥ 576px`, could be a `span` value or an object containing above props",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "md": {
        "property": "md",
        "description": "`screen ≥ 768px`, could be a `span` value or an object containing above props",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "lg": {
        "property": "lg",
        "description": "`screen ≥ 992px`, could be a `span` value or an object containing above props",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "xl": {
        "property": "xl",
        "description": "`screen ≥ 1200px`, could be a `span` value or an object containing above props",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      },
      "xxl": {
        "property": "xxl",
        "description": "`screen ≥ 1600px`, could be a `span` value or an object containing above props",
        "type": "number \\| object",
        "default": "-",
        "version": ""
      }
    },
    "Form.Provider": {
      "onFormChange": {
        "property": "onFormChange",
        "description": "Triggered when a sub form field updates",
        "type": "function(formName: string, info: { changedFields, forms })",
        "default": "-",
        "version": ""
      },
      "onFormFinish": {
        "property": "onFormFinish",
        "description": "Triggered when a sub form submits",
        "type": "function(formName: string, info: { values, forms })",
        "default": "-",
        "version": ""
      }
    },
    "Icon": {
      "className": {
        "property": "className",
        "description": "The className of Icon",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "rotate": {
        "property": "rotate",
        "description": "Rotate by n degrees (not working in IE9)",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "spin": {
        "property": "spin",
        "description": "Rotate icon with animation",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "The style properties of icon, like `fontSize` and `color`",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "twoToneColor": {
        "property": "twoToneColor",
        "description": "Only supports the two-tone icon. Specify the primary color",
        "type": "string (hex color)",
        "default": "-",
        "version": ""
      }
    },
    "Input": {
      "addonAfter": {
        "property": "addonAfter",
        "description": "The label text displayed after (on the right side of) the input field",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "addonBefore": {
        "property": "addonBefore",
        "description": "The label text displayed before (on the left side of) the input field",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "If allow to remove input content with clear icon",
        "type": "boolean \\| { clearIcon: ReactNode }",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": "4.5.0"
      },
      "classNames": {
        "property": "classNames",
        "description": "Semantic DOM class",
        "type": "Record&lt;[SemanticDOM](#input-1), string>",
        "default": "-",
        "version": "5.4.0"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The initial input content",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether the input is disabled",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "id": {
        "property": "id",
        "description": "The ID for input",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "maxLength": {
        "property": "maxLength",
        "description": "The maximum number of characters in Input",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "showCount": {
        "property": "showCount",
        "description": "Whether to show character count",
        "type": "boolean \\| { formatter: (info: { value: string, count: number, maxLength?: number }) => ReactNode }",
        "default": "false",
        "version": "4.18.0 info.value: 4.23.0"
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "styles": {
        "property": "styles",
        "description": "Semantic DOM style",
        "type": "Record&lt;[SemanticDOM](#input-1), CSSProperties>",
        "default": "-",
        "version": "5.4.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "The prefix icon for the Input",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "The size of the input box. Note: in the context of a form, the `middle` size is used",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "suffix": {
        "property": "suffix",
        "description": "The suffix icon for the Input",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "The type of input, see: [MDN](https://developer.mozilla.org/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types)( use `Input.TextArea` instead of `type=\"textarea\"`)",
        "type": "string",
        "default": "`text`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "The input content value",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback when user input",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed",
        "type": "function(e)",
        "default": "-",
        "version": ""
      }
    },
    "Image": {
      "alt": {
        "property": "alt",
        "description": "Image description",
        "type": "string",
        "default": "-",
        "version": "4.6.0"
      },
      "fallback": {
        "property": "fallback",
        "description": "Load failure fault-tolerant src",
        "type": "string",
        "default": "-",
        "version": "4.6.0"
      },
      "height": {
        "property": "height",
        "description": "Image height",
        "type": "string \\| number",
        "default": "-",
        "version": "4.6.0"
      },
      "placeholder": {
        "property": "placeholder",
        "description": "Load placeholder, use default placeholder when set `true`",
        "type": "ReactNode",
        "default": "-",
        "version": "4.6.0"
      },
      "preview": {
        "property": "preview",
        "description": "preview config, disabled when `false`",
        "type": "boolean \\| [previewType](#previewtype)",
        "default": "true",
        "version": "4.6.0 [previewType](#previewtype):4.7.0"
      },
      "src": {
        "property": "src",
        "description": "Image path",
        "type": "string",
        "default": "-",
        "version": "4.6.0"
      },
      "width": {
        "property": "width",
        "description": "Image width",
        "type": "string \\| number",
        "default": "-",
        "version": "4.6.0"
      },
      "onError": {
        "property": "onError",
        "description": "Load failed callback",
        "type": "(event: Event) => void",
        "default": "-",
        "version": "4.12.0"
      },
      "rootClassName": {
        "property": "rootClassName",
        "description": "add custom className for image root DOM and preview mode root DOM",
        "type": "string",
        "default": "-",
        "version": "4.20.0"
      }
    },
    "Input.Search": {
      "enterButton": {
        "property": "enterButton",
        "description": "Whether to show an enter button after input. This property conflicts with the `addonAfter` property",
        "type": "boolean \\| ReactNode",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Search box with loading",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key",
        "type": "function(value, event)",
        "default": "-",
        "version": ""
      }
    },
    "InputNumber": {
      "addonAfter": {
        "property": "addonAfter",
        "description": "The label text displayed after (on the right side of) the input field",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "addonBefore": {
        "property": "addonBefore",
        "description": "The label text displayed before (on the left side of) the input field",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": "4.12.0"
      },
      "controls": {
        "property": "controls",
        "description": "Whether to show `+-` controls, or set custom arrows icon",
        "type": "boolean \\| { upIcon?: React.ReactNode; downIcon?: React.ReactNode; }",
        "default": "-",
        "version": "4.19.0"
      },
      "decimalSeparator": {
        "property": "decimalSeparator",
        "description": "Decimal separator",
        "type": "string",
        "default": "-",
        "version": "-"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The initial value",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      "disabled": {
        "property": "disabled",
        "description": "If disable the input",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      "formatter": {
        "property": "formatter",
        "description": "Specifies the format of the value presented",
        "type": "function(value: number \\| string, info: { userTyping: boolean, input: string }): string",
        "default": "-",
        "version": "info: 4.17.0"
      },
      "keyboard": {
        "property": "keyboard",
        "description": "If enable keyboard behavior",
        "type": "boolean",
        "default": "true",
        "version": "4.12.0"
      },
      "max": {
        "property": "max",
        "description": "The max value",
        "type": "number",
        "default": "[Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)",
        "version": "-"
      },
      "min": {
        "property": "min",
        "description": "The min value",
        "type": "number",
        "default": "[Number.MIN_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER)",
        "version": "-"
      },
      "parser": {
        "property": "parser",
        "description": "Specifies the value extracted from formatter",
        "type": "function(string): number",
        "default": "-",
        "version": "-"
      },
      "precision": {
        "property": "precision",
        "description": "The precision of input value. Will use `formatter` when config of `formatter`",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      "readOnly": {
        "property": "readOnly",
        "description": "If readonly the input",
        "type": "boolean",
        "default": "false",
        "version": "-"
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "prefix": {
        "property": "prefix",
        "description": "The prefix icon for the Input",
        "type": "ReactNode",
        "default": "-",
        "version": "4.17.0"
      },
      "size": {
        "property": "size",
        "description": "The height of input box",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": "-"
      },
      "step": {
        "property": "step",
        "description": "The number to which the current value is increased or decreased. It can be an integer or decimal",
        "type": "number \\| string",
        "default": "1",
        "version": "-"
      },
      "stringMode": {
        "property": "stringMode",
        "description": "Set value as string to support high precision decimals. Will return string value by `onChange`",
        "type": "boolean",
        "default": "false",
        "version": "4.13.0"
      },
      "value": {
        "property": "value",
        "description": "The current value",
        "type": "number",
        "default": "-",
        "version": "-"
      },
      "onChange": {
        "property": "onChange",
        "description": "The callback triggered when the value is changed",
        "type": "function(value: number \\| string \\| null)",
        "default": "-",
        "version": "-"
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed",
        "type": "function(e)",
        "default": "-",
        "version": "-"
      },
      "onStep": {
        "property": "onStep",
        "description": "The callback function that is triggered when click up or down buttons",
        "type": "(value: number, info: { offset: number, type: 'up' \\| 'down' }) => void",
        "default": "-",
        "version": "4.7.0"
      }
    },
    "Input.Password": {
      "iconRender": {
        "property": "iconRender",
        "description": "Custom toggle button",
        "type": "(visible) => ReactNode",
        "default": "(visible) => (visible ? &lt;EyeOutlined /> : &lt;EyeInvisibleOutlined />)",
        "version": "4.3.0"
      },
      "visibilityToggle": {
        "property": "visibilityToggle",
        "description": "Whether show toggle button or control password visible",
        "type": "boolean \\| [VisibilityToggle](#visibilitytoggle)",
        "default": "true",
        "version": ""
      }
    },
    "Layout": {
      "className": {
        "property": "className",
        "description": "Container className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hasSider": {
        "property": "hasSider",
        "description": "Whether contain Sider in children, don't have to assign it normally. Useful in ssr avoid style flickering",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "To customize the styles",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Input.TextArea": {
      "allowClear": {
        "property": "allowClear",
        "description": "If allow to remove input content with clear icon",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoSize": {
        "property": "autoSize",
        "description": "Height autosize feature, can be set to true \\| false or an object { minRows: 2, maxRows: 6 }",
        "type": "boolean \\| object",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": "4.5.0"
      },
      "classNames": {
        "property": "classNames",
        "description": "Semantic DOM class",
        "type": "Record&lt;[SemanticDOM](#inputtextarea-1), string>",
        "default": "-",
        "version": "5.4.0"
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The initial input content",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "maxLength": {
        "property": "maxLength",
        "description": "The maximum number of characters in TextArea",
        "type": "number",
        "default": "-",
        "version": "4.7.0"
      },
      "showCount": {
        "property": "showCount",
        "description": "Whether to show character count",
        "type": "boolean \\| { formatter: (info: { value: string, count: number, maxLength?: number }) => string }",
        "default": "false",
        "version": "4.7.0 formatter: 4.10.0 info.value: 4.23.0"
      },
      "styles": {
        "property": "styles",
        "description": "Semantic DOM style",
        "type": "Record&lt;[SemanticDOM](#inputtextarea-1), CSSProperties>",
        "default": "-",
        "version": "5.4.0"
      },
      "value": {
        "property": "value",
        "description": "The input content value",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onPressEnter": {
        "property": "onPressEnter",
        "description": "The callback function that is triggered when Enter key is pressed",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onResize": {
        "property": "onResize",
        "description": "The callback function that is triggered when resize",
        "type": "function({ width, height })",
        "default": "-",
        "version": ""
      }
    },
    "Layout.Sider": {
      "breakpoint": {
        "property": "breakpoint",
        "description": "[Breakpoints](/components/grid/#col) of the responsive layout",
        "type": "`xs` \\| `sm` \\| `md` \\| `lg` \\| `xl` \\| `xxl`",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "Container className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "collapsed": {
        "property": "collapsed",
        "description": "To set the current status",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "collapsedWidth": {
        "property": "collapsedWidth",
        "description": "Width of the collapsed sidebar, by setting to 0 a special trigger will appear",
        "type": "number",
        "default": "80",
        "version": ""
      },
      "collapsible": {
        "property": "collapsible",
        "description": "Whether can be collapsed",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultCollapsed": {
        "property": "defaultCollapsed",
        "description": "To set the initial status",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "reverseArrow": {
        "property": "reverseArrow",
        "description": "Reverse direction of arrow, for a sider that expands from the right",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "To customize the styles",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "Color theme of the sidebar",
        "type": "`light` \\| `dark`",
        "default": "`dark`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "Specify the customized trigger, set to null to hide the trigger",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "Width of the sidebar",
        "type": "number \\| string",
        "default": "200",
        "version": ""
      },
      "zeroWidthTriggerStyle": {
        "property": "zeroWidthTriggerStyle",
        "description": "To customize the styles of the special trigger that appears when `collapsedWidth` is 0",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "onBreakpoint": {
        "property": "onBreakpoint",
        "description": "The callback function, executed when [breakpoints](/components/grid/#api) changed",
        "type": "(broken) => {}",
        "default": "-",
        "version": ""
      },
      "onCollapse": {
        "property": "onCollapse",
        "description": "The callback function, executed by clicking the trigger or activating the responsive layout",
        "type": "(collapsed, type) => {}",
        "default": "-",
        "version": ""
      }
    },
    "List": {
      "bordered": {
        "property": "bordered",
        "description": "Toggles rendering of the border around the list",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "DataSource array for list",
        "type": "any\\[]",
        "default": "-",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "List footer renderer",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "grid": {
        "property": "grid",
        "description": "The grid type of list. You can set grid to something like {gutter: 16, column: 4}",
        "type": "[object](#list-grid-props)",
        "default": "-",
        "version": ""
      },
      "header": {
        "property": "header",
        "description": "List header renderer",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "itemLayout": {
        "property": "itemLayout",
        "description": "The layout of list",
        "type": "`horizontal` \\| `vertical`",
        "default": "`horizontal`",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Shows a loading indicator while the contents of the list are being fetched",
        "type": "boolean \\| [SpinProps](/components/spin/#api) ([more](https://github.com/ant-design/ant-design/issues/8659))",
        "default": "false",
        "version": ""
      },
      "loadMore": {
        "property": "loadMore",
        "description": "Shows a load more content",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "The i18n text including empty text",
        "type": "object",
        "default": "{emptyText: `No Data`}",
        "version": ""
      },
      "pagination": {
        "property": "pagination",
        "description": "Pagination [config](/components/pagination/), hide it by setting it to false",
        "type": "boolean \\| object",
        "default": "false",
        "version": ""
      },
      "renderItem": {
        "property": "renderItem",
        "description": "Customize list item when using `dataSource`",
        "type": "(item) => ReactNode",
        "default": "-",
        "version": ""
      },
      "rowKey": {
        "property": "rowKey",
        "description": "Item's unique value, could be an Item's key which holds a unique value of type `React.Key` or function that receives Item and returns a `React.Key`",
        "type": "`keyof` T \\| (item: T) => `React.Key`",
        "default": "`\"key\"`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Size of list",
        "type": "`default` \\| `large` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "split": {
        "property": "split",
        "description": "Toggles rendering of the split under the list item",
        "type": "boolean",
        "default": "true",
        "version": ""
      }
    },
    "List.Item": {
      "actions": {
        "property": "actions",
        "description": "The actions content of list item. If `itemLayout` is `vertical`, shows the content on bottom, otherwise shows content on the far right",
        "type": "Array&lt;ReactNode>",
        "default": "-",
        "version": ""
      },
      "extra": {
        "property": "extra",
        "description": "The extra content of list item. If `itemLayout` is `vertical`, shows the content on right, otherwise shows content on the far right",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Mentins.Option": {
      "label": {
        "property": "label",
        "description": "Title of the option",
        "type": "React.ReactNode",
        "default": "-",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "The key value of the option",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Optional",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "className",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "The style of the option",
        "type": "React.CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Mentions": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "Auto get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoSize": {
        "property": "autoSize",
        "description": "Textarea height autosize feature, can be set to true \\| false or an object { minRows: 2, maxRows: 6 }",
        "type": "boolean \\| object",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "Default value",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "Customize filter option logic",
        "type": "false \\| (input: string, option: OptionProps) => boolean",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "Set the mount HTML node for suggestions",
        "type": "() => HTMLElement",
        "default": "-",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "Set mentions content when not match",
        "type": "ReactNode",
        "default": "`Not Found`",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "Set popup placement",
        "type": "`top` \\| `bottom`",
        "default": "`bottom`",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "Set trigger prefix keyword",
        "type": "string \\| string\\[]",
        "default": "`@`",
        "version": ""
      },
      "split": {
        "property": "split",
        "description": "Set split string before and after selected mention",
        "type": "string",
        "default": "` `",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning' \\| 'success' \\| 'validating'",
        "default": "-",
        "version": "4.19.0"
      },
      "validateSearch": {
        "property": "validateSearch",
        "description": "Customize trigger search logic",
        "type": "(text: string, props: MentionsProps) => void",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Set value of mentions",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "Trigger when mentions lose focus",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Trigger when value changed",
        "type": "(text: string) => void",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "Trigger when mentions get focus",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "onResize": {
        "property": "onResize",
        "description": "The callback function that is triggered when textarea resize",
        "type": "function({ width, height })",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "Trigger when prefix hit",
        "type": "(text: string, prefix: string) => void",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Trigger when user select the option",
        "type": "(option: OptionProps, prefix: string) => void",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "Option Configuration",
        "type": "[Options](#option)",
        "default": "\\[]",
        "version": "5.1.0"
      }
    },
    "List.Item.Meta": {
      "avatar": {
        "property": "avatar",
        "description": "The avatar of list item",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "The description of list item",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "The title of list item",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Menu": {
      "defaultOpenKeys": {
        "property": "defaultOpenKeys",
        "description": "Array with the keys of default opened sub menus",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "defaultSelectedKeys": {
        "property": "defaultSelectedKeys",
        "description": "Array with the keys of default selected menu items",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "expandIcon": {
        "property": "expandIcon",
        "description": "custom expand icon of submenu",
        "type": "ReactNode \\| `(props: SubMenuProps & { isSubMenu: boolean }) => ReactNode`",
        "default": "-",
        "version": "4.9.0"
      },
      "forceSubMenuRender": {
        "property": "forceSubMenuRender",
        "description": "Render submenu into DOM before it becomes visible",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "inlineCollapsed": {
        "property": "inlineCollapsed",
        "description": "Specifies the collapsed status when menu is inline mode",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "inlineIndent": {
        "property": "inlineIndent",
        "description": "Indent (in pixels) of inline menu items on each level",
        "type": "number",
        "default": "24",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "Menu item content",
        "type": "[ItemType\\[\\]](#itemtype)",
        "default": "-",
        "version": "4.20.0"
      },
      "mode": {
        "property": "mode",
        "description": "Type of menu",
        "type": "`vertical` \\| `horizontal` \\| `inline`",
        "default": "`vertical`",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "Allows selection of multiple items",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "openKeys": {
        "property": "openKeys",
        "description": "Array with the keys of currently opened sub-menus",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "overflowedIndicator": {
        "property": "overflowedIndicator",
        "description": "Customized the ellipsis icon when menu is collapsed horizontally",
        "type": "ReactNode",
        "default": "`<EllipsisOutlined />`",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "Allows selecting menu items",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "Array with the keys of currently selected menu items",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "Style of the root node",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "subMenuCloseDelay": {
        "property": "subMenuCloseDelay",
        "description": "Delay time to hide submenu when mouse leaves (in seconds)",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "subMenuOpenDelay": {
        "property": "subMenuOpenDelay",
        "description": "Delay time to show submenu when mouse enters, (in seconds)",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "theme": {
        "property": "theme",
        "description": "Color theme of the menu",
        "type": "`light` \\| `dark`",
        "default": "`light`",
        "version": ""
      },
      "triggerSubMenuAction": {
        "property": "triggerSubMenuAction",
        "description": "Which action can trigger submenu open/close",
        "type": "`hover` \\| `click`",
        "default": "`hover`",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "Called when a menu item is clicked",
        "type": "function({ item, key, keyPath, domEvent })",
        "default": "-",
        "version": ""
      },
      "onDeselect": {
        "property": "onDeselect",
        "description": "Called when a menu item is deselected (multiple mode only)",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "Called when sub-menus are opened or closed",
        "type": "function(openKeys: string\\[])",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Called when a menu item is selected",
        "type": "function({ item, key, keyPath, selectedKeys, domEvent })",
        "default": "-",
        "version": ""
      }
    },
    "Modal": {
      "afterClose": {
        "property": "afterClose",
        "description": "Specify a function that will be called when modal is closed completely",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "bodyStyle": {
        "property": "bodyStyle",
        "description": "Body style for modal body element. Such as height, padding etc",
        "type": "CSSProperties",
        "default": "",
        "version": ""
      },
      "cancelButtonProps": {
        "property": "cancelButtonProps",
        "description": "The cancel button props",
        "type": "[ButtonProps](/components/button/#api)",
        "default": "-",
        "version": ""
      },
      "cancelText": {
        "property": "cancelText",
        "description": "Text of the Cancel button",
        "type": "ReactNode",
        "default": "`Cancel`",
        "version": ""
      },
      "centered": {
        "property": "centered",
        "description": "Centered Modal",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "closable": {
        "property": "closable",
        "description": "Whether a close (x) button is visible on top right of the modal dialog or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "Custom close icon",
        "type": "ReactNode",
        "default": "&lt;CloseOutlined />",
        "version": ""
      },
      "confirmLoading": {
        "property": "confirmLoading",
        "description": "Whether to apply loading visual effect for OK button or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "destroyOnClose": {
        "property": "destroyOnClose",
        "description": "Whether to unmount child components on onClose",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "focusTriggerAfterClose": {
        "property": "focusTriggerAfterClose",
        "description": "Whether need to focus trigger element after dialog is closed",
        "type": "boolean",
        "default": "true",
        "version": "4.9.0"
      },
      "footer": {
        "property": "footer",
        "description": "Footer content, set as `footer={null}` when you don't need default buttons",
        "type": "ReactNode",
        "default": "(OK and Cancel buttons)",
        "version": ""
      },
      "forceRender": {
        "property": "forceRender",
        "description": "Force render Modal",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getContainer": {
        "property": "getContainer",
        "description": "The mounted node for Modal but still display at fullscreen",
        "type": "HTMLElement \\| () => HTMLElement \\| Selectors \\| false",
        "default": "document.body",
        "version": ""
      },
      "keyboard": {
        "property": "keyboard",
        "description": "Whether support press esc to close",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "mask": {
        "property": "mask",
        "description": "Whether show mask or not",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskClosable": {
        "property": "maskClosable",
        "description": "Whether to close the modal dialog when the mask (area outside the modal) is clicked",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "maskStyle": {
        "property": "maskStyle",
        "description": "Style for modal's mask element",
        "type": "CSSProperties",
        "default": "",
        "version": ""
      },
      "modalRender": {
        "property": "modalRender",
        "description": "Custom modal content render",
        "type": "(node: ReactNode) => ReactNode",
        "default": "-",
        "version": "4.7.0"
      },
      "okButtonProps": {
        "property": "okButtonProps",
        "description": "The ok button props",
        "type": "[ButtonProps](/components/button/#api)",
        "default": "-",
        "version": ""
      },
      "okText": {
        "property": "okText",
        "description": "Text of the OK button",
        "type": "ReactNode",
        "default": "`OK`",
        "version": ""
      },
      "okType": {
        "property": "okType",
        "description": "Button `type` of the OK button",
        "type": "string",
        "default": "`primary`",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "Style of floating layer, typically used at least for adjusting the position",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "The modal dialog's title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Whether the modal dialog is visible or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "Width of the modal dialog",
        "type": "string \\| number",
        "default": "520",
        "version": ""
      },
      "wrapClassName": {
        "property": "wrapClassName",
        "description": "The class name of the container of the modal dialog",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "zIndex": {
        "property": "zIndex",
        "description": "The `z-index` of the Modal",
        "type": "number",
        "default": "1000",
        "version": ""
      },
      "onCancel": {
        "property": "onCancel",
        "description": "Specify a function that will be called when a user clicks mask, close button on top right or Cancel button",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onOk": {
        "property": "onOk",
        "description": "Specify a function that will be called when a user clicks the OK button",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "afterOpenChange": {
        "property": "afterOpenChange",
        "description": "Callback when the animation ends when Modal is turned on and off",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": "5.4.0"
      }
    },
    "Pagination": {
      "current": {
        "property": "current",
        "description": "Current page number",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "defaultCurrent": {
        "property": "defaultCurrent",
        "description": "Default initial page number",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "defaultPageSize": {
        "property": "defaultPageSize",
        "description": "Default number of data items per page",
        "type": "number",
        "default": "10",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable pagination",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "hideOnSinglePage": {
        "property": "hideOnSinglePage",
        "description": "Whether to hide pager on single page",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "itemRender": {
        "property": "itemRender",
        "description": "To customize item's innerHTML",
        "type": "(page, type: 'page' \\| 'prev' \\| 'next', originalElement) => React.ReactNode",
        "default": "-",
        "version": ""
      },
      "pageSize": {
        "property": "pageSize",
        "description": "Number of data items per page",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "pageSizeOptions": {
        "property": "pageSizeOptions",
        "description": "Specify the sizeChanger options",
        "type": "string\\[] \\| number\\[]",
        "default": "\\[`10`, `20`, `50`, `100`]",
        "version": ""
      },
      "responsive": {
        "property": "responsive",
        "description": "If `size` is not specified, `Pagination` would resize according to the width of the window",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "showLessItems": {
        "property": "showLessItems",
        "description": "Show less page items",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showQuickJumper": {
        "property": "showQuickJumper",
        "description": "Determine whether you can jump to pages directly",
        "type": "boolean \\| { goButton: ReactNode }",
        "default": "false",
        "version": ""
      },
      "showSizeChanger": {
        "property": "showSizeChanger",
        "description": "Determine whether to show `pageSize` select, it will be true when `total > 50`",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "showTitle": {
        "property": "showTitle",
        "description": "Show page item's title",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "showTotal": {
        "property": "showTotal",
        "description": "To display the total number and range",
        "type": "function(total, range)",
        "default": "-",
        "version": ""
      },
      "simple": {
        "property": "simple",
        "description": "Whether to use simple mode",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Specify the size of `Pagination`, can be set to `small`",
        "type": "`default` \\| `small`",
        "default": "`default`",
        "version": ""
      },
      "total": {
        "property": "total",
        "description": "Total number of data items",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Called when the page number or `pageSize` is changed, and it takes the resulting page number and pageSize as its arguments",
        "type": "function(page, pageSize)",
        "default": "-",
        "version": ""
      },
      "onShowSizeChange": {
        "property": "onShowSizeChange",
        "description": "Called when `pageSize` is changed",
        "type": "function(current, size)",
        "default": "-",
        "version": ""
      }
    },
    "Popover": {
      "content": {
        "property": "content",
        "description": "Content of the card",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Title of the card",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Popconfirm": {
      "cancelButtonProps": {
        "property": "cancelButtonProps",
        "description": "The cancel button props",
        "type": "[ButtonProps](/components/button/#api)",
        "default": "-",
        "version": ""
      },
      "cancelText": {
        "property": "cancelText",
        "description": "The text of the Cancel button",
        "type": "string",
        "default": "`Cancel`",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether show popconfirm when click its childrenNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Customize icon of confirmation",
        "type": "ReactNode",
        "default": "&lt;ExclamationCircle />",
        "version": ""
      },
      "okButtonProps": {
        "property": "okButtonProps",
        "description": "The ok button props",
        "type": "[ButtonProps](/components/button/#api)",
        "default": "-",
        "version": ""
      },
      "okText": {
        "property": "okText",
        "description": "The text of the Confirm button",
        "type": "string",
        "default": "`OK`",
        "version": ""
      },
      "okType": {
        "property": "okType",
        "description": "Button `type` of the Confirm button",
        "type": "string",
        "default": "`primary`",
        "version": ""
      },
      "showCancel": {
        "property": "showCancel",
        "description": "Show cancel button",
        "type": "boolean",
        "default": "true",
        "version": "4.18.0"
      },
      "title": {
        "property": "title",
        "description": "The title of the confirmation box",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": ""
      },
      "description": {
        "property": "description",
        "description": "The description of the confirmation box title",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": "5.1.0"
      },
      "onCancel": {
        "property": "onCancel",
        "description": "A callback of cancel",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onConfirm": {
        "property": "onConfirm",
        "description": "A callback of confirmation",
        "type": "function(e)",
        "default": "-",
        "version": ""
      },
      "onPopupClick": {
        "property": "onPopupClick",
        "description": "A callback of popup click",
        "type": "function(e)",
        "default": "-",
        "version": "5.5.0"
      }
    },
    "Radio": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "Whether get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "Specifies whether the radio is selected",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "Specifies the initial state: whether or not the radio is selected",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable radio",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "According to value for comparison, to determine whether the selected",
        "type": "any",
        "default": "-",
        "version": ""
      }
    },
    "Progress": {
      "format": {
        "property": "format",
        "description": "The template function of the content",
        "type": "function(percent, successPercent)",
        "default": "(percent) => percent + `%`",
        "version": "-"
      },
      "percent": {
        "property": "percent",
        "description": "To set the completion percentage",
        "type": "number",
        "default": "0",
        "version": "-"
      },
      "showInfo": {
        "property": "showInfo",
        "description": "Whether to display the progress value and the status icon",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "To set the status of the Progress, options: `success` `exception` `normal` `active`(line only)",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "strokeColor": {
        "property": "strokeColor",
        "description": "The color of progress bar",
        "type": "string",
        "default": "-",
        "version": "-"
      },
      "strokeLinecap": {
        "property": "strokeLinecap",
        "description": "To set the style of the progress linecap",
        "type": "`round` \\| `butt` \\| `square`, see [stroke-linecap](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap)",
        "default": "`round`",
        "version": "-"
      },
      "success": {
        "property": "success",
        "description": "Configs of successfully progress bar",
        "type": "{ percent: number, strokeColor: string }",
        "default": "-",
        "version": "-"
      },
      "trailColor": {
        "property": "trailColor",
        "description": "The color of unfilled part",
        "type": "string",
        "default": "-",
        "version": "-"
      },
      "type": {
        "property": "type",
        "description": "To set the type, options: `line` `circle` `dashboard`",
        "type": "string",
        "default": "`line`",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Progress size",
        "type": "number \\| \\[number, number] \\| \"small\" \\| \"default\"",
        "default": "\"default\"",
        "version": "v5.3.0"
      }
    },
    "Radio.Group": {
      "buttonStyle": {
        "property": "buttonStyle",
        "description": "The style type of radio button",
        "type": "`outline` \\| `solid`",
        "default": "`outline`",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "Default selected value",
        "type": "any",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable all radio buttons",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "The `name` property of all `input[type=\"radio\"]` children",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "Set children optional",
        "type": "string\\[] \\| number\\[] \\| Array&lt;{ label: ReactNode; value: string; disabled?: boolean; }>",
        "default": "-",
        "version": ""
      },
      "optionType": {
        "property": "optionType",
        "description": "Set Radio optionType",
        "type": "`default` \\| `button`",
        "default": "`default`",
        "version": "4.4.0"
      },
      "size": {
        "property": "size",
        "description": "The size of radio button style",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Used for setting the currently selected value",
        "type": "any",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "The callback function that is triggered when the state changes",
        "type": "function(e:Event)",
        "default": "-",
        "version": ""
      }
    },
    "Rate": {
      "allowClear": {
        "property": "allowClear",
        "description": "Whether to allow clear when click again",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "allowHalf": {
        "property": "allowHalf",
        "description": "Whether to allow semi selection",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "character": {
        "property": "character",
        "description": "The custom character of rate",
        "type": "ReactNode \\| (RateProps) => ReactNode",
        "default": "&lt;StarFilled />",
        "version": "function(): 4.4.0"
      },
      "className": {
        "property": "className",
        "description": "The custom class name of rate",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "count": {
        "property": "count",
        "description": "Star count",
        "type": "number",
        "default": "5",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The default value",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "If read only, unable to interact",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "style": {
        "property": "style",
        "description": "The custom style object of rate",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "tooltips": {
        "property": "tooltips",
        "description": "Customize tooltip by each character",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "The current value",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "onBlur": {
        "property": "onBlur",
        "description": "Callback when component lose focus",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback when select value",
        "type": "function(value: number)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "Callback when component get focus",
        "type": "function()",
        "default": "-",
        "version": ""
      },
      "onHoverChange": {
        "property": "onHoverChange",
        "description": "Callback when hover item",
        "type": "function(value: number)",
        "default": "-",
        "version": ""
      },
      "onKeyDown": {
        "property": "onKeyDown",
        "description": "Callback when keydown on component",
        "type": "function(event)",
        "default": "-",
        "version": ""
      }
    },
    "Result": {
      "extra": {
        "property": "extra",
        "description": "Operating area",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Custom back icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Result status, decide icons and colors",
        "type": "`success` \\| `error` \\| `info` \\| `warning` \\| `404` \\| `403` \\| `500`",
        "default": "`info`",
        "version": ""
      },
      "subTitle": {
        "property": "subTitle",
        "description": "The subTitle",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "The title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Skeleton": {
      "active": {
        "property": "active",
        "description": "Show animation effect",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "avatar": {
        "property": "avatar",
        "description": "Show avatar placeholder",
        "type": "boolean \\| [SkeletonAvatarProps](#skeletonavatarprops)",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Display the skeleton when true",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "paragraph": {
        "property": "paragraph",
        "description": "Show paragraph placeholder",
        "type": "boolean \\| [SkeletonParagraphProps](#skeletonparagraphprops)",
        "default": "true",
        "version": ""
      },
      "round": {
        "property": "round",
        "description": "Show paragraph and title radius when true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Show title placeholder",
        "type": "boolean \\| [SkeletonTitleProps](#skeletontitleprops)",
        "default": "true",
        "version": ""
      }
    },
    "Select": {
      "allowClear": {
        "property": "allowClear",
        "description": "Show clear button",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoClearSearchValue": {
        "property": "autoClearSearchValue",
        "description": "Whether the current search will be cleared on selecting an item. Only applies when `mode` is set to `multiple` or `tags`",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "Get focus by default",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "The custom clear icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "defaultActiveFirstOption": {
        "property": "defaultActiveFirstOption",
        "description": "Whether active first option by default",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "Initial open state of dropdown",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "Initial selected option",
        "type": "string \\| string\\[] \\| <br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether disabled select",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "The className of dropdown menu",
        "type": "string",
        "default": "-",
        "version": "4.23.0"
      },
      "popupMatchSelectWidth": {
        "property": "popupMatchSelectWidth",
        "description": "Determine whether the popup menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll",
        "type": "boolean \\| number",
        "default": "true",
        "version": "5.5.0"
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "Customize dropdown content",
        "type": "(originNode: ReactNode) => ReactNode",
        "default": "-",
        "version": ""
      },
      "dropdownStyle": {
        "property": "dropdownStyle",
        "description": "The style of dropdown menu",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "Customize node label, value, options，groupLabel field name",
        "type": "object",
        "default": "{ label: `label`, value: `value`, options: `options`, groupLabel: `label` }",
        "version": "4.17.0 (`groupLabel` added in 5.6.0)"
      },
      "filterOption": {
        "property": "filterOption",
        "description": "If true, filter options by input, if function, filter options against it. The function will receive two arguments, `inputValue` and `option`, if the function returns `true`, the option will be included in the filtered set; Otherwise, it will be excluded",
        "type": "boolean \\| function(inputValue, option)",
        "default": "true",
        "version": ""
      },
      "filterSort": {
        "property": "filterSort",
        "description": "Sort function for search options sorting, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction",
        "type": "(optionA: Option, optionB: Option) => number",
        "default": "-",
        "version": "4.9.0"
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "Parent Node which the selector should be rendered to. Default to `body`. When position issues happen, try to modify it into scrollable content and position it relative. [Example](https://codesandbox.io/s/4j168r7jw0)",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "labelInValue": {
        "property": "labelInValue",
        "description": "Whether to embed label in value, turn the format of value from `string` to { value: string, label: ReactNode }",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "listHeight": {
        "property": "listHeight",
        "description": "Config popup height",
        "type": "number",
        "default": "256",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Indicate loading state",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "Max tag count to show. `responsive` will cost render performance",
        "type": "number \\| `responsive`",
        "default": "-",
        "version": "responsive: 4.10"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "Placeholder for not showing tags",
        "type": "ReactNode \\| function(omittedValues)",
        "default": "-",
        "version": ""
      },
      "maxTagTextLength": {
        "property": "maxTagTextLength",
        "description": "Max tag text length to show",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "menuItemSelectedIcon": {
        "property": "menuItemSelectedIcon",
        "description": "The custom menuItemSelected icon with multiple options",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "mode": {
        "property": "mode",
        "description": "Set mode of Select",
        "type": "`multiple` \\| `tags`",
        "default": "-",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "Specify content to show when no result matches",
        "type": "ReactNode",
        "default": "`Not Found`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Controlled open state of dropdown",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "optionFilterProp": {
        "property": "optionFilterProp",
        "description": "Which prop value of option will be used for filter if filterOption is true. If `options` is set, it should be set to `label`",
        "type": "string",
        "default": "`value`",
        "version": ""
      },
      "optionLabelProp": {
        "property": "optionLabelProp",
        "description": "Which prop value of option will render as content of select. [Example](https://codesandbox.io/s/antd-reproduction-template-tk678)",
        "type": "string",
        "default": "`children`",
        "version": ""
      },
      "options": {
        "property": "options",
        "description": "Select options. Will get better perf than jsx definition",
        "type": "{ label, value }\\[]",
        "default": "-",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "Placeholder of select",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "The position where the selection box pops up",
        "type": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "default": "bottomLeft",
        "version": ""
      },
      "removeIcon": {
        "property": "removeIcon",
        "description": "The custom remove icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "searchValue": {
        "property": "searchValue",
        "description": "The current input \"search\" text",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "Whether to show the drop-down arrow",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "Whether select is searchable",
        "type": "boolean",
        "default": "single: false, multiple: true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Size of Select input",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`middle`",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "The custom suffix icon. Customize icon will not response click open to avoid icon designed to do other interactive. You can use `pointer-events: none` style to bypass",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "tagRender": {
        "property": "tagRender",
        "description": "Customize tag render, only applies when `mode` is set to `multiple` or `tags`",
        "type": "(props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "tokenSeparators": {
        "property": "tokenSeparators",
        "description": "Separator used to tokenize, only applies when `mode=\"tags\"`",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Current selected option (considered as a immutable array)",
        "type": "string \\| string\\[] \\| <br />number \\| number\\[] \\| <br />LabeledValue \\| LabeledValue\\[]",
        "default": "-",
        "version": ""
      },
      "virtual": {
        "property": "virtual",
        "description": "Disable virtual scroll when set to false",
        "type": "boolean",
        "default": "true",
        "version": "4.1.0"
      },
      "onBlur": {
        "property": "onBlur",
        "description": "Called when blur",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Called when select an option or input value change",
        "type": "function(value, option:Option \\| Array&lt;Option>)",
        "default": "-",
        "version": ""
      },
      "onClear": {
        "property": "onClear",
        "description": "Called when clear",
        "type": "function",
        "default": "-",
        "version": "4.6.0"
      },
      "onDeselect": {
        "property": "onDeselect",
        "description": "Called when an option is deselected, param is the selected option's value. Only called for `multiple` or `tags`, effective in multiple or tags mode only",
        "type": "function(value: string \\| number \\| LabeledValue)",
        "default": "-",
        "version": ""
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "Called when dropdown open",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      "onFocus": {
        "property": "onFocus",
        "description": "Called when focus",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onInputKeyDown": {
        "property": "onInputKeyDown",
        "description": "Called when key pressed",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onMouseEnter": {
        "property": "onMouseEnter",
        "description": "Called when mouse enter",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onMouseLeave": {
        "property": "onMouseLeave",
        "description": "Called when mouse leave",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onPopupScroll": {
        "property": "onPopupScroll",
        "description": "Called when dropdown scrolls",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "Callback function that is fired when input changed",
        "type": "function(value: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Called when an option is selected, the params are option's value (or key) and option instance",
        "type": "function(value: string \\| number \\| LabeledValue, option: Option)",
        "default": "-",
        "version": ""
      }
    },
    "Slider": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "Whether get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "The default value of slider. When `range` is false, use number, otherwise, use \\[number, number]",
        "type": "number \\| \\[number, number]",
        "default": "0 \\| \\[0, 0]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "If true, the slider will not be intractable",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "keyboard": {
        "property": "keyboard",
        "description": "Support using keyboard to move handlers",
        "type": "boolean",
        "default": "true",
        "version": "5.2.0+"
      },
      "dots": {
        "property": "dots",
        "description": "Whether the thumb can drag over tick only",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "included": {
        "property": "included",
        "description": "Make effect when `marks` not null, true means containment and false means coordinative",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "marks": {
        "property": "marks",
        "description": "Tick mark of Slider, type of key must be `number`, and must in closed interval \\[min, max], each mark can declare its own style",
        "type": "object",
        "default": "{ number: ReactNode } \\| { number: { style: CSSProperties, label: ReactNode } }",
        "version": ""
      },
      "max": {
        "property": "max",
        "description": "The maximum value the slider can slide to",
        "type": "number",
        "default": "100",
        "version": ""
      },
      "min": {
        "property": "min",
        "description": "The minimum value the slider can slide to",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "range": {
        "property": "range",
        "description": "Dual thumb mode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "reverse": {
        "property": "reverse",
        "description": "Reverse the component",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "step": {
        "property": "step",
        "description": "The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When `marks` no null, `step` can be null",
        "type": "number \\| null",
        "default": "1",
        "version": ""
      },
      "tooltip": {
        "property": "tooltip",
        "description": "The tooltip relate props",
        "type": "[tooltip](#tooltip)",
        "default": "-",
        "version": "4.23.0"
      },
      "value": {
        "property": "value",
        "description": "The value of slider. When `range` is false, use number, otherwise, use \\[number, number]",
        "type": "number \\| \\[number, number]",
        "default": "-",
        "version": ""
      },
      "vertical": {
        "property": "vertical",
        "description": "If true, the slider will be vertical",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onAfterChange": {
        "property": "onAfterChange",
        "description": "Fire when onmouseup is fired",
        "type": "(value) => void",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback function that is fired when the user changes the slider's value",
        "type": "(value) => void",
        "default": "-",
        "version": ""
      },
      "trackStyle": {
        "property": "trackStyle",
        "description": "The style of slider track (the active range)",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "railStyle": {
        "property": "railStyle",
        "description": "The style of slider rail (the background)",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "handleStyle": {
        "property": "handleStyle",
        "description": "The style of slider handle",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Spin": {
      "delay": {
        "property": "delay",
        "description": "Specifies a delay in milliseconds for loading state (prevent flush)",
        "type": "number (milliseconds)",
        "default": "-",
        "version": ""
      },
      "indicator": {
        "property": "indicator",
        "description": "React node of the spinning indicator",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "The size of Spin, options: `small`, `default` and `large`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "spinning": {
        "property": "spinning",
        "description": "Whether Spin is visible",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "tip": {
        "property": "tip",
        "description": "Customize description content when Spin has children",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "wrapperClassName": {
        "property": "wrapperClassName",
        "description": "The className of wrapper when Spin has children",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Select.OptGroup": {
      "key": {
        "property": "key",
        "description": "Group key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "label": {
        "property": "label",
        "description": "Group label",
        "type": "string \\| React.Element",
        "default": "-",
        "version": ""
      }
    },
    "Select.Option": {
      "className": {
        "property": "className",
        "description": "The additional class to option",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable this option",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "`title` attribute of Select Option",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Default to filter with this property",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      }
    },
    "Space": {
      "align": {
        "property": "align",
        "description": "Align items",
        "type": "`start` \\| `end` \\|`center` \\|`baseline`",
        "default": "-",
        "version": "4.2.0"
      },
      "direction": {
        "property": "direction",
        "description": "The space direction",
        "type": "`vertical` \\| `horizontal`",
        "default": "`horizontal`",
        "version": "4.1.0"
      },
      "size": {
        "property": "size",
        "description": "The space size",
        "type": "[Size](#size) \\| [Size\\[\\]](#size)",
        "default": "`small`",
        "version": "4.1.0 \\| Array: 4.9.0"
      },
      "split": {
        "property": "split",
        "description": "Set split",
        "type": "ReactNode",
        "default": "-",
        "version": "4.7.0"
      },
      "wrap": {
        "property": "wrap",
        "description": "Auto wrap line, when `horizontal` effective",
        "type": "boolean",
        "default": "false",
        "version": "4.9.0"
      }
    },
    "Steps": {
      "className": {
        "property": "className",
        "description": "Additional class to Steps",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "current": {
        "property": "current",
        "description": "To set the current step, counting from 0. You can overwrite this state by using `status` of `Step`",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "direction": {
        "property": "direction",
        "description": "To specify the direction of the step bar, `horizontal` or `vertical`",
        "type": "string",
        "default": "`horizontal`",
        "version": ""
      },
      "initial": {
        "property": "initial",
        "description": "Set the initial step, counting from 0",
        "type": "number",
        "default": "0",
        "version": ""
      },
      "labelPlacement": {
        "property": "labelPlacement",
        "description": "Place title and description with `horizontal` or `vertical` direction",
        "type": "string",
        "default": "`horizontal`",
        "version": ""
      },
      "percent": {
        "property": "percent",
        "description": "Progress circle percentage of current step in `process` status (only works on basic Steps)",
        "type": "number",
        "default": "-",
        "version": "4.5.0"
      },
      "progressDot": {
        "property": "progressDot",
        "description": "Steps with progress dot style, customize the progress dot by setting it to a function. labelPlacement will be `vertical`",
        "type": "boolean \\| (iconDot, {index, status, title, description}) => ReactNode",
        "default": "false",
        "version": ""
      },
      "responsive": {
        "property": "responsive",
        "description": "Change to vertical direction when screen width smaller than `532px`",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "To specify the size of the step bar, `default` and `small` are currently supported",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "To specify the status of current step, can be set to one of the following values: `wait` `process` `finish` `error`",
        "type": "string",
        "default": "`process`",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Type of steps, can be set to one of the following values: `default` `navigation` `inline`",
        "type": "string",
        "default": "`default`",
        "version": "inline: 5.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "Trigger when Step is changed",
        "type": "(current) => void",
        "default": "-",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "StepItem content",
        "type": "[StepItem](#stepitem)",
        "default": "\\[]",
        "version": "4.24.0"
      }
    },
    "Statistic": {
      "decimalSeparator": {
        "property": "decimalSeparator",
        "description": "The decimal separator",
        "type": "string",
        "default": "`.`",
        "version": ""
      },
      "formatter": {
        "property": "formatter",
        "description": "Customize value display logic",
        "type": "(value) => ReactNode",
        "default": "-",
        "version": ""
      },
      "groupSeparator": {
        "property": "groupSeparator",
        "description": "Group separator",
        "type": "string",
        "default": "`,`",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Loading status of Statistic",
        "type": "boolean",
        "default": "false",
        "version": "4.8.0"
      },
      "precision": {
        "property": "precision",
        "description": "The precision of input value",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "The prefix node of value",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "suffix": {
        "property": "suffix",
        "description": "The suffix node of value",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Display title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Display value",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "valueStyle": {
        "property": "valueStyle",
        "description": "Set value section style",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      }
    },
    "Statistic.Countdown": {
      "format": {
        "property": "format",
        "description": "Format as [dayjs](https://day.js.org/)",
        "type": "string",
        "default": "`HH:mm:ss`",
        "version": ""
      },
      "prefix": {
        "property": "prefix",
        "description": "The prefix node of value",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "suffix": {
        "property": "suffix",
        "description": "The suffix node of value",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Display title",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Set target countdown time",
        "type": "number \\| dayjs",
        "default": "-",
        "version": ""
      },
      "valueStyle": {
        "property": "valueStyle",
        "description": "Set value section style",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "onFinish": {
        "property": "onFinish",
        "description": "Trigger when time's up",
        "type": "() => void",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Trigger when time's changing",
        "type": "(value: number) => void",
        "default": "-",
        "version": "4.16.0"
      }
    },
    "Switch": {
      "autoFocus": {
        "property": "autoFocus",
        "description": "Whether get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checked": {
        "property": "checked",
        "description": "Determine whether the Switch is checked",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkedChildren": {
        "property": "checkedChildren",
        "description": "The content to be shown when the state is checked",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "The additional class to Switch",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "defaultChecked": {
        "property": "defaultChecked",
        "description": "Whether to set the initial state",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable switch",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Loading state of switch",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "The size of the Switch, options: `default` `small`",
        "type": "string",
        "default": "`default`",
        "version": ""
      },
      "unCheckedChildren": {
        "property": "unCheckedChildren",
        "description": "The content to be shown when the state is unchecked",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Trigger when the checked state is changing",
        "type": "function(checked: boolean, event: Event)",
        "default": "-",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "Trigger when clicked",
        "type": "function(checked: boolean, event: Event)",
        "default": "-",
        "version": ""
      }
    },
    "Tabs": {
      "activeKey": {
        "property": "activeKey",
        "description": "Current TabPane's key",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "addIcon": {
        "property": "addIcon",
        "description": "Customize add icon",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      "animated": {
        "property": "animated",
        "description": "Whether to change tabs with animation. Only works while `tabPosition=\"top\"`",
        "type": "boolean \\| { inkBar: boolean, tabPane: boolean }",
        "default": "{ inkBar: true, tabPane: false }",
        "version": ""
      },
      "centered": {
        "property": "centered",
        "description": "Centers tabs",
        "type": "boolean",
        "default": "false",
        "version": "4.4.0"
      },
      "defaultActiveKey": {
        "property": "defaultActiveKey",
        "description": "Initial active TabPane's key, if `activeKey` is not set",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "hideAdd": {
        "property": "hideAdd",
        "description": "Hide plus icon or not. Only works while `type=\"editable-card\"`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "Configure tab content",
        "type": "[TabItemType](#tabitemtype)",
        "default": "\\[]",
        "version": "4.23.0"
      },
      "moreIcon": {
        "property": "moreIcon",
        "description": "The custom icon of ellipsis",
        "type": "ReactNode",
        "default": "&lt;EllipsisOutlined />",
        "version": "4.14.0"
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "`className` for more dropdown.",
        "type": "string",
        "default": "-",
        "version": "4.21.0"
      },
      "renderTabBar": {
        "property": "renderTabBar",
        "description": "Replace the TabBar",
        "type": "(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement",
        "default": "-",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Preset tab bar size",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`middle`",
        "version": ""
      },
      "tabBarExtraContent": {
        "property": "tabBarExtraContent",
        "description": "Extra content in tab bar",
        "type": "ReactNode \\| {left?: ReactNode, right?: ReactNode}",
        "default": "-",
        "version": "object: 4.6.0"
      },
      "tabBarGutter": {
        "property": "tabBarGutter",
        "description": "The gap between tabs",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "tabBarStyle": {
        "property": "tabBarStyle",
        "description": "Tab bar style object",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "tabPosition": {
        "property": "tabPosition",
        "description": "Position of tabs",
        "type": "`top` \\| `right` \\| `bottom` \\| `left`",
        "default": "`top`",
        "version": ""
      },
      "destroyInactiveTabPane": {
        "property": "destroyInactiveTabPane",
        "description": "Whether destroy inactive TabPane when change tab",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "type": {
        "property": "type",
        "description": "Basic style of tabs",
        "type": "`line` \\| `card` \\| `editable-card`",
        "default": "`line`",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback executed when active tab is changed",
        "type": "function(activeKey) {}",
        "default": "-",
        "version": ""
      },
      "onEdit": {
        "property": "onEdit",
        "description": "Callback executed when tab is added or removed. Only works while `type=\"editable-card\"`",
        "type": "(action === 'add' ? event : targetKey, action): void",
        "default": "-",
        "version": ""
      },
      "onTabClick": {
        "property": "onTabClick",
        "description": "Callback executed when tab is clicked",
        "type": "function(key: string, event: MouseEvent)",
        "default": "-",
        "version": ""
      },
      "onTabScroll": {
        "property": "onTabScroll",
        "description": "Trigger when tab scroll",
        "type": "function({ direction: `left` \\| `right` \\| `top` \\| `bottom` })",
        "default": "-",
        "version": "4.3.0"
      }
    },
    "Table": {
      "bordered": {
        "property": "bordered",
        "description": "Whether to show all table borders",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "columns": {
        "property": "columns",
        "description": "Columns of table",
        "type": "[ColumnsType](#column)\\[]",
        "default": "-",
        "version": ""
      },
      "components": {
        "property": "components",
        "description": "Override default table elements",
        "type": "[TableComponents](https://github.com/react-component/table/blob/75ee0064e54a4b3215694505870c9d6c817e9e4a/src/interface.ts#L129)",
        "default": "-",
        "version": ""
      },
      "dataSource": {
        "property": "dataSource",
        "description": "Data record array to be displayed",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "expandable": {
        "property": "expandable",
        "description": "Config expandable content",
        "type": "[expandable](#expandable)",
        "default": "-",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "Table footer renderer",
        "type": "function(currentPageData)",
        "default": "-",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "The render container of dropdowns in table",
        "type": "(triggerNode) => HTMLElement",
        "default": "() => TableHtmlElement",
        "version": ""
      },
      "loading": {
        "property": "loading",
        "description": "Loading status of table",
        "type": "boolean \\| [Spin Props](/components/spin/#api)",
        "default": "false",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "The i18n text including filter, sort, empty text, etc",
        "type": "object",
        "default": "[Default Value](https://github.com/ant-design/ant-design/blob/6dae4a7e18ad1ba193aedd5ab6867e1d823e2aa4/components/locale/en_US.tsx#L19-L37)",
        "version": ""
      },
      "pagination": {
        "property": "pagination",
        "description": "Config of pagination. You can ref table pagination [config](#pagination) or full [`pagination`](/components/pagination/) document, hide it by setting it to `false`",
        "type": "object \\| `false`",
        "default": "-",
        "version": ""
      },
      "rowClassName": {
        "property": "rowClassName",
        "description": "Row's className",
        "type": "function(record, index): string",
        "default": "-",
        "version": ""
      },
      "rowKey": {
        "property": "rowKey",
        "description": "Row's unique key, could be a string or function that returns a string",
        "type": "string \\| function(record): string",
        "default": "`key`",
        "version": ""
      },
      "rowSelection": {
        "property": "rowSelection",
        "description": "Row selection [config](#rowselection)",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "scroll": {
        "property": "scroll",
        "description": "Whether the table can be scrollable, [config](#scroll)",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "showHeader": {
        "property": "showHeader",
        "description": "Whether to show table header",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "showSorterTooltip": {
        "property": "showSorterTooltip",
        "description": "The header show next sorter direction tooltip. It will be set as the property of Tooltip if its type is object",
        "type": "boolean \\| [Tooltip props](/components/tooltip/#api)",
        "default": "true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "Size of table",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "`large`",
        "version": ""
      },
      "sortDirections": {
        "property": "sortDirections",
        "description": "Supported sort way, could be `ascend`, `descend`",
        "type": "Array",
        "default": "\\[`ascend`, `descend`]",
        "version": ""
      },
      "sticky": {
        "property": "sticky",
        "description": "Set sticky header and scroll bar",
        "type": "boolean \\| `{offsetHeader?: number, offsetScroll?: number, getContainer?: () => HTMLElement}`",
        "default": "-",
        "version": "4.6.0 (getContainer: 4.7.0)"
      },
      "summary": {
        "property": "summary",
        "description": "Summary content",
        "type": "(currentData) => ReactNode",
        "default": "-",
        "version": ""
      },
      "tableLayout": {
        "property": "tableLayout",
        "description": "The [table-layout](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout) attribute of table element",
        "type": "- \\| `auto` \\| `fixed`",
        "default": "-<hr />`fixed` when header/columns are fixed, or using `column.ellipsis`",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Table title renderer",
        "type": "function(currentPageData)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback executed when pagination, filters or sorter is changed",
        "type": "function(pagination, filters, sorter, extra: { currentDataSource: \\[], action: `paginate` \\| `sort` \\| `filter` })",
        "default": "-",
        "version": ""
      },
      "onHeaderRow": {
        "property": "onHeaderRow",
        "description": "Set props on per header row",
        "type": "function(columns, index)",
        "default": "-",
        "version": ""
      },
      "onRow": {
        "property": "onRow",
        "description": "Set props on per row",
        "type": "function(record, index)",
        "default": "-",
        "version": ""
      }
    },
    "Table.Column": {
      "align": {
        "property": "align",
        "description": "The specify which way that column is aligned",
        "type": "`left` \\| `right` \\| `center`",
        "default": "`left`",
        "version": ""
      },
      "className": {
        "property": "className",
        "description": "The className of this column",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "colSpan": {
        "property": "colSpan",
        "description": "Span of this column's title",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "dataIndex": {
        "property": "dataIndex",
        "description": "Display field of the data record, support nest path by string array",
        "type": "string \\| string\\[]",
        "default": "-",
        "version": ""
      },
      "defaultFilteredValue": {
        "property": "defaultFilteredValue",
        "description": "Default filtered values",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "filterResetToDefaultFilteredValue": {
        "property": "filterResetToDefaultFilteredValue",
        "description": "click the reset button, whether to restore the default filter",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultSortOrder": {
        "property": "defaultSortOrder",
        "description": "Default order of sorted values",
        "type": "`ascend` \\| `descend`",
        "default": "-",
        "version": ""
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "The ellipsis cell content, not working with sorter and filters for now.<br />tableLayout would be `fixed` when `ellipsis` is `true` or `{ showTitle?: boolean }`",
        "type": "boolean \\| {showTitle?: boolean }",
        "default": "false",
        "version": "showTitle: 4.3.0"
      },
      "filterDropdown": {
        "property": "filterDropdown",
        "description": "Customized filter overlay",
        "type": "ReactNode \\| (props: [FilterDropdownProps](https://github.com/ant-design/ant-design/blob/ecc54dda839619e921c0ace530408871f0281c2a/components/table/interface.tsx#L79)) => ReactNode",
        "default": "-",
        "version": ""
      },
      "filterDropdownOpen": {
        "property": "filterDropdownOpen",
        "description": "Whether `filterDropdown` is visible",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "filtered": {
        "property": "filtered",
        "description": "Whether the `dataSource` is filtered",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "filteredValue": {
        "property": "filteredValue",
        "description": "Controlled filtered value, filter icon will highlight",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "filterIcon": {
        "property": "filterIcon",
        "description": "Customized filter icon",
        "type": "ReactNode \\| (filtered: boolean) => ReactNode",
        "default": "-",
        "version": ""
      },
      "filterMultiple": {
        "property": "filterMultiple",
        "description": "Whether multiple filters can be selected",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "filterMode": {
        "property": "filterMode",
        "description": "To specify the filter interface",
        "type": "'menu' \\| 'tree'",
        "default": "'menu'",
        "version": "4.17.0"
      },
      "filterSearch": {
        "property": "filterSearch",
        "description": "Whether to be searchable for filter menu",
        "type": "boolean \\| function(input, record):boolean",
        "default": "false",
        "version": "boolean:4.17.0 function:4.19.0"
      },
      "filters": {
        "property": "filters",
        "description": "Filter menu config",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "fixed": {
        "property": "fixed",
        "description": "(IE not support) Set column to be fixed: `true`(same as left) `'left'` `'right'`",
        "type": "boolean \\| string",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Unique key of this column, you can ignore this prop if you've set a unique `dataIndex`",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "render": {
        "property": "render",
        "description": "Renderer of the table cell. The return value should be a ReactNode",
        "type": "function(text, record, index) {}",
        "default": "-",
        "version": ""
      },
      "responsive": {
        "property": "responsive",
        "description": "The list of breakpoints at which to display this column. Always visible if not set",
        "type": "[Breakpoint](https://github.com/ant-design/ant-design/blob/015109b42b85c63146371b4e32b883cf97b088e8/components/_util/responsiveObserve.ts#L1)\\[]",
        "default": "-",
        "version": "4.2.0"
      },
      "rowScope": {
        "property": "rowScope",
        "description": "Set scope attribute for all cells in this column",
        "type": "`row` \\| `rowgroup`",
        "default": "-",
        "version": "5.1.0"
      },
      "shouldCellUpdate": {
        "property": "shouldCellUpdate",
        "description": "Control cell render logic",
        "type": "(record, prevRecord) => boolean",
        "default": "-",
        "version": "4.3.0"
      },
      "showSorterTooltip": {
        "property": "showSorterTooltip",
        "description": "If header show next sorter direction tooltip, override `showSorterTooltip` in table",
        "type": "boolean \\| [Tooltip props](/components/tooltip/)",
        "default": "true",
        "version": ""
      },
      "sortDirections": {
        "property": "sortDirections",
        "description": "Supported sort way, override `sortDirections` in `Table`, could be `ascend`, `descend`",
        "type": "Array",
        "default": "\\[`ascend`, `descend`]",
        "version": ""
      },
      "sorter": {
        "property": "sorter",
        "description": "Sort function for local sort, see [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)'s compareFunction. If you need sort buttons only, set to `true`",
        "type": "function \\| boolean",
        "default": "-",
        "version": ""
      },
      "sortOrder": {
        "property": "sortOrder",
        "description": "Order of sorted values: `ascend` `descend` `null`",
        "type": "`ascend` \\| `descend` \\| null",
        "default": "-",
        "version": ""
      },
      "sortIcon": {
        "property": "sortIcon",
        "description": "Customized sort icon",
        "type": "(props: { sortOrder }) => ReactNode",
        "default": "-",
        "version": "5.6.0"
      },
      "title": {
        "property": "title",
        "description": "Title of this column",
        "type": "ReactNode \\| ({ sortOrder, sortColumn, filters }) => ReactNode",
        "default": "-",
        "version": ""
      },
      "width": {
        "property": "width",
        "description": "Width of this column ([width not working?](https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241))",
        "type": "string \\| number",
        "default": "-",
        "version": ""
      },
      "onCell": {
        "property": "onCell",
        "description": "Set props on per cell",
        "type": "function(record, rowIndex)",
        "default": "-",
        "version": ""
      },
      "onFilter": {
        "property": "onFilter",
        "description": "Function that determines if the row is displayed when filtered",
        "type": "function(value, record) => boolean",
        "default": "-",
        "version": ""
      },
      "onFilterDropdownOpenChange": {
        "property": "onFilterDropdownOpenChange",
        "description": "Callback executed when `filterDropdownOpen` is changed",
        "type": "function(visible) {}",
        "default": "-",
        "version": ""
      },
      "onHeaderCell": {
        "property": "onHeaderCell",
        "description": "Set props on per header cell",
        "type": "function(column)",
        "default": "-",
        "version": ""
      }
    },
    "Table.ColumnGroup": {
      "title": {
        "property": "title",
        "description": "Title of the column group",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      }
    },
    "Tag": {
      "closable": {
        "property": "closable",
        "description": "Whether the Tag can be closed",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "closeIcon": {
        "property": "closeIcon",
        "description": "Custom close icon",
        "type": "ReactNode",
        "default": "-",
        "version": "4.4.0"
      },
      "color": {
        "property": "color",
        "description": "Color of the Tag",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Set the icon of tag",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": "5.4.0"
      },
      "onClose": {
        "property": "onClose",
        "description": "Callback executed when tag is closed",
        "type": "(e) => void",
        "default": "-",
        "version": ""
      }
    },
    "Tag.CheckableTag": {
      "checked": {
        "property": "checked",
        "description": "Checked status of Tag",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback executed when Tag is checked/unchecked",
        "type": "(checked) => void",
        "default": "-",
        "version": ""
      }
    },
    "TimePicker": {
      "allowClear": {
        "property": "allowClear",
        "description": "Whether allow clearing text",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "autoFocus": {
        "property": "autoFocus",
        "description": "If get focus when component mounted",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "changeOnBlur": {
        "property": "changeOnBlur",
        "description": "Trigger `change` when blur. e.g. datetime picker no need click confirm button",
        "type": "boolean",
        "default": "false",
        "version": "5.5.0"
      },
      "className": {
        "property": "className",
        "description": "The className of picker",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "clearIcon": {
        "property": "clearIcon",
        "description": "The custom clear icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "clearText": {
        "property": "clearText",
        "description": "The clear tooltip of icon",
        "type": "string",
        "default": "clear",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "To set default time",
        "type": "[dayjs](http://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Determine whether the TimePicker is disabled",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabledTime": {
        "property": "disabledTime",
        "description": "To specify the time that cannot be selected",
        "type": "[DisabledTime](#disabledtime)",
        "default": "-",
        "version": "4.19.0"
      },
      "format": {
        "property": "format",
        "description": "To set the time format",
        "type": "string",
        "default": "`HH:mm:ss`",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "To set the container of the floating layer, while the default is to create a div element in body",
        "type": "function(trigger)",
        "default": "-",
        "version": ""
      },
      "hideDisabledOptions": {
        "property": "hideDisabledOptions",
        "description": "Whether hide the options that can not be selected",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "hourStep": {
        "property": "hourStep",
        "description": "Interval between hours in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "inputReadOnly": {
        "property": "inputReadOnly",
        "description": "Set the `readonly` attribute of the input tag (avoids virtual keyboard on touch devices)",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "minuteStep": {
        "property": "minuteStep",
        "description": "Interval between minutes in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Whether to popup panel",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "Display when there's no value",
        "type": "string \\| \\[string, string]",
        "default": "`Select a time`",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "The position where the selection box pops up",
        "type": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "default": "bottomLeft",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "The className of panel",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "popupStyle": {
        "property": "popupStyle",
        "description": "The style of panel",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "renderExtraFooter": {
        "property": "renderExtraFooter",
        "description": "Called from time picker panel to render some addon to its bottom",
        "type": "() => ReactNode",
        "default": "-",
        "version": ""
      },
      "secondStep": {
        "property": "secondStep",
        "description": "Interval between seconds in picker",
        "type": "number",
        "default": "1",
        "version": ""
      },
      "showNow": {
        "property": "showNow",
        "description": "Whether to show `Now` button on panel",
        "type": "boolean",
        "default": "-",
        "version": "4.4.0"
      },
      "size": {
        "property": "size",
        "description": "To determine the size of the input box, the height of `large` and `small`, are 40px and 24px respectively, while default size is 32px",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning' \\| 'success' \\| 'validating'",
        "default": "-",
        "version": "4.19.0"
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "The custom suffix icon",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "use12Hours": {
        "property": "use12Hours",
        "description": "Display as 12 hours format, with default format `h:mm:ss a`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "To set time",
        "type": "[dayjs](http://day.js.org/)",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "A callback function, can be executed when the selected time is changing",
        "type": "function(time: dayjs, timeString: string): void",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "A callback function which will be called while panel opening/closing",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "A callback function, executes when a value is selected",
        "type": "function(time: dayjs): void",
        "default": "-",
        "version": ""
      }
    },
    "Timeline": {
      "mode": {
        "property": "mode",
        "description": "By sending `alternate` the timeline will distribute the nodes to the left and right",
        "type": "`left` \\| `alternate` \\| `right`",
        "default": "-",
        "version": ""
      },
      "pending": {
        "property": "pending",
        "description": "Set the last ghost node's existence or its content",
        "type": "boolean \\| ReactNode",
        "default": "false",
        "version": ""
      },
      "pendingDot": {
        "property": "pendingDot",
        "description": "Set the dot of the last ghost node when pending is true",
        "type": "ReactNode",
        "default": "&lt;LoadingOutlined />",
        "version": ""
      },
      "reverse": {
        "property": "reverse",
        "description": "Whether reverse nodes or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "items": {
        "property": "items",
        "description": "Each node of timeline",
        "type": "[Items](#Items)\\[]",
        "default": "5.2.0",
        "version": ""
      }
    },
    "Tooltip": {
      "title": {
        "property": "title",
        "description": "The text shown in the tooltip",
        "type": "ReactNode \\| () => ReactNode",
        "default": "-",
        "version": ""
      },
      "align": {
        "property": "align",
        "description": "This value will be merged into placement's config, please refer to the settings [rc-tooltip](https://github.com/react-component/tooltip)",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "arrow": {
        "property": "arrow",
        "description": "Change arrow's visible state and change whether the arrow is pointed at the center of target.",
        "type": "boolean \\| { pointAtCenter: boolean }",
        "default": "true",
        "version": "5.2.0"
      },
      "autoAdjustOverflow": {
        "property": "autoAdjustOverflow",
        "description": "Whether to adjust popup placement automatically when popup is off screen",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "color": {
        "property": "color",
        "description": "The background color",
        "type": "string",
        "default": "-",
        "version": "4.3.0"
      },
      "defaultOpen": {
        "property": "defaultOpen",
        "description": "Whether the floating tooltip card is open by default",
        "type": "boolean",
        "default": "false",
        "version": "4.23.0"
      },
      "destroyTooltipOnHide": {
        "property": "destroyTooltipOnHide",
        "description": "Whether destroy tooltip when hidden",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "The DOM container of the tip, the default behavior is to create a `div` element in `body`",
        "type": "(triggerNode: HTMLElement) => HTMLElement",
        "default": "() => document.body",
        "version": ""
      },
      "mouseEnterDelay": {
        "property": "mouseEnterDelay",
        "description": "Delay in seconds, before tooltip is shown on mouse enter",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "mouseLeaveDelay": {
        "property": "mouseLeaveDelay",
        "description": "Delay in seconds, before tooltip is hidden on mouse leave",
        "type": "number",
        "default": "0.1",
        "version": ""
      },
      "overlayClassName": {
        "property": "overlayClassName",
        "description": "Class name of the tooltip card",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "overlayStyle": {
        "property": "overlayStyle",
        "description": "Style of the tooltip card",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "overlayInnerStyle": {
        "property": "overlayInnerStyle",
        "description": "Style of the tooltip inner content",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "The position of the tooltip relative to the target, which can be one of `top` `left` `right` `bottom` `topLeft` `topRight` `bottomLeft` `bottomRight` `leftTop` `leftBottom` `rightTop` `rightBottom`",
        "type": "string",
        "default": "`top`",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "Tooltip trigger mode. Could be multiple by passing an array",
        "type": "`hover` \\| `focus` \\| `click` \\| `contextMenu` \\| Array&lt;string>",
        "default": "`hover`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Whether the floating tooltip card is open or not. Use `visible` under 4.23.0 ([why?](/docs/react/faq#why-open))",
        "type": "boolean",
        "default": "false",
        "version": "4.23.0"
      },
      "zIndex": {
        "property": "zIndex",
        "description": "Config `z-index` of Tooltip",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "Callback executed when visibility of the tooltip card is changed",
        "type": "(open: boolean) => void",
        "default": "-",
        "version": "4.23.0"
      }
    },
    "Transfer": {
      "dataSource": {
        "property": "dataSource",
        "description": "Used for setting the source data. The elements that are part of this array will be present the left column. Except the elements whose keys are included in `targetKeys` prop",
        "type": "[RecordType extends TransferItem = TransferItem](https://github.com/ant-design/ant-design/blob/1bf0bab2a7bc0a774119f501806e3e0e3a6ba283/components/transfer/index.tsx#L12)\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether disabled transfer",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "filterOption": {
        "property": "filterOption",
        "description": "A function to determine whether an item should show in search result list, only works when searching",
        "type": "(inputValue, option): boolean",
        "default": "-",
        "version": ""
      },
      "footer": {
        "property": "footer",
        "description": "A function used for rendering the footer",
        "type": "(props, { direction }) => ReactNode",
        "default": "-",
        "version": "direction: 4.17.0"
      },
      "listStyle": {
        "property": "listStyle",
        "description": "A custom CSS style used for rendering the transfer columns",
        "type": "object \\| ({direction: `left` \\| `right`}) => object",
        "default": "-",
        "version": ""
      },
      "locale": {
        "property": "locale",
        "description": "The i18n text including filter, empty text, item unit, etc",
        "type": "{ itemUnit: string; itemsUnit: string; searchPlaceholder: string; notFoundContent: ReactNode \\| ReactNode\\[]; }",
        "default": "{ itemUnit: `item`, itemsUnit: `items`, notFoundContent: `The list is empty`, searchPlaceholder: `Search here` }",
        "version": ""
      },
      "oneWay": {
        "property": "oneWay",
        "description": "Display as single direction style",
        "type": "boolean",
        "default": "false",
        "version": "4.3.0"
      },
      "operations": {
        "property": "operations",
        "description": "A set of operations that are sorted from top to bottom",
        "type": "string\\[]",
        "default": "\\[`>`, `<`]",
        "version": ""
      },
      "operationStyle": {
        "property": "operationStyle",
        "description": "A custom CSS style used for rendering the operations column",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "pagination": {
        "property": "pagination",
        "description": "Use pagination. Not work in render props",
        "type": "boolean \\| { pageSize: number, simple: boolean, showSizeChanger?: boolean, showLessItems?: boolean }",
        "default": "false",
        "version": "4.3.0"
      },
      "render": {
        "property": "render",
        "description": "The function to generate the item shown on a column. Based on an record (element of the dataSource array), this function should return a React element which is generated from that record. Also, it can return a plain object with `value` and `label`, `label` is a React element and `value` is for title",
        "type": "(record) => ReactNode",
        "default": "-",
        "version": ""
      },
      "selectAllLabels": {
        "property": "selectAllLabels",
        "description": "A set of customized labels for select all checkboxes on the header",
        "type": "(ReactNode \\| (info: { selectedCount: number, totalCount: number }) => ReactNode)\\[]",
        "default": "-",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "A set of keys of selected items",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "If included, a search box is shown on each column",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showSelectAll": {
        "property": "showSelectAll",
        "description": "Show select all checkbox on the header",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "targetKeys": {
        "property": "targetKeys",
        "description": "A set of keys of elements that are listed on the right column",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "titles": {
        "property": "titles",
        "description": "A set of titles that are sorted from left to right",
        "type": "ReactNode\\[]",
        "default": "-",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "A callback function that is executed when the transfer between columns is complete",
        "type": "(targetKeys, direction, moveKeys): void",
        "default": "-",
        "version": ""
      },
      "onScroll": {
        "property": "onScroll",
        "description": "A callback function which is executed when scroll options list",
        "type": "(direction, event): void",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "A callback function which is executed when search field are changed",
        "type": "(direction: `left` \\| `right`, value: string): void",
        "default": "-",
        "version": ""
      },
      "onSelectChange": {
        "property": "onSelectChange",
        "description": "A callback function which is executed when selected items are changed",
        "type": "(sourceSelectedKeys, targetSelectedKeys): void",
        "default": "-",
        "version": ""
      }
    },
    "Tree": {
      "allowDrop": {
        "property": "allowDrop",
        "description": "Whether to allow dropping on the node",
        "type": "({ dropNode, dropPosition }) => boolean",
        "default": "-",
        "version": ""
      },
      "autoExpandParent": {
        "property": "autoExpandParent",
        "description": "Whether to automatically expand a parent treeNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "blockNode": {
        "property": "blockNode",
        "description": "Whether treeNode fill remaining horizontal space",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkable": {
        "property": "checkable",
        "description": "Add a Checkbox before the treeNodes",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "checkedKeys": {
        "property": "checkedKeys",
        "description": "(Controlled) Specifies the keys of the checked treeNodes (PS: When this specifies the key of a treeNode which is also a parent treeNode, all the children treeNodes of will be checked; and vice versa, when it specifies the key of a treeNode which is a child treeNode, its parent treeNode will also be checked. When `checkable` and `checkStrictly` is true, its object has `checked` and `halfChecked` property. Regardless of whether the child or parent treeNode is checked, they won't impact each other",
        "type": "string\\[] \\| {checked: string\\[], halfChecked: string\\[]}",
        "default": "\\[]",
        "version": ""
      },
      "checkStrictly": {
        "property": "checkStrictly",
        "description": "Check treeNode precisely; parent treeNode and children treeNodes are not associated",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultCheckedKeys": {
        "property": "defaultCheckedKeys",
        "description": "Specifies the keys of the default checked treeNodes",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "defaultExpandAll": {
        "property": "defaultExpandAll",
        "description": "Whether to expand all treeNodes by default",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "defaultExpandedKeys": {
        "property": "defaultExpandedKeys",
        "description": "Specify the keys of the default expanded treeNodes",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "defaultExpandParent": {
        "property": "defaultExpandParent",
        "description": "If auto expand parent treeNodes when init",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultSelectedKeys": {
        "property": "defaultSelectedKeys",
        "description": "Specifies the keys of the default selected treeNodes",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Whether disabled the tree",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "draggable": {
        "property": "draggable",
        "description": "Specifies whether this Tree or the node is draggable. Use `icon: false` to disable drag handler icon",
        "type": "boolean \\| ((node: DataNode) => boolean) \\| { icon?: React.ReactNode \\| false, nodeDraggable?: (node: DataNode) => boolean }",
        "default": "false",
        "version": "`config`: 4.17.0"
      },
      "expandedKeys": {
        "property": "expandedKeys",
        "description": "(Controlled) Specifies the keys of the expanded treeNodes",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "Customize node title, key, children field name",
        "type": "object",
        "default": "{ title: `title`, key: `key`, children: `children` }",
        "version": "4.17.0"
      },
      "filterTreeNode": {
        "property": "filterTreeNode",
        "description": "Defines a function to filter (highlight) treeNodes. When the function returns `true`, the corresponding treeNode will be highlighted",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "height": {
        "property": "height",
        "description": "Config virtual scroll height. Will not support horizontal scroll when enable this",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Customize treeNode icon",
        "type": "ReactNode \\| (props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "Load data asynchronously",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "loadedKeys": {
        "property": "loadedKeys",
        "description": "(Controlled) Set loaded tree nodes. Need work with `loadData`",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "Allows selecting multiple treeNodes",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "rootClassName": {
        "property": "rootClassName",
        "description": "ClassName on the root element",
        "type": "string",
        "default": "-",
        "version": "4.20.0"
      },
      "rootStyle": {
        "property": "rootStyle",
        "description": "Style on the root element",
        "type": "CSSProperties",
        "default": "-",
        "version": "4.20.0"
      },
      "selectable": {
        "property": "selectable",
        "description": "Whether can be selected",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "selectedKeys": {
        "property": "selectedKeys",
        "description": "(Controlled) Specifies the keys of the selected treeNodes",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "showIcon": {
        "property": "showIcon",
        "description": "Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "showLine": {
        "property": "showLine",
        "description": "Shows a connecting line",
        "type": "boolean \\| {showLeafIcon: boolean \\| ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)}",
        "default": "false",
        "version": ""
      },
      "switcherIcon": {
        "property": "switcherIcon",
        "description": "Customize collapse/expand icon of tree node",
        "type": "ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)",
        "default": "-",
        "version": "renderProps: 4.20.0"
      },
      "titleRender": {
        "property": "titleRender",
        "description": "Customize tree node title render",
        "type": "(nodeData) => ReactNode",
        "default": "-",
        "version": "4.5.0"
      },
      "treeData": {
        "property": "treeData",
        "description": "The treeNodes data Array, if set it then you need not to construct children TreeNode. (key should be unique across the whole array)",
        "type": "array&lt;{ key, title, children, \\[disabled, selectable] }>",
        "default": "-",
        "version": ""
      },
      "virtual": {
        "property": "virtual",
        "description": "Disable virtual scroll when set to false",
        "type": "boolean",
        "default": "true",
        "version": "4.1.0"
      },
      "onCheck": {
        "property": "onCheck",
        "description": "Callback function for when the onCheck event occurs",
        "type": "function(checkedKeys, e:{checked: bool, checkedNodes, node, event, halfCheckedKeys})",
        "default": "-",
        "version": ""
      },
      "onDragEnd": {
        "property": "onDragEnd",
        "description": "Callback function for when the onDragEnd event occurs",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragEnter": {
        "property": "onDragEnter",
        "description": "Callback function for when the onDragEnter event occurs",
        "type": "function({event, node, expandedKeys})",
        "default": "-",
        "version": ""
      },
      "onDragLeave": {
        "property": "onDragLeave",
        "description": "Callback function for when the onDragLeave event occurs",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragOver": {
        "property": "onDragOver",
        "description": "Callback function for when the onDragOver event occurs",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDragStart": {
        "property": "onDragStart",
        "description": "Callback function for when the onDragStart event occurs",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onDrop": {
        "property": "onDrop",
        "description": "Callback function for when the onDrop event occurs",
        "type": "function({event, node, dragNode, dragNodesKeys})",
        "default": "-",
        "version": ""
      },
      "onExpand": {
        "property": "onExpand",
        "description": "Callback function for when a treeNode is expanded or collapsed",
        "type": "function(expandedKeys, {expanded: bool, node})",
        "default": "-",
        "version": ""
      },
      "onLoad": {
        "property": "onLoad",
        "description": "Callback function for when a treeNode is loaded",
        "type": "function(loadedKeys, {event, node})",
        "default": "-",
        "version": ""
      },
      "onRightClick": {
        "property": "onRightClick",
        "description": "Callback function for when the user right clicks a treeNode",
        "type": "function({event, node})",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "Callback function for when the user clicks a treeNode",
        "type": "function(selectedKeys, e:{selected: bool, selectedNodes, node, event})",
        "default": "-",
        "version": ""
      }
    },
    "Tree.TreeNode": {
      "checkable": {
        "property": "checkable",
        "description": "When Tree is checkable, set TreeNode display Checkbox or not",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "disableCheckbox": {
        "property": "disableCheckbox",
        "description": "Disables the checkbox of the treeNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disables the treeNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "icon": {
        "property": "icon",
        "description": "Customize icon. When you pass component, whose render will receive full TreeNode props as component props",
        "type": "ReactNode \\| (props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "isLeaf": {
        "property": "isLeaf",
        "description": "Determines if this is a leaf node(effective when `loadData` is specified). `false` will force trade TreeNode as a parent node",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Used with (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys. P.S.: It must be unique in all of treeNodes of the tree",
        "type": "string",
        "default": "(internal calculated position of treeNode)",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "Set whether the treeNode can be selected",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Title",
        "type": "ReactNode",
        "default": "`---`",
        "version": ""
      }
    },
    "Tree.DirectoryTree": {
      "expandAction": {
        "property": "expandAction",
        "description": "Directory open logic, optional: false \\| `click` \\| `doubleClick`",
        "type": "string \\| boolean",
        "default": "`click`",
        "version": ""
      }
    },
    "Typography.Text": {
      "code": {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "copyable": {
        "property": "copyable",
        "description": "Whether to be copyable, customize it via setting an object",
        "type": "boolean \\| [copyable](#copyable)",
        "default": "false",
        "version": "[copyable](#copyable)"
      },
      "delete": {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "editable": {
        "property": "editable",
        "description": "If editable. Can control edit state when is object",
        "type": "boolean \\| [editable](#editable)",
        "default": "false",
        "version": "[editable](#editable)"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows，can't configure expandable、rows and onExpand by using object. Diff with Typography.Paragraph, Text do not have 100% width style which means it will fix width on the first ellipsis. If you want to have responsive ellipsis, please set width manually",
        "type": "boolean \\| [Omit&lt;ellipsis, 'expandable' \\| 'rows' \\| 'onExpand'>](#ellipsis)",
        "default": "false",
        "version": "[ellipsis](#ellipsis)"
      },
      "keyboard": {
        "property": "keyboard",
        "description": "Keyboard style",
        "type": "boolean",
        "default": "false",
        "version": "4.3.0"
      },
      "mark": {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "Set the handler to handle click event",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      "strong": {
        "property": "strong",
        "description": "Bold style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "italic": {
        "property": "italic",
        "description": "Italic style",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      "type": {
        "property": "type",
        "description": "Content type",
        "type": "`secondary` \\| `success` \\| `warning` \\| `danger`",
        "default": "-",
        "version": "success: 4.6.0"
      },
      "underline": {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    },
    "TreeSelect": {
      "allowClear": {
        "property": "allowClear",
        "description": "Whether allow clear",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "autoClearSearchValue": {
        "property": "autoClearSearchValue",
        "description": "If auto clear search input value when multiple select is selected/deselected",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "bordered": {
        "property": "bordered",
        "description": "Whether has border style",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "To set the initial selected treeNode(s)",
        "type": "string \\| string\\[]",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "popupClassName": {
        "property": "popupClassName",
        "description": "The className of dropdown menu",
        "type": "string",
        "default": "-",
        "version": "4.23.0"
      },
      "popupMatchSelectWidth": {
        "property": "popupMatchSelectWidth",
        "description": "Determine whether the popup menu and the select input are the same width. Default set `min-width` same as input. Will ignore when value less than select width. `false` will disable virtual scroll",
        "type": "boolean \\| number",
        "default": "true",
        "version": "5.5.0"
      },
      "dropdownRender": {
        "property": "dropdownRender",
        "description": "Customize dropdown content",
        "type": "(originNode: ReactNode, props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "dropdownStyle": {
        "property": "dropdownStyle",
        "description": "To set the style of the dropdown menu",
        "type": "CSSProperties",
        "default": "-",
        "version": ""
      },
      "fieldNames": {
        "property": "fieldNames",
        "description": "Customize node label, value, children field name",
        "type": "object",
        "default": "{ label: `label`, value: `value`, children: `children` }",
        "version": "4.17.0"
      },
      "filterTreeNode": {
        "property": "filterTreeNode",
        "description": "Whether to filter treeNodes by input value. The value of `treeNodeFilterProp` is used for filtering by default",
        "type": "boolean \\| function(inputValue: string, treeNode: TreeNode) (should return boolean)",
        "default": "function",
        "version": ""
      },
      "getPopupContainer": {
        "property": "getPopupContainer",
        "description": "To set the container of the dropdown menu. The default is to create a `div` element in `body`, you can reset it to the scrolling area and make a relative reposition. [example](https://codepen.io/afc163/pen/zEjNOy?editors=0010)",
        "type": "function(triggerNode)",
        "default": "() => document.body",
        "version": ""
      },
      "labelInValue": {
        "property": "labelInValue",
        "description": "Whether to embed label in value, turn the format of value from `string` to {value: string, label: ReactNode, halfChecked: string\\[]}",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "listHeight": {
        "property": "listHeight",
        "description": "Config popup height",
        "type": "number",
        "default": "256",
        "version": ""
      },
      "loadData": {
        "property": "loadData",
        "description": "Load data asynchronously. Will not load when filtering. Check FAQ for more info",
        "type": "function(node)",
        "default": "-",
        "version": ""
      },
      "maxTagCount": {
        "property": "maxTagCount",
        "description": "Max tag count to show. `responsive` will cost render performance",
        "type": "number \\| `responsive`",
        "default": "-",
        "version": "responsive: 4.10"
      },
      "maxTagPlaceholder": {
        "property": "maxTagPlaceholder",
        "description": "Placeholder for not showing tags",
        "type": "ReactNode \\| function(omittedValues)",
        "default": "-",
        "version": ""
      },
      "maxTagTextLength": {
        "property": "maxTagTextLength",
        "description": "Max tag text length to show",
        "type": "number",
        "default": "-",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "Support multiple or not, will be `true` when enable `treeCheckable`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "notFoundContent": {
        "property": "notFoundContent",
        "description": "Specify content to show when no result matches",
        "type": "ReactNode",
        "default": "`Not Found`",
        "version": ""
      },
      "placeholder": {
        "property": "placeholder",
        "description": "Placeholder of the select input",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "The position where the selection box pops up",
        "type": "`bottomLeft` `bottomRight` `topLeft` `topRight`",
        "default": "bottomLeft",
        "version": ""
      },
      "searchValue": {
        "property": "searchValue",
        "description": "Work with `onSearch` to make search value controlled",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "showArrow": {
        "property": "showArrow",
        "description": "Whether to show the `suffixIcon`",
        "type": "boolean",
        "default": "`true`",
        "version": ""
      },
      "showCheckedStrategy": {
        "property": "showCheckedStrategy",
        "description": "The way show selected item in box when `treeCheckable` set. **Default:** just show child nodes. **`TreeSelect.SHOW_ALL`:** show all checked treeNodes (include parent treeNode). **`TreeSelect.SHOW_PARENT`:** show checked treeNodes (just show parent treeNode)",
        "type": "`TreeSelect.SHOW_ALL` \\| `TreeSelect.SHOW_PARENT` \\| `TreeSelect.SHOW_CHILD`",
        "default": "`TreeSelect.SHOW_CHILD`",
        "version": ""
      },
      "showSearch": {
        "property": "showSearch",
        "description": "Support search or not",
        "type": "boolean",
        "default": "single: false \\| multiple: true",
        "version": ""
      },
      "size": {
        "property": "size",
        "description": "To set the size of the select input",
        "type": "`large` \\| `middle` \\| `small`",
        "default": "-",
        "version": ""
      },
      "status": {
        "property": "status",
        "description": "Set validation status",
        "type": "'error' \\| 'warning'",
        "default": "-",
        "version": "4.19.0"
      },
      "suffixIcon": {
        "property": "suffixIcon",
        "description": "The custom suffix icon,you must set `showArrow` to `true` manually in multiple selection mode",
        "type": "ReactNode",
        "default": "-",
        "version": ""
      },
      "switcherIcon": {
        "property": "switcherIcon",
        "description": "Customize collapse/expand icon of tree node",
        "type": "ReactNode \\| ((props: AntTreeNodeProps) => ReactNode)",
        "default": "-",
        "version": "renderProps: 4.20.0"
      },
      "tagRender": {
        "property": "tagRender",
        "description": "Customize tag render when `multiple`",
        "type": "(props) => ReactNode",
        "default": "-",
        "version": ""
      },
      "treeCheckable": {
        "property": "treeCheckable",
        "description": "Whether to show checkbox on the treeNodes",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeCheckStrictly": {
        "property": "treeCheckStrictly",
        "description": "Whether to check nodes precisely (in the `checkable` mode), means parent and child nodes are not associated, and it will make `labelInValue` be true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeData": {
        "property": "treeData",
        "description": "Data of the treeNodes, manual construction work is no longer needed if this property has been set(ensure the Uniqueness of each value)",
        "type": "array&lt;{ value, title, children, \\[disabled, disableCheckbox, selectable, checkable] }>",
        "default": "\\[]",
        "version": ""
      },
      "treeDataSimpleMode": {
        "property": "treeDataSimpleMode",
        "description": "Enable simple mode of treeData. Changes the `treeData` schema to: \\[{id:1, pId:0, value:'1', title:\"test1\",...},...] where pId is parent node's id). It is possible to replace the default `id` and `pId` keys by providing object to `treeDataSimpleMode`",
        "type": "boolean \\| object&lt;{ id: string, pId: string, rootPId: string }>",
        "default": "false",
        "version": ""
      },
      "treeDefaultExpandAll": {
        "property": "treeDefaultExpandAll",
        "description": "Whether to expand all treeNodes by default",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeDefaultExpandedKeys": {
        "property": "treeDefaultExpandedKeys",
        "description": "Default expanded treeNodes",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "treeExpandAction": {
        "property": "treeExpandAction",
        "description": "Tree title open logic when click, optional: false \\| `click` \\| `doubleClick`",
        "type": "string \\| boolean",
        "default": "false",
        "version": "4.21.0"
      },
      "treeExpandedKeys": {
        "property": "treeExpandedKeys",
        "description": "Set expanded keys",
        "type": "string\\[]",
        "default": "-",
        "version": ""
      },
      "treeIcon": {
        "property": "treeIcon",
        "description": "Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to `true`",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "treeLoadedKeys": {
        "property": "treeLoadedKeys",
        "description": "(Controlled) Set loaded tree nodes, work with `loadData` only",
        "type": "string\\[]",
        "default": "\\[]",
        "version": ""
      },
      "treeLine": {
        "property": "treeLine",
        "description": "Show the line. Ref [Tree - showLine](/components/tree/#components-tree-demo-line)",
        "type": "boolean \\| object",
        "default": "false",
        "version": "4.17.0"
      },
      "treeNodeFilterProp": {
        "property": "treeNodeFilterProp",
        "description": "Will be used for filtering if `filterTreeNode` returns true",
        "type": "string",
        "default": "`value`",
        "version": ""
      },
      "treeNodeLabelProp": {
        "property": "treeNodeLabelProp",
        "description": "Will render as content of select",
        "type": "string",
        "default": "`title`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "To set the current selected treeNode(s)",
        "type": "string \\| string\\[]",
        "default": "-",
        "version": ""
      },
      "virtual": {
        "property": "virtual",
        "description": "Disable virtual scroll when set to false",
        "type": "boolean",
        "default": "true",
        "version": "4.1.0"
      },
      "onChange": {
        "property": "onChange",
        "description": "A callback function, can be executed when selected treeNodes or input value change",
        "type": "function(value, label, extra)",
        "default": "-",
        "version": ""
      },
      "onDropdownVisibleChange": {
        "property": "onDropdownVisibleChange",
        "description": "Called when dropdown open",
        "type": "function(open)",
        "default": "-",
        "version": ""
      },
      "onSearch": {
        "property": "onSearch",
        "description": "A callback function, can be executed when the search input changes",
        "type": "function(value: string)",
        "default": "-",
        "version": ""
      },
      "onSelect": {
        "property": "onSelect",
        "description": "A callback function, can be executed when you select a treeNode",
        "type": "function(value, node, extra)",
        "default": "-",
        "version": ""
      },
      "onTreeExpand": {
        "property": "onTreeExpand",
        "description": "A callback function, can be executed when treeNode expanded",
        "type": "function(expandedKeys)",
        "default": "-",
        "version": ""
      }
    },
    "TreeSelect.TreeNode": {
      "checkable": {
        "property": "checkable",
        "description": "When Tree is checkable, set TreeNode display Checkbox or not",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "disableCheckbox": {
        "property": "disableCheckbox",
        "description": "Disables the checkbox of the treeNode",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "isLeaf": {
        "property": "isLeaf",
        "description": "Leaf node or not",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "key": {
        "property": "key",
        "description": "Required property (unless using `treeDataSimpleMode`), should be unique in the tree",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "selectable": {
        "property": "selectable",
        "description": "Whether can be selected",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "title": {
        "property": "title",
        "description": "Content showed on the treeNodes",
        "type": "ReactNode",
        "default": "`---`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Will be treated as `treeNodeFilterProp` by default, should be unique in the tree",
        "type": "string",
        "default": "-",
        "version": ""
      }
    },
    "Typography.Title": {
      "code": {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "copyable": {
        "property": "copyable",
        "description": "Whether to be copyable, customize it via setting an object",
        "type": "boolean \\| [copyable](#copyable)",
        "default": "false",
        "version": "[copyable](#copyable)"
      },
      "delete": {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "editable": {
        "property": "editable",
        "description": "If editable. Can control edit state when is object",
        "type": "boolean \\| [editable](#editable)",
        "default": "false",
        "version": "[editable](#editable)"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows, can configure rows and expandable by using object",
        "type": "boolean \\| [ellipsis](#ellipsis)",
        "default": "false",
        "version": "[ellipsis](#ellipsis)"
      },
      "level": {
        "property": "level",
        "description": "Set content importance. Match with `h1`, `h2`, `h3`, `h4`, `h5`",
        "type": "number: 1, 2, 3, 4, 5",
        "default": "1",
        "version": "5: 4.6.0"
      },
      "mark": {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "Set the handler to handle click event",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      "italic": {
        "property": "italic",
        "description": "Italic style",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      "type": {
        "property": "type",
        "description": "Content type",
        "type": "`secondary` \\| `success` \\| `warning` \\| `danger`",
        "default": "-",
        "version": "success: 4.6.0"
      },
      "underline": {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    },
    "Upload": {
      "accept": {
        "property": "accept",
        "description": "File types that can be accepted. See [input accept Attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept)",
        "type": "string",
        "default": "-",
        "version": ""
      },
      "action": {
        "property": "action",
        "description": "Uploading URL",
        "type": "string \\| (file) => Promise&lt;string>",
        "default": "-",
        "version": ""
      },
      "beforeUpload": {
        "property": "beforeUpload",
        "description": "Hook function which will be executed before uploading. Uploading will be stopped with `false` or a rejected Promise returned. When returned value is `Upload.LIST_IGNORE`, the list of files that have been uploaded will ignore it. **Warning：this function is not supported in IE9**",
        "type": "(file, fileList) => boolean \\| Promise&lt;File> \\| `Upload.LIST_IGNORE`",
        "default": "-",
        "version": ""
      },
      "customRequest": {
        "property": "customRequest",
        "description": "Override for the default xhr behavior allowing for additional customization and the ability to implement your own XMLHttpRequest",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "data": {
        "property": "data",
        "description": "Uploading extra params or function which can return uploading extra params",
        "type": "object \\| (file) => object \\| Promise&lt;object>",
        "default": "-",
        "version": ""
      },
      "defaultFileList": {
        "property": "defaultFileList",
        "description": "Default list of files that have been uploaded",
        "type": "object\\[]",
        "default": "-",
        "version": ""
      },
      "directory": {
        "property": "directory",
        "description": "Support upload whole directory ([caniuse](https://caniuse.com/#feat=input-file-directory))",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable upload button",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "fileList": {
        "property": "fileList",
        "description": "List of files that have been uploaded (controlled). Here is a common issue [#2423](https://github.com/ant-design/ant-design/issues/2423) when using it",
        "type": "[UploadFile](#uploadfile)\\[]",
        "default": "-",
        "version": ""
      },
      "headers": {
        "property": "headers",
        "description": "Set request headers, valid above IE10",
        "type": "object",
        "default": "-",
        "version": ""
      },
      "iconRender": {
        "property": "iconRender",
        "description": "Custom show icon",
        "type": "(file: UploadFile, listType?: UploadListType) => ReactNode",
        "default": "-",
        "version": ""
      },
      "isImageUrl": {
        "property": "isImageUrl",
        "description": "Customize if render &lt;img /> in thumbnail",
        "type": "(file: UploadFile) => boolean",
        "default": "[(inside implementation)](https://github.com/ant-design/ant-design/blob/4ad5830eecfb87471cd8ac588c5d992862b70770/components/upload/utils.tsx#L47-L68)",
        "version": ""
      },
      "itemRender": {
        "property": "itemRender",
        "description": "Custom item of uploadList",
        "type": "(originNode: ReactElement, file: UploadFile, fileList: object\\[], actions: { download: function, preview: function, remove: function }) => React.ReactNode",
        "default": "-",
        "version": "4.16.0"
      },
      "listType": {
        "property": "listType",
        "description": "Built-in stylesheets, support for four types: `text`, `picture`, `picture-card` or `picture-circle`",
        "type": "string",
        "default": "`text`",
        "version": "`picture-circle`(5.2.0+)"
      },
      "maxCount": {
        "property": "maxCount",
        "description": "Limit the number of uploaded files. Will replace current one when `maxCount` is `1`",
        "type": "number",
        "default": "-",
        "version": "4.10.0"
      },
      "method": {
        "property": "method",
        "description": "The http method of upload request",
        "type": "string",
        "default": "`post`",
        "version": ""
      },
      "multiple": {
        "property": "multiple",
        "description": "Whether to support selected multiple files. `IE10+` supported. You can select multiple files with CTRL holding down while multiple is set to be true",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "name": {
        "property": "name",
        "description": "The name of uploading file",
        "type": "string",
        "default": "`file`",
        "version": ""
      },
      "openFileDialogOnClick": {
        "property": "openFileDialogOnClick",
        "description": "Click open file dialog",
        "type": "boolean",
        "default": "true",
        "version": ""
      },
      "previewFile": {
        "property": "previewFile",
        "description": "Customize preview file logic",
        "type": "(file: File \\| Blob) => Promise&lt;dataURL: string>",
        "default": "-",
        "version": ""
      },
      "progress": {
        "property": "progress",
        "description": "Custom progress bar",
        "type": "[ProgressProps](/components/progress/#api) (support `type=\"line\"` only)",
        "default": "{ strokeWidth: 2, showInfo: false }",
        "version": "4.3.0"
      },
      "showUploadList": {
        "property": "showUploadList",
        "description": "Whether to show default upload list, could be an object to specify `showPreviewIcon`, `showRemoveIcon`, `showDownloadIcon`, `removeIcon` and `downloadIcon` individually",
        "type": "boolean \\| { showPreviewIcon?: boolean, showDownloadIcon?: boolean, showRemoveIcon?: boolean, previewIcon?: ReactNode \\| (file: UploadFile) => ReactNode, removeIcon?: ReactNode \\| (file: UploadFile) => ReactNode, downloadIcon?: ReactNode \\| (file: UploadFile) => ReactNode }",
        "default": "true",
        "version": "function: 4.7.0"
      },
      "withCredentials": {
        "property": "withCredentials",
        "description": "The ajax upload with cookie sent",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onChange": {
        "property": "onChange",
        "description": "A callback function, can be executed when uploading state is changing, see [onChange](#onchange)",
        "type": "function",
        "default": "-",
        "version": ""
      },
      "onDrop": {
        "property": "onDrop",
        "description": "A callback function executed when files are dragged and dropped into the upload area",
        "type": "(event: React.DragEvent) => void",
        "default": "-",
        "version": "4.16.0"
      },
      "onDownload": {
        "property": "onDownload",
        "description": "Click the method to download the file, pass the method to perform the method logic, and do not pass the default jump to the new TAB",
        "type": "function(file): void",
        "default": "(Jump to new TAB)",
        "version": ""
      },
      "onPreview": {
        "property": "onPreview",
        "description": "A callback function, will be executed when the file link or preview icon is clicked",
        "type": "function(file)",
        "default": "-",
        "version": ""
      },
      "onRemove": {
        "property": "onRemove",
        "description": "A callback function, will be executed when removing file button is clicked, remove event will be prevented when the return value is false or a Promise which resolve(false) or reject",
        "type": "function(file): boolean \\| Promise",
        "default": "-",
        "version": ""
      }
    },
    "Typography.Paragraph": {
      "code": {
        "property": "code",
        "description": "Code style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "copyable": {
        "property": "copyable",
        "description": "Whether to be copyable, customize it via setting an object",
        "type": "boolean \\| [copyable](#copyable)",
        "default": "false",
        "version": "[copyable](#copyable)"
      },
      "delete": {
        "property": "delete",
        "description": "Deleted line style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disabled content",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "editable": {
        "property": "editable",
        "description": "If editable. Can control edit state when is object",
        "type": "boolean \\| [editable](#editable)",
        "default": "false",
        "version": "[editable](#editable)"
      },
      "ellipsis": {
        "property": "ellipsis",
        "description": "Display ellipsis when text overflows, can configure rows and expandable by using object",
        "type": "boolean \\| [ellipsis](#ellipsis)",
        "default": "false",
        "version": "[ellipsis](#ellipsis)"
      },
      "mark": {
        "property": "mark",
        "description": "Marked style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "onClick": {
        "property": "onClick",
        "description": "Set the handler to handle click event",
        "type": "(event) => void",
        "default": "-",
        "version": ""
      },
      "strong": {
        "property": "strong",
        "description": "Bold style",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "italic": {
        "property": "italic",
        "description": "Italic style",
        "type": "boolean",
        "default": "false",
        "version": "4.16.0"
      },
      "type": {
        "property": "type",
        "description": "Content type",
        "type": "`secondary` \\| `success` \\| `warning` \\| `danger`",
        "default": "-",
        "version": "success: 4.6.0"
      },
      "underline": {
        "property": "underline",
        "description": "Underlined style",
        "type": "boolean",
        "default": "false",
        "version": ""
      }
    },
    "ColorPicker": {
      "format": {
        "property": "format",
        "description": "Format of color",
        "type": "`rgb` \\| `hex` \\| `hsb`",
        "default": "`hex`",
        "version": ""
      },
      "value": {
        "property": "value",
        "description": "Value of color",
        "type": "string \\| `Color`",
        "default": "-",
        "version": ""
      },
      "defaultValue": {
        "property": "defaultValue",
        "description": "Default value of color",
        "type": "string \\| `Color`",
        "default": "-",
        "version": ""
      },
      "allowClear": {
        "property": "allowClear",
        "description": "Allow clearing color selected",
        "type": "boolean",
        "default": "false",
        "version": ""
      },
      "presets": {
        "property": "presets",
        "description": "Preset colors",
        "type": "`{ label: ReactNode, colors: Array<string \\| Color> }[]`",
        "default": "-",
        "version": ""
      },
      "children": {
        "property": "children",
        "description": "Trigger of ColorPicker",
        "type": "React.ReactNode",
        "default": "-",
        "version": ""
      },
      "trigger": {
        "property": "trigger",
        "description": "ColorPicker trigger mode",
        "type": "`hover` \\| `click`",
        "default": "`click`",
        "version": ""
      },
      "open": {
        "property": "open",
        "description": "Whether to show popup",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "disabled": {
        "property": "disabled",
        "description": "Disable ColorPicker",
        "type": "boolean",
        "default": "-",
        "version": ""
      },
      "placement": {
        "property": "placement",
        "description": "Placement of popup",
        "type": "`top` \\| `topLeft` \\| `topRight` \\| `bottom` \\| `bottomLeft` \\| `bottomRight`",
        "default": "`bottomLeft`",
        "version": ""
      },
      "arrow": {
        "property": "arrow",
        "description": "Configuration for popup arrow",
        "type": "`boolean \\| { pointAtCenter: boolean }`",
        "default": "`true`",
        "version": "-"
      },
      "onChange": {
        "property": "onChange",
        "description": "Callback when `value` is changed",
        "type": "`(value: Color, hex: string) => void`",
        "default": "-",
        "version": ""
      },
      "onFormatChange": {
        "property": "onFormatChange",
        "description": "Callback when `format` is changed",
        "type": "`(format: 'hex' \\| 'rgb' \\| 'hsb') => void`",
        "default": "-",
        "version": ""
      },
      "onOpenChange": {
        "property": "onOpenChange",
        "description": "Callback when `open` is changed",
        "type": "`(open: boolean) => void`",
        "default": "-",
        "version": ""
      },
      "onClear": {
        "property": "onClear",
        "description": "Called when clear",
        "type": "`() => void`",
        "default": "-",
        "version": ""
      }
    }
  }
}